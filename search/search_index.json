{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to DhanMan Documentation","text":"<p>DhanMan is an advanced financial management software designed to streamline accounting and operational workflows for organizations of all types, from apartment complexes to small businesses. This platform integrates key features such as invoicing, payment tracking, payroll, and financial analytics into a user-friendly system that makes managing finances simpler and more efficient.</p>"},{"location":"#key-features","title":"Key Features:","text":"<ul> <li>Accounting Simplified: Manage income, expenses, invoices, and bills with ease.</li> <li>Customizable for Apartment Complexes: Setup buildings, units, and residents while defining payment strategies tailored to your needs.</li> <li>Comprehensive Expense Tracking: Monitor utility bills, payroll, and maintenance costs.</li> <li>Powerful Analytics: Generate profit-loss statements, monitor receivables, and identify trends in your financial data.</li> </ul>"},{"location":"#what-youll-find-here","title":"What You\u2019ll Find Here:","text":"<p>This documentation provides detailed information to help you get started and use DhanMan effectively. Explore the sections to learn about: - Authentication: Secure login and user management. - Permissions: Configure user roles and access levels. - Accounting Entries: Manage day-to-day financial operations. - Financial Reports: Analyze financial health with insightful reports. - Payroll: Handle salaries and employee details seamlessly. - Coding Conventions and Guides: For developers extending DhanMan's capabilities.</p>"},{"location":"#getting-started","title":"Getting Started:","text":"<p>To begin, navigate through the sidebar for detailed guides and step-by-step instructions. Whether you're an administrator setting up your organization, a resident managing payments, or a developer customizing features, this documentation has you covered.</p> <p>For more details, visit our official website or contact our support team.</p>"},{"location":"authentication-authorization/","title":"Request -&gt;Authentication-&gt;Authorization","text":""},{"location":"authentication-authorization/#overview","title":"Overview","text":"<p>This document outlines the flow of a request from when it enters the system, how authentication and authorization are handled, and how the <code>IUserContextService</code>, <code>PermissionHandler</code>, and <code>PermissionService</code> work together.</p>"},{"location":"authentication-authorization/#summary","title":"Summary","text":"<ol> <li>Incoming Request: A request with a JWT token arrives at the API.</li> <li>Authentication: The JWT token is validated, and user claims are populated.</li> <li>Dependency Injection: <code>IUserContextService</code> is injected to provide user context.</li> <li>Controller Handling: The request is routed to a controller derived from <code>ApiController</code>.</li> <li>Authorization: The <code>[Authorize]</code> attribute triggers the <code>PermissionHandler</code>.</li> <li>Permission Checking:<ul> <li><code>PermissionHandler</code> uses <code>IServiceScopeFactory</code> to create a new scope and resolve <code>IPermissionService</code>.</li> <li><code>PermissionService</code> checks the database and cache for the required permissions.</li> </ul> </li> <li>Action Execution: If authorization succeeds, the controller action is executed.</li> </ol>"},{"location":"authentication-authorization/#detailed-steps","title":"Detailed Steps","text":""},{"location":"authentication-authorization/#1-incoming-request-with-token","title":"1. Incoming Request with Token","text":"<p>When a client makes a request to the API, it includes a JWT token in the <code>Authorization</code> header.</p> <pre><code>GET /api/orders HTTP/1.1\nHost: api.example.com\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre>"},{"location":"authentication-authorization/#2-authentication","title":"2. Authentication","text":"<p>The middleware in <code>Startup.cs</code> or <code>Program.cs</code> is configured to validate JWT tokens.</p> <pre><code>public void ConfigureServices(IServiceCollection services)\n{\n    services.AddAuthentication(options =&gt;\n    {\n        options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n        options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n    })\n    .AddJwtBearer(options =&gt;\n    {\n        options.Authority = \"https://your-auth-server.com\";\n        options.Audience = \"your-audience\";\n        // Other JWT validation parameters\n    });\n\n    services.AddAuthorization();\n    services.AddHttpContextAccessor();\n    services.AddScoped&lt;IUserContextService, UserContextService&gt;();\n    services.AddScoped&lt;IPermissionService, PermissionService&gt;();\n    services.AddScoped&lt;IAuthorizationHandler, PermissionHandler&gt;();\n\n    services.AddDbContext&lt;PermissionDbContext&gt;(options =&gt;\n        options.UseNpgsql(Configuration.GetConnectionString(\"PermissionDbConnection\"))\n               .UseSnakeCaseNamingConvention());\n\n    // Other service registrations\n}\n</code></pre> <p>When the request arrives, the <code>AddJwtBearer</code> middleware validates the token. If the token is valid, the user is authenticated and the user's claims are populated in <code>HttpContext.User</code>.</p>"},{"location":"authentication-authorization/#3-dependency-injection","title":"3. Dependency Injection","text":"<p>Services like <code>IUserContextService</code> are injected into controllers and other services as needed. This is configured in the <code>ConfigureServices</code> method as shown above.</p>"},{"location":"authentication-authorization/#4-controller-handling","title":"4. Controller Handling","text":"<p>The request is routed to the appropriate controller. All controllers inherit from <code>ApiController</code>, which ensures they have access to common functionality like <code>IUserContextService</code>.</p> <pre><code>[Authorize]\npublic abstract class ApiController : ControllerBase\n{\n    protected IMediator Mediator { get; }\n    protected IUserContextService UserContextService { get; }\n\n    protected ApiController(IMediator mediator, IUserContextService userContextService)\n    {\n        Mediator = mediator;\n        UserContextService = userContextService;\n    }\n}\n</code></pre>"},{"location":"authentication-authorization/#5-authorization","title":"5. Authorization","text":"<p>The <code>[Authorize]</code> attribute on <code>ApiController</code> triggers the authorization process.</p>"},{"location":"authentication-authorization/#6-permission-checking","title":"6. Permission Checking","text":"<ol> <li> <p>PermissionHandler:</p> <ul> <li>The <code>PermissionHandler</code> is an <code>AuthorizationHandler</code> that checks if the user has the required permissions.</li> </ul> </li> </ol> <pre><code>    public class PermissionHandler : AuthorizationHandler&lt;PermissionRequirement&gt;\n    {\n        private readonly IServiceScopeFactory _serviceScopeFactory;\n        private readonly IHttpContextAccessor _httpContextAccessor;\n        private readonly ILogger&lt;PermissionHandler&gt; _logger;\n\n        public PermissionHandler(IServiceScopeFactory serviceScopeFactory, IHttpContextAccessor httpContextAccessor, ILogger&lt;PermissionHandler&gt; logger)\n        {\n            _serviceScopeFactory = serviceScopeFactory;\n            _httpContextAccessor = httpContextAccessor;\n            _logger = logger;\n        }\n\n        protected override async Task HandleRequirementAsync(AuthorizationHandlerContext context, PermissionRequirement requirement)\n        {\n            _logger.LogDebug(\"Starting authorization check for permission: {Permission}\", requirement.Permission);\n\n            var userIdClaim = _httpContextAccessor.HttpContext.User?.FindFirst(\"dhanman_id\");\n            if (userIdClaim != null &amp;&amp; Guid.TryParse(userIdClaim.Value, out var userId))\n            {\n                _logger.LogInformation(\"User {UserId} found, checking permissions.\", userId);\n\n                if (await HasPermissionIterativelyAsync(userId, requirement))\n                {\n                    context.Succeed(requirement);\n                    _logger.LogInformation(\"Authorization succeeded for user {UserId} on permission {Permission}.\", userId, requirement.Permission);\n                    return;\n                }\n            }\n            else\n            {\n                _logger.LogWarning(\"User ID claim 'dhanman_id' not found or invalid.\");\n            }\n\n            _logger.LogWarning(\"Authorization failed for user {UserId} on permission {Permission}.\", userIdClaim?.Value, requirement.Permission);\n            context.Fail();\n        }\n\n        private async Task&lt;bool&gt; HasPermissionIterativelyAsync(Guid userId, PermissionRequirement requirement)\n        {\n            _logger.LogDebug(\"Checking permissions iteratively for user {UserId}.\", userId);\n\n            var permissionsToCheck = new Stack&lt;PermissionRequirement&gt;();\n            permissionsToCheck.Push(requirement);\n\n            while (permissionsToCheck.Count &gt; 0)\n            {\n                var currentPermission = permissionsToCheck.Pop();\n\n                using (var scope = _serviceScopeFactory.CreateScope())\n                {\n                    var permissionService = scope.ServiceProvider.GetRequiredService&lt;IPermissionService&gt;();\n\n                    // Check if the user has the current permission\n                    if (await permissionService.HasPermissionAsync(userId, currentPermission.Permission))\n                    {\n                        _logger.LogDebug(\"Permission {Permission} granted for user {UserId}.\", currentPermission.Permission, userId);\n                        return true;\n                    }\n                }\n\n                // Add child permissions to the stack for checking\n                foreach (var childPermission in currentPermission.ChildPermissions)\n                {\n                    permissionsToCheck.Push(childPermission);\n                }\n            }\n\n            _logger.LogDebug(\"Permission {Permission} denied for user {UserId}.\", requirement.Permission, userId);\n            return false;\n        }\n    }\n</code></pre> <ol> <li> <p>PermissionService:</p> <ul> <li>The <code>PermissionService</code> checks if the user has the necessary permissions by querying the database.</li> </ul> </li> </ol> <pre><code>    public class PermissionService : IPermissionService\n    {\n        private readonly PermissionDbContext _context;\n        private readonly IMemoryCache _cache;\n        private readonly ILogger&lt;PermissionService&gt; _logger;\n\n        public PermissionService(PermissionDbContext context, IMemoryCache cache, ILogger&lt;PermissionService&gt; logger)\n        {\n            _context = context;\n            _cache = cache;\n            _logger = logger;\n        }\n\n        public async Task&lt;bool&gt; HasPermissionAsync(Guid userId, string permission)\n        {\n            var cacheKey = $\"{userId}_{permission}\";\n            _logger.LogDebug(\"Checking permissions for user {UserId} on permission {Permission}\", userId, permission);\n\n            if (_cache.TryGetValue(cacheKey, out bool hasPermissionfromCache))\n            {\n                _logger.LogInformation(\"Permission {Permission} for user {UserId} found in cache.\", permission, userId);\n                return hasPermissionfromCache;\n            }\n\n            _logger.LogDebug(\"Permission {Permission} for user {UserId} not found in cache. Checking database.\", permission, userId);\n\n            bool hasPermission = await _context.UserPermissions\n                .AnyAsync(up =&gt; up.UserId == userId &amp;&amp; up.Permission.Name == permission);\n\n            var cacheEntryOptions = new MemoryCacheEntryOptions()\n                .SetSlidingExpiration(TimeSpan.FromMinutes(60));\n\n            _cache.Set(cacheKey, hasPermission, cacheEntryOptions);\n\n            _logger.LogInformation(\"Permission {Permission} for user {UserId} retrieved from database and cached: {HasPermission}\", permission, userId, hasPermission);\n\n            return hasPermission;\n        }\n    }\n</code></pre>"},{"location":"authentication-authorization/#7-action-execution","title":"7. Action Execution","text":"<p>If the authorization succeeds, the controller action is executed. If it fails, the request is denied with a <code>403 Forbidden</code> response.</p>"},{"location":"common/","title":"Common Permissions","text":""},{"location":"common/#accounts-permissions","title":"Accounts Permissions","text":"<ul> <li>Accounts.Read</li> <li><code>Accounts.Read.AccountGroups</code></li> <li><code>Accounts.Read.AccountCategories</code></li> <li><code>Accounts.Read.SalesAccounts</code></li> <li><code>Accounts.Read.PurchaseAccounts</code></li> <li><code>Accounts.Read.BankAccounts</code></li> <li><code>Accounts.Read.CashAccounts</code></li> <li><code>Accounts.Read.BankAndCashAccounts</code></li> <li><code>Accounts.Read.ChartOfAccounts</code></li> <li><code>Accounts.Read.ChildAccounts</code></li> <li>Accounts.Write</li> <li><code>Accounts.Write.AccountGroups</code></li> <li><code>Accounts.Write.AccountCategories</code></li> <li><code>Accounts.Write.ChartOfAccounts</code></li> </ul>"},{"location":"common/#address-permissions","title":"Address Permissions","text":"<ul> <li>Address.Read</li> <li><code>Address.Read.Countries</code></li> <li><code>Address.Read.States</code></li> <li><code>Address.Read.Cities</code></li> <li><code>Address.Read.Addresses</code></li> </ul>"},{"location":"common/#company-permissions","title":"Company Permissions","text":"<ul> <li>Company.Read</li> <li><code>Company.Read.Companies</code></li> <li><code>Company.Read.CompanyNames</code></li> <li><code>Company.Read.Company</code></li> <li><code>Company.Read.CompaniesByOrganization</code></li> <li><code>Company.Read.DefaultCompanyByUser</code></li> <li>Company.Write</li> <li><code>Company.Write.Companies</code></li> </ul>"},{"location":"common/#company-preferences-permissions","title":"Company Preferences Permissions","text":"<ul> <li>CompanyPreferences.Read</li> <li><code>CompanyPreferences.Read.CompanyPreferences</code></li> <li>CompanyPreferences.Write</li> <li><code>CompanyPreferences.Write.CompanyPreferences</code></li> </ul>"},{"location":"common/#currency-permissions","title":"Currency Permissions","text":"<ul> <li>Currency.Read</li> <li><code>Currency.Read.Currencies</code></li> </ul>"},{"location":"common/#customers-permissions","title":"Customers Permissions","text":"<ul> <li>Customers.Write</li> <li><code>Customers.Write.Customers</code></li> </ul>"},{"location":"common/#general-ledgers-permissions","title":"General Ledgers Permissions","text":"<ul> <li>GeneralLedgers.Read</li> <li><code>GeneralLedgers.Read.GeneralLedgers</code></li> <li>GeneralLedgers.Write</li> <li><code>GeneralLedgers.Write.GeneralLedgers</code></li> </ul>"},{"location":"common/#journal-voucher-permissions","title":"Journal Voucher Permissions","text":"<ul> <li>JournalVoucher.Write</li> <li><code>JournalVoucher.Write.JournalVouchers</code></li> </ul>"},{"location":"common/#notification-permissions","title":"Notification Permissions","text":"<ul> <li>Notification.Read</li> <li><code>Notification.Read.Notifications</code></li> <li>Notification.Write</li> <li><code>Notification.Write.Notifications</code></li> </ul>"},{"location":"common/#organization-permissions","title":"Organization Permissions","text":"<ul> <li>Organization.Read</li> <li><code>Organization.Read.OrganizationAccounts</code></li> <li><code>Organization.Read.OrganizationAccountsByCompany</code></li> </ul>"},{"location":"common/#payments-permissions","title":"Payments Permissions","text":"<ul> <li>Payments.Write</li> <li><code>Payments.Write.Payments</code></li> </ul>"},{"location":"common/#permissions-management","title":"Permissions Management","text":"<ul> <li>Permissions.Read</li> <li><code>Permissions.Read.Permissions</code></li> </ul>"},{"location":"common/#public-user-permissions","title":"Public User Permissions","text":"<ul> <li>PublicUser.Read</li> <li><code>PublicUser.Read.PublicUsers</code></li> </ul>"},{"location":"common/#roles-permissions","title":"Roles Permissions","text":"<ul> <li>Roles.Read</li> <li><code>Roles.Read.Roles</code></li> </ul>"},{"location":"common/#transaction-permissions","title":"Transaction Permissions","text":"<ul> <li>Transaction.Write</li> <li><code>Transaction.Write.Transactions</code></li> </ul>"},{"location":"common/#users-permissions","title":"Users Permissions","text":"<ul> <li>Users.Read</li> <li><code>Users.Read.Users</code></li> <li><code>Users.Read.UserNames</code></li> <li>Users.Write</li> <li><code>Users.Write.Users</code></li> </ul>"},{"location":"common/#vendors-permissions","title":"Vendors Permissions","text":"<ul> <li>Vendors.Write</li> <li><code>Vendors.Write.Vendors</code></li> </ul>"},{"location":"common/#warehouse-permissions","title":"Warehouse Permissions","text":"<ul> <li>Warehouse.Read</li> <li><code>Warehouse.Read.Warehouses</code></li> <li><code>Warehouse.Read.WarehouseNames</code></li> <li>Warehouse.Write</li> <li><code>Warehouse.Write.Warehouses</code></li> </ul>"},{"location":"common/#permissions-hierarchy","title":"Permissions Hierarchy","text":""},{"location":"common/#commonadmin","title":"Common.Admin","text":"<ul> <li>**Permissions.Admin<ul> <li>Permissions.Read</li> <li><code>Permissions.Read.Permissions</code></li> </ul> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ul>"},{"location":"common/#accountsadmin","title":"Accounts.Admin","text":"<ul> <li>Accounts.Read<ul> <li><code>Accounts.Read.AccountGroups</code></li> <li><code>Accounts.Read.AccountCategories</code></li> <li><code>Accounts.Read.SalesAccounts</code></li> <li><code>Accounts.Read.PurchaseAccounts</code></li> <li><code>Accounts.Read.BankAccounts</code></li> <li><code>Accounts.Read.CashAccounts</code></li> <li><code>Accounts.Read.BankAndCashAccounts</code></li> <li><code>Accounts.Read.ChartOfAccounts</code></li> <li><code>Accounts.Read.ChildAccounts</code></li> </ul> </li> <li>Accounts.Write<ul> <li><code>Accounts.Write.AccountGroups</code></li> <li><code>Accounts.Write.AccountCategories</code></li> <li><code>Accounts.Write.ChartOfAccounts</code></li> </ul> </li> </ul>"},{"location":"common/#addressadmin","title":"Address.Admin","text":"<ul> <li>Address.Read<ul> <li><code>Address.Read.Countries</code></li> <li><code>Address.Read.States</code></li> <li><code>Address.Read.Cities</code></li> <li><code>Address.Read.Addresses</code></li> </ul> </li> </ul>"},{"location":"common/#companyadmin","title":"Company.Admin","text":"<ul> <li>Company.Read</li> <li><code>Company.Read.Companies</code></li> <li><code>Company.Read.CompanyNames</code></li> <li><code>Company.Read.Company</code></li> <li><code>Company.Read.CompaniesByOrganization</code></li> <li><code>Company.Read.DefaultCompanyByUser</code></li> <li>Company.Write</li> <li><code>Company.Write.Companies</code></li> </ul>"},{"location":"common/#companypreferencesadmin","title":"CompanyPreferences.Admin","text":"<ul> <li>CompanyPreferences.Read</li> <li><code>CompanyPreferences.Read.CompanyPreferences</code></li> <li>CompanyPreferences.Write</li> <li><code>CompanyPreferences.Write.CompanyPreferences</code></li> </ul>"},{"location":"common/#currencyadmin","title":"Currency.Admin","text":"<ul> <li>Currency.Read</li> <li><code>Currency.Read.Currencies</code></li> </ul>"},{"location":"common/#customersadmin","title":"Customers.Admin","text":"<ul> <li>Customers.Write</li> <li><code>Customers.Write.Customers</code></li> </ul>"},{"location":"common/#generalledgersadmin","title":"GeneralLedgers.Admin","text":"<ul> <li>GeneralLedgers.Read</li> <li><code>GeneralLedgers.Read.GeneralLedgers</code></li> <li>GeneralLedgers.Write</li> <li><code>GeneralLedgers.Write.GeneralLedgers</code></li> </ul>"},{"location":"common/#journalvoucheradmin","title":"JournalVoucher.Admin","text":"<ul> <li>JournalVoucher.Write</li> <li><code>JournalVoucher.Write.JournalVouchers</code></li> </ul>"},{"location":"common/#notificationadmin","title":"Notification.Admin","text":"<ul> <li>Notification.Read</li> <li><code>Notification.Read.Notifications</code></li> <li>Notification.Write</li> <li><code>Notification.Write.Notifications</code></li> </ul>"},{"location":"common/#organizationadmin","title":"Organization.Admin**","text":"<ul> <li>Organization.Read</li> <li><code>Organization.Read.OrganizationAccounts</code></li> <li><code>Organization.Read.OrganizationAccountsByCompany</code></li> </ul>"},{"location":"common/#paymentsadmin","title":"Payments.Admin","text":"<ul> <li>Payments.Write</li> <li><code>Payments.Write.Payments</code></li> </ul>"},{"location":"common/#publicuseradmin","title":"PublicUser.Admin","text":"<ul> <li>PublicUser.Read</li> <li><code>PublicUser.Read.PublicUsers</code></li> </ul>"},{"location":"common/#rolesadmin","title":"Roles.Admin","text":"<ul> <li>Roles.Read</li> <li><code>Roles.Read.Roles</code></li> </ul>"},{"location":"common/#transactionadmin","title":"Transaction.Admin","text":"<ul> <li>Transaction.Write</li> <li><code>Transaction.Write.Transactions</code></li> </ul>"},{"location":"common/#usersadmin","title":"Users.Admin","text":"<ul> <li>Users.Read</li> <li><code>Users.Read.Users</code></li> <li><code>Users.Read.UserNames</code></li> <li>Users.Write</li> <li><code>Users.Write.Users</code></li> </ul>"},{"location":"common/#vendorsadmin","title":"Vendors.Admin","text":"<ul> <li>Vendors.Write</li> <li><code>Vendors.Write.Vendors</code></li> </ul>"},{"location":"common/#warehouseadmin","title":"Warehouse.Admin","text":"<ul> <li>Warehouse.Read</li> <li><code>Warehouse.Read.Warehouses</code></li> <li><code>Warehouse.Read.WarehouseNames</code></li> </ul>"},{"location":"common/#warehousewrite","title":"Warehouse.Write","text":"<ul> <li><code>Warehouse.Write.Warehouses</code></li> </ul>"},{"location":"product/","title":"\ud83d\udce6 Product Overview","text":"<p>This section documents the functional modules and user-facing features of the Dhanman ERP platform. It is organized by domain \u2014 from community management to financial and payroll modules \u2014 and includes integrations with external systems.</p>"},{"location":"product/#contents","title":"\ud83d\udcd8 Contents","text":""},{"location":"product/#getting-started","title":"Getting Started","text":"<ul> <li>App UI Structure</li> <li>Email Templates</li> </ul>"},{"location":"product/#community-engagement","title":"Community &amp; Engagement","text":"<ul> <li>Complaints</li> <li>Notice Board</li> <li>Polls &amp; Voting</li> <li>Resident Portal</li> </ul>"},{"location":"product/#gate-security-management","title":"Gate &amp; Security Management","text":"<ul> <li>Visitor Management</li> <li>Access Control</li> <li>Security Staff Management</li> <li>Vehicle Tracking</li> </ul>"},{"location":"product/#water-management","title":"Water Management","text":"<ul> <li>Meter Reading</li> <li>Water Billing</li> <li>Consumption Reports</li> </ul>"},{"location":"product/#events-calendar","title":"Events &amp; Calendar","text":"<ul> <li>Event Management</li> <li>Calendar Views</li> <li>Facility Booking</li> </ul>"},{"location":"product/#financial-management","title":"Financial Management","text":"<ul> <li>Invoices</li> <li>Maintenance Bills</li> <li>Receipts</li> </ul>"},{"location":"product/#purchase-vendor-management","title":"Purchase &amp; Vendor Management","text":"<ul> <li>Vendors</li> <li>Purchase Orders</li> </ul>"},{"location":"product/#inventory-assets","title":"Inventory &amp; Assets","text":"<ul> <li>Asset Management</li> <li>Stock Management</li> </ul>"},{"location":"product/#payroll-hr","title":"Payroll &amp; HR","text":"<ul> <li>Employee Management</li> <li>Attendance Tracking</li> <li>Salary Processing</li> <li>Statutory Compliance</li> </ul>"},{"location":"product/#reports-analytics","title":"Reports &amp; Analytics","text":"<ul> <li>Financial Reports</li> <li>Compliance Reports</li> <li>Audit Trails</li> <li>Document Management</li> </ul>"},{"location":"product/#integrations","title":"Integrations","text":"<ul> <li>Payment Gateways</li> <li>Email Providers</li> <li>SMS Gateways</li> <li>Accounting Export</li> </ul>"},{"location":"product/#mobile-applications","title":"Mobile Applications","text":"<ul> <li>Resident App</li> <li>Guard App</li> </ul>"},{"location":"product/#settings-configuration","title":"Settings &amp; Configuration","text":"<ul> <li>User &amp; Roles</li> <li>Global Configuration</li> </ul>"},{"location":"product/#overview","title":"\ud83d\udca1 Overview","text":"Module Description Community Handles resident services like polls, notices, and grievances. Gate Management Manages visitor flow, vehicles, and staff access. Financial Management Covers billing, receipts, and income-expense tracking. Payroll Automates salary computation and statutory deductions. Inventory Manages asset lifecycle and stock control. Integrations Connects with SMS, email, and payment providers. Reports Provides analytics and dashboards across modules. <p>\ud83d\udcd8 Next Step: Start with Community Module or explore Financial Management.</p>"},{"location":"product/audit-compliance/","title":"audit-compliance Overview","text":"<p>Auto-generated placeholder index.</p>"},{"location":"product/community/","title":"community Overview","text":"<p>Auto-generated placeholder index.</p>"},{"location":"product/financial-management/introduction/","title":"Accounting Documentation for Apartment Management System","text":"<p>This document outlines the Chart of Accounts, Accounting Entries, and the distinction between Profit and Loss (P&amp;L) and Balance Sheet accounts for an apartment management system.</p>"},{"location":"product/financial-management/introduction/#1-chart-of-accounts","title":"1. Chart of Accounts","text":""},{"location":"product/financial-management/introduction/#asset-accounts","title":"Asset Accounts","text":"<ul> <li>1010 Cash: Tracks cash on hand.</li> <li>1020 Bank Account: Tracks money in the bank.</li> <li>1030 Accounts Receivable: Tracks rent owed by tenants.</li> <li>1040 Prepaid Expenses: Tracks prepaid expenses (e.g., insurance).</li> </ul>"},{"location":"product/financial-management/introduction/#liability-accounts","title":"Liability Accounts","text":"<ul> <li>2010 Accounts Payable: Tracks bills owed to vendors.</li> <li>2020 Security Deposits: Tracks security deposits from tenants.</li> <li>2030 Unearned Rent: Tracks rent received in advance.</li> </ul>"},{"location":"product/financial-management/introduction/#equity-accounts","title":"Equity Accounts","text":"<ul> <li>3010 Owner\u2019s Equity: Tracks the owner\u2019s investment in the business.</li> <li>3020 Retained Earnings: Tracks profits reinvested in the business.</li> </ul>"},{"location":"product/financial-management/introduction/#revenue-accounts","title":"Revenue Accounts","text":"<ul> <li>4010 Rent Income: Tracks rental income from tenants.</li> <li>4020 Late Fees: Tracks late fees charged to tenants.</li> </ul>"},{"location":"product/financial-management/introduction/#expense-accounts","title":"Expense Accounts","text":"<ul> <li>5010 Utilities Expense: Tracks utility bills (e.g., water, electricity).</li> <li>5020 Maintenance Expense: Tracks maintenance costs.</li> <li>5030 Property Taxes: Tracks property taxes.</li> <li>5040 Insurance Expense: Tracks insurance costs.</li> </ul>"},{"location":"product/financial-management/introduction/#2-accounting-entries","title":"2. Accounting Entries","text":""},{"location":"product/financial-management/introduction/#21-when-rent-invoice-is-raised","title":"2.1. When Rent Invoice is Raised","text":"<ul> <li>Debit: Accounts Receivable (Asset increases).</li> <li>Credit: Rent Income (Revenue increases).</li> </ul> <p>Journal Entry: - Debit : Accounts Receivable (1030) -  1,000 - Credit:RentIncome(4010)\u22121,000</p>"},{"location":"product/financial-management/introduction/#22-when-rent-is-paid-by-tenant","title":"2.2. When Rent is Paid by Tenant","text":"<ul> <li>Debit: Cash/Bank Account (Asset increases).</li> <li>Credit: Accounts Receivable (Asset decreases).</li> </ul> <p>Journal Entry: - Debit: Cash (1010) -  1,000 - Credit: AccountsReceivable(1030)\u22121,000</p>"},{"location":"product/financial-management/introduction/#23-when-a-bill-is-raised-eg-maintenance","title":"2.3. When a Bill is Raised (e.g., Maintenance)","text":"<ul> <li>Debit: Maintenance Expense (Expense increases).</li> <li>Credit: Accounts Payable (Liability increases).</li> </ul> <p>Journal Entry: - Debit: Maintenance Expense (5020) - 200 - Credit: AccountsPayable(2010)\u2212200Credit:AccountsPayable(2010)\u2212200</p>"},{"location":"product/financial-management/introduction/#24-when-a-bill-is-paid","title":"2.4. When a Bill is Paid","text":"<ul> <li>Debit: Accounts Payable (Liability decreases).</li> <li>Credit: Cash/Bank Account (Asset decreases).</li> </ul> <p>Journal Entry: - Debit: Accounts Payable (2010) -  200 - Credit: Cash(1010)\u2212200</p>"},{"location":"product/financial-management/introduction/#25-when-security-deposit-is-received","title":"2.5. When Security Deposit is Received","text":"<ul> <li>Debit: Cash/Bank Account (Asset increases).</li> <li>Credit: Security Deposits (Liability increases).</li> </ul> <p>Journal Entry: - Debit: Cash (1010) -  500 - Credit: SecurityDeposits(2020)\u2212500</p>"},{"location":"product/financial-management/introduction/#26-when-security-deposit-is-refunded","title":"2.6. When Security Deposit is Refunded","text":"<ul> <li>Debit: Security Deposits (Liability decreases).</li> <li>Credit: Cash/Bank Account (Asset decreases).</li> </ul> <p>Journal Entry: - Debit: Security Deposits (2020) -  500 - Credit:Cash(1010)\u2212500</p>"},{"location":"product/financial-management/introduction/#3-profit-and-loss-pl-vs-balance-sheet-accounts","title":"3. Profit and Loss (P&amp;L) vs. Balance Sheet Accounts","text":""},{"location":"product/financial-management/introduction/#profit-and-loss-statement-pl-accounts","title":"Profit and Loss Statement (P&amp;L) Accounts","text":"<ul> <li>Revenue Accounts:</li> <li>4010 Rent Income</li> <li>4020 Late Fees</li> <li>Expense Accounts:</li> <li>5010 Utilities Expense</li> <li>5020 Maintenance Expense</li> <li>5030 Property Taxes</li> <li>5040 Insurance Expense</li> </ul>"},{"location":"product/financial-management/introduction/#balance-sheet-accounts","title":"Balance Sheet Accounts","text":"<ul> <li>Asset Accounts:</li> <li>1010 Cash</li> <li>1020 Bank Account</li> <li>1030 Accounts Receivable</li> <li>1040 Prepaid Expenses</li> <li>Liability Accounts:</li> <li>2010 Accounts Payable</li> <li>2020 Security Deposits</li> <li>2030 Unearned Rent</li> <li>Equity Accounts:</li> <li>3010 Owner\u2019s Equity</li> <li>3020 Retained Earnings</li> </ul>"},{"location":"product/financial-management/introduction/#4-example-transactions","title":"4. Example Transactions","text":""},{"location":"product/financial-management/introduction/#transaction-1-rent-invoice-raised","title":"Transaction 1: Rent Invoice Raised","text":"<ul> <li>Tenant A is invoiced $1,000 for rent.</li> <li>Debit: Accounts Receivable (1030) -  1,000 </li> <li>Credit:RentIncome(4010)\u22121,000</li> </ul>"},{"location":"product/financial-management/introduction/#transaction-2-rent-payment-received","title":"Transaction 2: Rent Payment Received","text":"<ul> <li>Tenant A pays the $1,000 rent.</li> <li>Debit: Cash (1010) -  1,000</li> <li>Credit: AccountsReceivable(1030)\u22121,000</li> </ul>"},{"location":"product/financial-management/introduction/#transaction-3-maintenance-bill-received","title":"Transaction 3: Maintenance Bill Received","text":"<ul> <li> <p>A maintenance bill of $200 is received.</p> </li> <li> <p>Debit: Maintenance Expense (5020) -  200</p> </li> <li>Credit: AccountsPayable(2010)\u2212200</li> </ul>"},{"location":"product/financial-management/introduction/#transaction-4-maintenance-bill-paid","title":"Transaction 4: Maintenance Bill Paid","text":"<ul> <li>The $200 maintenance bill is paid.</li> <li>Debit: Accounts Payable (2010) -  200</li> <li>Credit: Cash(1010)\u2212200</li> </ul>"},{"location":"product/financial-management/introduction/#5-visual-representation","title":"5. Visual Representation","text":""},{"location":"product/financial-management/introduction/#profit-and-loss-statement-pl","title":"Profit and Loss Statement (P&amp;L)","text":"<p>Revenue: Rent Income, Late Fees Expenses: Utilities, Maintenance, Taxes, Insurance Net Profit/Loss \u2192 Transferred to Retained Earnings on Balance Sheet</p>"},{"location":"product/financial-management/introduction/#balance-sheet","title":"Balance Sheet","text":"<p>Assets: Cash, Bank, Accounts Receivable, Prepaid Expenses Liabilities: Accounts Payable, Security Deposits, Unearned Rent Equity: Owner\u2019s Equity, Retained Earnings</p>"},{"location":"product/financial-management/introduction/#6-next-steps","title":"6. Next Steps","text":"<ul> <li>Design the database schema to store these accounts.</li> <li>Implement the accounting logic in the C# backend.</li> <li>Create React forms to input and display financial data.</li> </ul>"},{"location":"product/financial-management/invoices/credit_debit_notes/","title":"Customer Credit Note","text":"<p>A customer credit note is issued when a customer is given a credit, reducing the amount they owe.</p> <p>Accounts Affected:</p> <ul> <li>Accounts Receivable (Asset): Decrease (Credit)</li> <li>Account: <code>11200 Accounts Receivable</code></li> <li>Sales Revenue (Revenue): Decrease (Debit)</li> <li>Account: <code>40010 Domestic Sales</code> or <code>40110 Export Sales</code></li> <li>CGST Payable (Liability): Decrease (Debit)</li> <li>Account: <code>23010 SGST Payable</code></li> <li>SGST Payable (Liability): Decrease (Debit)</li> <li>Account: <code>23020 CGST Payable</code></li> <li>IGST Payable (Liability): Decrease (Debit)</li> <li>Account: <code>23030 IGST Payable</code></li> </ul>"},{"location":"product/financial-management/invoices/credit_debit_notes/#customer-debit-note","title":"Customer Debit Note","text":"<p>A customer debit note is issued when a customer is debited, increasing the amount they owe.</p> <p>Accounts Affected:</p> <ul> <li>Accounts Receivable (Asset): Increase (Debit)</li> <li>Account: <code>11200 Accounts Receivable</code></li> <li>Sales Revenue (Revenue): Increase (Credit)</li> <li>Account: <code>40010 Domestic Sales</code> or <code>40110 Export Sales</code></li> <li>CGST Payable (Liability): Increase (Credit)</li> <li>Account: <code>23010 SGST Payable</code></li> <li>SGST Payable (Liability): Increase (Credit)</li> <li>Account: <code>23020 CGST Payable</code></li> <li>IGST Payable (Liability): Increase (Credit)</li> <li>Account: <code>23030 IGST Payable</code></li> </ul>"},{"location":"product/financial-management/invoices/credit_debit_notes/#vendor-credit-note","title":"Vendor Credit Note","text":"<p>A vendor credit note is issued when a vendor is given a credit, reducing the amount you owe to the vendor.</p> <p>Accounts Affected:</p> <ul> <li>Accounts Payable (Liability): Decrease (Debit)</li> <li>Account: <code>21010 Trade Payables</code></li> <li>Purchase Expense (Expense): Decrease (Credit)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>CGST Receivable (Asset): Decrease (Credit)</li> <li>Account: <code>11410 SGST Receivable</code></li> <li>SGST Receivable (Asset): Decrease (Credit)</li> <li>Account: <code>11420 CGST Receivable</code></li> <li>IGST Receivable (Asset): Decrease (Credit)</li> <li>Account: <code>11430 IGST Receivable</code></li> </ul>"},{"location":"product/financial-management/invoices/credit_debit_notes/#vendor-debit-note","title":"Vendor Debit Note","text":"<p>A vendor debit note is issued when a vendor is debited, increasing the amount you owe to the vendor.</p> <p>Accounts Affected:</p> <ul> <li>Accounts Payable (Liability): Increase (Credit)</li> <li>Account: <code>21010 Trade Payables</code></li> <li>Purchase Expense (Expense): Increase (Debit)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>CGST Receivable (Asset): Increase (Debit)</li> <li>Account: <code>11410 SGST Receivable</code></li> <li>SGST Receivable (Asset): Increase (Debit)</li> <li>Account: <code>11420 CGST Receivable</code></li> <li>IGST Receivable (Asset): Increase (Debit)</li> <li>Account: <code>11430 IGST Receivable</code></li> </ul>"},{"location":"product/financial-management/invoices/entries_others/","title":"Other Accounting Transactions and Affected Accounts","text":""},{"location":"product/financial-management/invoices/entries_others/#payroll-transactions","title":"Payroll Transactions","text":"<p>Payroll transactions are recorded when employee salaries and wages are paid.</p> <p>Accounts Affected:</p> <ul> <li>Salaries and Wages (Expense): Increase (Debit)</li> <li>Account: <code>51710 Salaries and Wages</code></li> <li>Payroll Taxes (Expense): Increase (Debit)</li> <li>Account: <code>51810 Payroll Taxes</code></li> <li>Employee Benefits (Expense): Increase (Debit)</li> <li>Account: <code>51910 Employee Benefits</code></li> <li>Cash and Cash Equivalents (Asset): Decrease (Credit)</li> <li>Account: <code>11110 Petty Cash</code> or <code>11120 Bank Accounts</code></li> </ul>"},{"location":"product/financial-management/invoices/entries_others/#loan-disbursement","title":"Loan Disbursement","text":"<p>A loan disbursement is recorded when a company borrows money.</p> <p>Accounts Affected:</p> <ul> <li>Cash and Cash Equivalents (Asset): Increase (Debit)</li> <li>Account: <code>11120 Bank Accounts</code></li> <li>Loans Payable (Liability): Increase (Credit)</li> <li>Account: <code>22010 Short-Term Loans</code> or <code>26010 Long-Term Loans</code></li> </ul>"},{"location":"product/financial-management/invoices/entries_others/#loan-repayment","title":"Loan Repayment","text":"<p>A loan repayment is recorded when a company repays a loan.</p> <p>Accounts Affected:</p> <ul> <li>Loans Payable (Liability): Decrease (Debit)</li> <li>Account: <code>22010 Short-Term Loans</code> or <code>26010 Long-Term Loans</code></li> <li>Cash and Cash Equivalents (Asset): Decrease (Credit)</li> <li>Account: <code>11120 Bank Accounts</code></li> <li>Interest Expense (Expense): Increase (Debit)</li> <li>Account: <code>53010 Interest Expense</code></li> </ul>"},{"location":"product/financial-management/invoices/entries_others/#fixed-asset-purchase","title":"Fixed Asset Purchase","text":"<p>A fixed asset purchase is recorded when the company buys property, plant, or equipment.</p> <p>Accounts Affected:</p> <ul> <li>Property, Plant, and Equipment (Asset): Increase (Debit)</li> <li>Account: <code>12010 Property, Plant, and Equipment</code></li> <li>Cash and Cash Equivalents (Asset): Decrease (Credit)</li> <li>Account: <code>11110 Petty Cash</code> or <code>11120 Bank Accounts</code></li> <li>Accounts Payable (Liability): Increase (Credit, if bought on credit)</li> <li>Account: <code>21010 Trade Payables</code></li> </ul>"},{"location":"product/financial-management/invoices/entries_others/#depreciation","title":"Depreciation","text":"<p>Depreciation is recorded to allocate the cost of fixed assets over their useful lives.</p> <p>Accounts Affected:</p> <ul> <li>Accumulated Depreciation (Contra Asset): Increase (Credit)</li> <li>Account: <code>12010 Property, Plant, and Equipment</code> (or a specific account for accumulated depreciation)</li> <li>Depreciation Expense (Expense): Increase (Debit)</li> <li>Account: <code>51710 Depreciation Expense</code></li> </ul>"},{"location":"product/financial-management/invoices/entries_others/#amortization","title":"Amortization","text":"<p>Amortization is recorded to allocate the cost of intangible assets over their useful lives.</p> <p>Accounts Affected:</p> <ul> <li>Accumulated Amortization (Contra Asset): Increase (Credit)</li> <li>Account: <code>12020 Intangible Assets</code> (or a specific account for accumulated amortization)</li> <li>Amortization Expense (Expense): Increase (Debit)</li> <li>Account: <code>51720 Amortization Expense</code></li> </ul>"},{"location":"product/financial-management/invoices/entries_others/#prepaid-expense-adjustment","title":"Prepaid Expense Adjustment","text":"<p>Adjustments are made to recognize prepaid expenses over time.</p> <p>Accounts Affected:</p> <ul> <li>Prepaid Expenses (Asset): Decrease (Credit)</li> <li>Account: <code>11400 Prepaid Expenses</code></li> <li>Expense Account (Expense): Increase (Debit)</li> <li>Account: <code>51010 Selling Expenses</code>, <code>51110 Marketing Expenses</code>, or other relevant expense accounts</li> </ul>"},{"location":"product/financial-management/invoices/entries_others/#accrued-expense-adjustment","title":"Accrued Expense Adjustment","text":"<p>Adjustments are made to record expenses that have been incurred but not yet paid.</p> <p>Accounts Affected:</p> <ul> <li>Accrued Liabilities (Liability): Increase (Credit)</li> <li>Account: <code>24010 Accrued Liabilities</code></li> <li>Expense Account (Expense): Increase (Debit)</li> <li>Account: <code>51010 Selling Expenses</code>, <code>51110 Marketing Expenses</code>, <code>51210 Administrative Expenses</code>, or other relevant expense accounts</li> </ul>"},{"location":"product/financial-management/invoices/entries_others/#unearned-revenue-adjustment","title":"Unearned Revenue Adjustment","text":"<p>Adjustments are made to recognize revenue from unearned revenue over time.</p> <p>Accounts Affected:</p> <ul> <li>Unearned Revenue (Liability): Decrease (Debit)</li> <li>Account: <code>25010 Unearned Revenue</code></li> <li>Revenue Account (Revenue): Increase (Credit)</li> <li>Account: <code>40010 Domestic Sales</code>, <code>40110 Export Sales</code>, <code>41010 Service Revenue</code>, or other relevant revenue accounts</li> </ul>"},{"location":"product/financial-management/invoices/entries_others/#bad-debt-write-off","title":"Bad Debt Write-off","text":"<p>Bad debts are written off when it is determined that certain receivables will not be collected.</p> <p>Accounts Affected:</p> <ul> <li>Allowance for Doubtful Accounts (Contra Asset): Increase (Credit)</li> <li>Account: <code>11200 Accounts Receivable</code> (or a specific account for allowance)</li> <li>Bad Debt Expense (Expense): Increase (Debit)</li> <li>Account: <code>53110 Other Expenses</code> (or a specific account for bad debt)</li> </ul>"},{"location":"product/financial-management/invoices/entries_others/#intercompany-transactions","title":"Intercompany Transactions","text":"<p>Intercompany transactions are recorded for transfers between different entities within the same organization.</p> <p>Accounts Affected:</p> <ul> <li>Intercompany Receivable (Asset): Increase (Debit)</li> <li>Account: (specific intercompany receivable account)</li> <li>Intercompany Payable (Liability): Increase (Credit)</li> <li>Account: (specific intercompany payable account)</li> </ul>"},{"location":"product/financial-management/invoices/entries_samples/","title":"Accounting Transactions and Affected Accounts","text":""},{"location":"product/financial-management/invoices/entries_samples/#customer-credit-note","title":"Customer Credit Note","text":"<p>A customer credit note is issued when a customer is given a credit, reducing the amount they owe.</p> <p>Accounts Affected:</p> <ul> <li>Accounts Receivable (Asset)</li> <li>Account: <code>11200 Accounts Receivable</code></li> <li>Sales Revenue (Revenue)</li> <li>Account: <code>40010 Domestic Sales</code> or <code>40110 Export Sales</code></li> <li>Tax Payable (Liability)</li> <li>Account: <code>23010 SGST Payable</code></li> <li>Account: <code>23020 CGST Payable</code></li> <li>Account: <code>23030 IGST Payable</code></li> </ul>"},{"location":"product/financial-management/invoices/entries_samples/#customer-debit-note","title":"Customer Debit Note","text":"<p>A customer debit note is issued when a customer is debited, increasing the amount they owe.</p> <p>Accounts Affected:</p> <ul> <li>Accounts Receivable (Asset)</li> <li>Account: <code>11200 Accounts Receivable</code></li> <li>Sales Revenue (Revenue)</li> <li>Account: <code>40010 Domestic Sales</code> or <code>40110 Export Sales</code></li> <li>Tax Payable (Liability)</li> <li>Account: <code>23010 SGST Payable</code></li> <li>Account: <code>23020 CGST Payable</code></li> <li>Account: <code>23030 IGST Payable</code></li> </ul>"},{"location":"product/financial-management/invoices/entries_samples/#vendor-credit-note","title":"Vendor Credit Note","text":"<p>A vendor credit note is issued when a vendor is given a credit, reducing the amount you owe to the vendor.</p> <p>Accounts Affected:</p> <ul> <li>Accounts Payable (Liability)</li> <li>Account: <code>21010 Trade Payables</code></li> <li>Purchase Expense (Expense)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Tax Receivable (Asset)</li> <li>Account: <code>11410 SGST Receivable</code></li> <li>Account: <code>11420 CGST Receivable</code></li> <li>Account: <code>11430 IGST Receivable</code></li> </ul>"},{"location":"product/financial-management/invoices/entries_samples/#vendor-debit-note","title":"Vendor Debit Note","text":"<p>A vendor debit note is issued when a vendor is debited, increasing the amount you owe to the vendor.</p> <p>Accounts Affected:</p> <ul> <li>Accounts Payable (Liability)</li> <li>Account: <code>21010 Trade Payables</code></li> <li>Purchase Expense (Expense)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Tax Receivable (Asset)</li> <li>Account: <code>11410 SGST Receivable</code></li> <li>Account: <code>11420 CGST Receivable</code></li> <li>Account: <code>11430 IGST Receivable</code></li> </ul>"},{"location":"product/financial-management/invoices/entries_samples/#sales-returns","title":"Sales Returns","text":"<p>Sales returns occur when customers return previously sold goods.</p> <p>Accounts Affected:</p> <ul> <li>Sales Revenue (Revenue)</li> <li>Account: <code>40010 Domestic Sales</code> or <code>40110 Export Sales</code></li> <li>Accounts Receivable (Asset)</li> <li>Account: <code>11200 Accounts Receivable</code></li> <li>Inventory (Asset)</li> <li>Account: <code>11300 Inventory</code></li> <li>Cost of Goods Sold (Expense)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Tax Payable (Liability)</li> <li>Account: <code>23010 SGST Payable</code></li> <li>Account: <code>23020 CGST Payable</code></li> <li>Account: <code>23030 IGST Payable</code></li> </ul>"},{"location":"product/financial-management/invoices/entries_samples/#purchase-returns","title":"Purchase Returns","text":"<p>Purchase returns occur when you return goods to a vendor that were previously purchased.</p> <p>Accounts Affected:</p> <ul> <li>Purchase Expense (Expense)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Accounts Payable (Liability)</li> <li>Account: <code>21010 Trade Payables</code></li> <li>Inventory (Asset)</li> <li>Account: <code>11300 Inventory</code></li> <li>Tax Receivable (Asset)</li> <li>Account: <code>11410 SGST Receivable</code></li> <li>Account: <code>11420 CGST Receivable</code></li> <li>Account: <code>11430 IGST Receivable</code></li> </ul>"},{"location":"product/financial-management/invoices/manual_journal/","title":"Manual Journal Entries","text":"<p>Manual journal entries are recorded when adjustments need to be made to the accounts outside of the regular transactions.</p>"},{"location":"product/financial-management/invoices/manual_journal/#adjusting-prepaid-expenses","title":"Adjusting Prepaid Expenses","text":"<p>If an expense needs to be recognized from prepaid expenses.</p> <p>Accounts Affected: - Prepaid Expenses (Asset): Decrease (Credit)   - Account: <code>11400 Prepaid Expenses</code> - Expense Account (Expense): Increase (Debit)   - Account: <code>51010 Selling Expenses</code>, <code>51110 Marketing Expenses</code>, or other relevant expense accounts</p>"},{"location":"product/financial-management/invoices/manual_journal/#recognizing-depreciation","title":"Recognizing Depreciation","text":"<p>If depreciation needs to be recorded for fixed assets.</p> <p>Accounts Affected: - Accumulated Depreciation (Contra Asset): Increase (Credit)   - Account: <code>12010 Property, Plant, and Equipment</code> (or a specific account for accumulated depreciation) - Depreciation Expense (Expense): Increase (Debit)   - Account: <code>51710 Depreciation Expense</code></p>"},{"location":"product/financial-management/invoices/manual_journal/#adjusting-for-bad-debt","title":"Adjusting for Bad Debt","text":"<p>If an allowance for doubtful accounts needs to be made.</p> <p>Accounts Affected: - Bad Debt Expense (Expense): Increase (Debit)   - Account: <code>53110 Other Expenses</code> (or a specific account for bad debt) - Allowance for Doubtful Accounts (Contra Asset): Increase (Credit)   - Account: <code>11200 Accounts Receivable</code> (or a specific account for allowance)</p>"},{"location":"product/financial-management/invoices/manual_journal/#recording-accrued-liabilities","title":"Recording Accrued Liabilities","text":"<p>If liabilities need to be accrued at the end of a period.</p> <p>Accounts Affected: - Accrued Liabilities (Liability): Increase (Credit)   - Account: <code>24010 Accrued Liabilities</code> - Expense Account (Expense): Increase (Debit)   - Account: <code>51010 Selling Expenses</code>, <code>51110 Marketing Expenses</code>, <code>51210 Administrative Expenses</code>, or other relevant expense accounts</p>"},{"location":"product/financial-management/invoices/manual_journal/#recording-unearned-revenue","title":"Recording Unearned Revenue","text":"<p>If unearned revenue needs to be adjusted.</p> <p>Accounts Affected: - Unearned Revenue (Liability): Decrease (Debit)   - Account: <code>25010 Unearned Revenue</code> - Revenue Account (Revenue): Increase (Credit)   - Account: <code>40010 Domestic Sales</code>, <code>40110 Export Sales</code>, <code>41010 Service Revenue</code>, or other relevant revenue accounts</p>"},{"location":"product/financial-management/invoices/manual_journal/#adjusting-for-rounding-differences","title":"Adjusting for Rounding Differences","text":"<p>If rounding differences need to be recorded.</p> <p>Accounts Affected: - Rounding Gain (Revenue): Increase (Credit)   - Account: <code>43220 Rounding Gain</code> - Rounding Loss (Expense): Increase (Debit)   - Account: <code>55020 Rounding Loss</code></p>"},{"location":"product/financial-management/invoices/manual_journal/#intercompany-transfers","title":"Intercompany Transfers","text":"<p>If funds are transferred between different company accounts within the same organization.</p> <p>Accounts Affected: - Intercompany Receivable (Asset): Increase (Debit)   - Account: (specific intercompany receivable account) - Intercompany Payable (Liability): Increase (Credit)   - Account: (specific intercompany payable account)</p>"},{"location":"product/financial-management/invoices/payroll_transactions/","title":"Payroll transactions","text":""},{"location":"product/financial-management/invoices/payroll_transactions/#integrating-into-the-payroll-system","title":"Integrating into the Payroll System","text":""},{"location":"product/financial-management/invoices/payroll_transactions/#payroll-processing-accrued-salaries","title":"Payroll Processing (Accrued Salaries)","text":"<p>Accounts Affected:</p> <ul> <li>Salaries and Wages (Expense): Increase (Debit)</li> <li>Account: <code>51710 Salaries and Wages</code></li> <li>Payroll Taxes (Expense): Increase (Debit)</li> <li>Account: <code>51810 Payroll Taxes</code></li> <li>Employee Benefits (Expense): Increase (Debit)</li> <li>Account: <code>51910 Employee Benefits</code></li> <li>Provident Fund Payable (Liability): Increase (Credit)</li> <li>Account: <code>23040 Provident Fund Payable</code></li> <li>Income Tax Payable (Liability): Increase (Credit)</li> <li>Account: <code>23050 Income Tax Payable</code></li> <li>Salaries Payable (Liability): Increase (Credit)</li> <li>Account: <code>21020 Salaries Payable</code></li> </ul> <p>Example Journal Entry:</p> Date Account Debit Credit Increase/Decrease 2024-07-31 Salaries and Wages (Expense) 10,000.00 Increase (Debit) 2024-07-31 Payroll Taxes (Expense) 1,000.00 Increase (Debit) 2024-07-31 Employee Benefits (Expense) 500.00 Increase (Debit) 2024-07-31 Provident Fund Payable (Liability) 800.00 Increase (Credit) 2024-07-31 Income Tax Payable (Liability) 700.00 Increase (Credit) 2024-07-31 Salaries Payable (Liability) 10,000.00 Increase (Credit)"},{"location":"product/financial-management/invoices/payroll_transactions/#salary-payment","title":"Salary Payment","text":"<p>Accounts Affected:</p> <ul> <li>Salaries Payable (Liability): Decrease (Debit)</li> <li>Account: <code>21020 Salaries Payable</code></li> <li>Cash and Cash Equivalents (Asset): Decrease (Credit)</li> <li>Account: <code>11120 Bank Accounts</code></li> </ul> <p>Example Journal Entry: | Date | Account | Debit | Credit | Increase/Decrease | |------------|--------------------------------|---------|---------|-------------------| | 2024-08-01 | Salaries Payable (Liability) | 10,000.00| | Decrease (Debit) | | 2024-08-01 | Bank Accounts (Asset) | | 10,000.00| Decrease (Credit) |</p> <p>By structuring your payroll system in this way, you ensure that you have a comprehensive and flexible setup that can handle various payroll-related scenarios and provide accurate accounting entries.</p>"},{"location":"product/financial-management/invoices/payroll_transactions/#accounting-entries-for-additional-components","title":"Accounting Entries for Additional Components","text":""},{"location":"product/financial-management/invoices/payroll_transactions/#advance-payment","title":"Advance Payment","text":"<p>Accounts Affected:</p> <ul> <li>Advance to Employees (Asset): Increase (Debit)</li> <li>Account: <code>12050 Advance to Employees</code></li> <li>Cash and Cash Equivalents (Asset): Decrease (Credit)</li> <li>Account: <code>11120 Bank Accounts</code></li> </ul> <p>Example Journal Entry: | Date | Account | Debit | Credit | Increase/Decrease | |------------|--------------------------------|---------|---------|-------------------| | 2024-07-20 | Advance to Employees (Asset) | 2,000.00| | Increase (Debit) | | 2024-07-20 | Bank Accounts (Asset) | | 2,000.00| Decrease (Credit) |</p>"},{"location":"product/financial-management/invoices/payroll_transactions/#loan-disbursement","title":"Loan Disbursement","text":"<p>Accounts Affected:</p> <ul> <li>Employee Loans (Asset): Increase (Debit)</li> <li>Account: <code>12060 Employee Loans</code></li> <li>Cash and Cash Equivalents (Asset): Decrease (Credit)</li> <li>Account: <code>11120 Bank Accounts</code></li> </ul> <p>Example Journal Entry: | Date | Account | Debit | Credit | Increase/Decrease | |------------|--------------------------------|---------|---------|-------------------| | 2024-07-20 | Employee Loans (Asset) | 10,000.00| | Increase (Debit) | | 2024-07-20 | Bank Accounts (Asset) | | 10,000.00| Decrease (Credit) |</p>"},{"location":"product/financial-management/invoices/payroll_transactions/#loan-repayment-deduction","title":"Loan Repayment Deduction","text":"<p>Accounts Affected:</p> <ul> <li>Employee Loans (Asset): Decrease (Credit)</li> <li>Account: <code>12060 Employee Loans</code></li> <li>Cash and Cash Equivalents (Asset): Increase (Debit)</li> <li>Account: <code>11120 Bank Accounts</code></li> </ul> <p>Example Journal Entry: | Date | Account | Debit | Credit | Increase/Decrease | |------------|--------------------------------|---------|---------|-------------------| | 2024-08-01 | Bank Accounts (Asset) | 1,000.00| | Increase (Debit) | | 2024-08-01 | Employee Loans (Asset) | | 1,000.00| Decrease (Credit) |</p>"},{"location":"product/financial-management/invoices/payroll_transactions/#salary-payment-with-advance-deduction","title":"Salary Payment with Advance Deduction","text":"<p>Accounts Affected:</p> <ul> <li>Salaries and Wages (Expense): Increase (Debit)</li> <li>Account: <code>51710 Salaries and Wages</code></li> <li>Advance to Employees (Asset): Decrease (Credit)</li> <li>Account: <code>12050 Advance to Employees</code></li> <li>Salaries Payable (Liability): Increase (Credit)</li> <li>Account: <code>21020 Salaries Payable</code></li> </ul> <p>Example Journal Entry for Payroll Processing: | Date | Account | Debit | Credit | Increase/Decrease | |------------|--------------------------------|---------|---------|-------------------| | 2024-07-31 | Salaries and Wages (Expense) | 10,000.00| | Increase (Debit) | | 2024-07-31 | Advance to Employees (Asset) | | 2,000.00| Decrease (Credit) | | 2024-07-31 | Salaries Payable (Liability) | | 8,000.00| Increase (Credit) |</p> <p>Example Journal Entry for Salary Payment: | Date | Account | Debit | Credit | Increase/Decrease | |------------|--------------------------------|---------|---------|-------------------| | 2024-08-01 | Salaries Payable (Liability) | 8,000.00| | Decrease (Debit) | | 2024-08-01 | Bank Accounts (Asset) | | 8,000.00| Decrease (Credit) |</p>"},{"location":"product/financial-management/invoices/purchase_transactions/","title":"Purchase","text":""},{"location":"product/financial-management/invoices/purchase_transactions/#purchase-transaction","title":"Purchase Transaction","text":"<p>A purchase transaction is recorded when goods or services are bought from a vendor.</p> <p>Accounts Affected:</p> <ul> <li>Purchase Expense (Expense): Increase (Debit)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Accounts Payable (Liability): Increase (Credit)</li> <li>Account: <code>21010 Trade Payables</code></li> <li>Inventory (Asset): Increase (Debit)</li> <li>Account: <code>11300 Inventory</code></li> <li>Tax Receivable (Asset): Increase (Debit)</li> <li>Account: <code>11410 SGST Receivable</code></li> <li>Account: <code>11420 CGST Receivable</code></li> <li>Account: <code>11430 IGST Receivable</code></li> </ul>"},{"location":"product/financial-management/invoices/purchase_transactions/#purchase-return","title":"Purchase Return","text":"<p>Purchase returns occur when you return goods to a vendor that were previously purchased.</p> <p>Accounts Affected:</p> <ul> <li>Purchase Expense (Expense): Decrease (Credit)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Accounts Payable (Liability): Decrease (Debit)</li> <li>Account: <code>21010 Trade Payables</code></li> <li>Inventory (Asset): Decrease (Credit)</li> <li>Account: <code>11300 Inventory</code></li> <li>Tax Receivable (Asset): Decrease (Credit)</li> <li>Account: <code>11410 SGST Receivable</code></li> <li>Account: <code>11420 CGST Receivable</code></li> <li>Account: <code>11430 IGST Receivable</code></li> </ul>"},{"location":"product/financial-management/invoices/purchase_transactions/#purchase-discount","title":"Purchase Discount","text":"<p>Purchase discounts are reductions in the amount owed to vendors, usually offered for early payment.</p> <p>Accounts Affected:</p> <ul> <li>Purchase Expense (Expense): Decrease (Credit)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Accounts Payable (Liability): Decrease (Debit)</li> <li>Account: <code>21010 Trade Payables</code></li> </ul>"},{"location":"product/financial-management/invoices/purchase_transactions/#cash-purchase","title":"Cash Purchase","text":"<p>Cash purchases occur when goods or services are bought, and payment is made immediately in cash.</p> <p>Accounts Affected:</p> <ul> <li>Purchase Expense (Expense): Increase (Debit)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Cash and Cash Equivalents (Asset): Decrease (Credit)</li> <li>Account: <code>11110 Petty Cash</code> or <code>11120 Bank Accounts</code></li> <li>Inventory (Asset): Increase (Debit)</li> <li>Account: <code>11300 Inventory</code></li> <li>Tax Receivable (Asset): Increase (Debit)</li> <li>Account: <code>11410 SGST Receivable</code></li> <li>Account: <code>11420 CGST Receivable</code></li> <li>Account: <code>11430 IGST Receivable</code></li> </ul>"},{"location":"product/financial-management/invoices/purchase_transactions/#credit-purchase","title":"Credit Purchase","text":"<p>Credit purchases occur when goods or services are bought, and payment is made at a later date.</p> <p>Accounts Affected:</p> <ul> <li>Purchase Expense (Expense): Increase (Debit)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Accounts Payable (Liability): Increase (Credit)</li> <li>Account: <code>21010 Trade Payables</code></li> <li>Inventory (Asset): Increase (Debit)</li> <li>Account: <code>11300 Inventory</code></li> <li>Tax Receivable (Asset): Increase (Debit)</li> <li>Account: <code>11410 SGST Receivable</code></li> <li>Account: <code>11420 CGST Receivable</code></li> <li>Account: <code>11430 IGST Receivable</code></li> </ul>"},{"location":"product/financial-management/invoices/purchase_transactions/#process-for-recording-and-paying-bills","title":"Process for Recording and Paying Bills","text":""},{"location":"product/financial-management/invoices/purchase_transactions/#step-1-create-the-bill-in-the-purchase-module","title":"Step 1: Create the Bill in the Purchase Module","text":"<p>Accounts Affected:</p> <ul> <li>Electricity Expense (Expense): Increase (Debit)</li> <li>Account: <code>51510 Electricity Expense</code></li> <li>Trade Payables (Liability): Increase (Credit)</li> <li>Account: <code>21010 Trade Payables</code></li> </ul> <p>Example Journal Entry for Bill Creation:</p> Date Account Debit Credit Increase/Decrease 2024-04-01 Electricity Expense (Expense) 500.00 Increase (Debit) 2024-04-01 Trade Payables (Liability) 500.00 Increase (Credit)"},{"location":"product/financial-management/invoices/purchase_transactions/#step-2-make-the-payment","title":"Step 2: Make the Payment","text":"<p>Accounts Affected:</p> <ul> <li>Trade Payables (Liability): Decrease (Debit)</li> <li>Account: <code>21010 Trade Payables</code></li> <li>Cash and Cash Equivalents (Asset): Decrease (Credit)</li> <li>Account: <code>11120 Bank Accounts</code></li> </ul> <p>Example Journal Entry for Payment: | Date | Account | Debit | Credit | Increase/Decrease | |------------|-----------------------------|---------|---------|-------------------| | 2024-04-10 | Trade Payables (Liability) | 500.00 | | Decrease (Debit) | | 2024-04-10 | Bank Accounts (Asset) | | 500.00 | Decrease (Credit) |</p>"},{"location":"product/financial-management/invoices/purchase_transactions/#explanation-and-best-practices","title":"Explanation and Best Practices","text":"<ol> <li> <p>Categorization:</p> <ul> <li>Liabilities: This is the parent category for all liability accounts.</li> <li>Current Liabilities: Sub-category under Liabilities for short-term obligations.</li> <li>Trade Payables: Specific account under Current Liabilities for payables to vendors and other short-term obligations.</li> </ul> </li> <li> <p>Bill Creation:</p> <ul> <li>Record the bill in the purchase module to increase the respective expense account and the trade payables account.</li> </ul> </li> <li> <p>Payment Processing:</p> <ul> <li>When making a payment, decrease the trade payables account and the cash or bank account.</li> </ul> </li> </ol> <p>By following this structure, you ensure that your accounting records are accurate, consistent, and aligned with standard accounting practices. This approach also provides clear visibility into your financial obligations and helps maintain an audit trail for all transactions.</p>"},{"location":"product/financial-management/invoices/sales_transactions/","title":"Sales","text":""},{"location":"product/financial-management/invoices/sales_transactions/#sales-transaction","title":"Sales Transaction","text":"<p>A sales transaction is recorded when goods or services are sold to a customer.</p> <p>Accounts Affected:</p> <ul> <li>Sales Revenue (Revenue): Increase (Credit)</li> <li>Account: <code>40010 Domestic Sales</code> or <code>40110 Export Sales</code></li> <li>Accounts Receivable (Asset): Increase (Debit)</li> <li>Account: <code>11200 Accounts Receivable</code></li> <li>Inventory (Asset): Decrease (Credit)</li> <li>Account: <code>11300 Inventory</code></li> <li>Cost of Goods Sold (Expense): Increase (Debit)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Tax Payable (Liability): Increase (Credit)</li> <li>Account: <code>23010 SGST Payable</code></li> <li>Account: <code>23020 CGST Payable</code></li> <li>Account: <code>23030 IGST Payable</code></li> </ul>"},{"location":"product/financial-management/invoices/sales_transactions/#sales-return","title":"Sales Return","text":"<p>Sales returns occur when customers return previously sold goods.</p> <p>Accounts Affected:</p> <ul> <li>Sales Revenue (Revenue): Decrease (Debit)</li> <li>Account: <code>40010 Domestic Sales</code> or <code>40110 Export Sales</code></li> <li>Accounts Receivable (Asset): Decrease (Credit)</li> <li>Account: <code>11200 Accounts Receivable</code></li> <li>Inventory (Asset): Increase (Debit)</li> <li>Account: <code>11300 Inventory</code></li> <li>Cost of Goods Sold (Expense): Decrease (Credit)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Tax Payable (Liability): Decrease (Debit)</li> <li>Account: <code>23010 SGST Payable</code></li> <li>Account: <code>23020 CGST Payable</code></li> <li>Account: <code>23030 IGST Payable</code></li> </ul>"},{"location":"product/financial-management/invoices/sales_transactions/#sales-discount","title":"Sales Discount","text":"<p>Sales discounts are reductions in the amount owed by customers, usually offered for early payment.</p> <p>Accounts Affected:</p> <ul> <li>Sales Revenue (Revenue): Decrease (Debit)</li> <li>Account: <code>40010 Domestic Sales</code> or <code>40110 Export Sales</code></li> <li>Accounts Receivable (Asset): Decrease (Credit)</li> <li>Account: <code>11200 Accounts Receivable</code></li> </ul>"},{"location":"product/financial-management/invoices/sales_transactions/#cash-sales","title":"Cash Sales","text":"<p>Cash sales occur when goods or services are sold, and payment is received immediately in cash.</p> <p>Accounts Affected:</p> <ul> <li>Sales Revenue (Revenue): Increase (Credit)</li> <li>Account: <code>40010 Domestic Sales</code> or <code>40110 Export Sales</code></li> <li>Cash and Cash Equivalents (Asset): Increase (Debit)</li> <li>Account: <code>11110 Petty Cash</code> or <code>11120 Bank Accounts</code></li> <li>Inventory (Asset): Decrease (Credit)</li> <li>Account: <code>11300 Inventory</code></li> <li>Cost of Goods Sold (Expense): Increase (Debit)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Tax Payable (Liability): Increase (Credit)</li> <li>Account: <code>23010 SGST Payable</code></li> <li>Account: <code>23020 CGST Payable</code></li> <li>Account: <code>23030 IGST Payable</code></li> </ul>"},{"location":"product/financial-management/invoices/sales_transactions/#credit-sales","title":"Credit Sales","text":"<p>Credit sales occur when goods or services are sold, and payment is received at a later date.</p> <p>Accounts Affected:</p> <ul> <li>Sales Revenue (Revenue): Increase (Credit)</li> <li>Account: <code>40010 Domestic Sales</code> or <code>40110 Export Sales</code></li> <li>Accounts Receivable (Asset): Increase (Debit)</li> <li>Account: <code>11200 Accounts Receivable</code></li> <li>Inventory (Asset): Decrease (Credit)</li> <li>Account: <code>11300 Inventory</code></li> <li>Cost of Goods Sold (Expense): Increase (Debit)</li> <li>Account: <code>50010 Direct Materials</code>, <code>50110 Direct Labor</code>, or other relevant expense accounts</li> <li>Tax Payable (Liability): Increase (Credit)</li> <li>Account: <code>23010 SGST Payable</code></li> <li>Account: <code>23020 CGST Payable</code></li> <li>Account: <code>23030 IGST Payable</code></li> </ul>"},{"location":"product/gate-management/","title":"gate-management Overview","text":"<p>Auto-generated placeholder index.</p>"},{"location":"product/getting-started/","title":"getting-started Overview","text":"<p>Auto-generated placeholder index.</p>"},{"location":"product/getting-started/app-ui-structure/","title":"\ud83d\udcd8 App Structure Documentation","text":""},{"location":"product/getting-started/app-ui-structure/#folder-structure","title":"\ud83d\uddc2\ufe0f Folder Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 routes/                     # Routing structure\n\u2502   \u251c\u2500\u2500 index.tsx              # Root router using createBrowserRouter\n\u2502   \u251c\u2500\u2500 MainRoutes.tsx         # Consolidated module routes\n\u2502   \u251c\u2500\u2500 LoginRoutes.tsx        # Auth routes (login/callback)\n\u2502   \u251c\u2500\u2500 LandingRoutes.tsx      # Public landing pages (about, terms, etc.)\n\u2502   \u2514\u2500\u2500 modules/               # Modular routes split per domain\n\u2502       \u251c\u2500\u2500 community-routes.tsx\n\u2502       \u251c\u2500\u2500 sales-routes.tsx\n\u2502       \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 contexts/                  # Global contexts\n\u2502   \u251c\u2500\u2500 Auth0Context.tsx       # Auth0 provider with SafeAuth0Provider wrapper\n\u2502   \u251c\u2500\u2500 ErrorContext.tsx       # App-level error handling\n\u2502   \u251c\u2500\u2500 ConfigContext.tsx      # Org/Company/FinYear tracking\n\u251c\u2500\u2500 components/                # Shared components\n\u2502   \u251c\u2500\u2500 ErrorBoundary          # Global + auth error boundaries\n\u2502   \u251c\u2500\u2500 Loader.tsx, ScrollTop, Notistack, Snackbar\n\u2502   \u2514\u2500\u2500 logo/ etc.\n\u251c\u2500\u2500 pages/                     # Page screens per feature\n\u2502   \u2514\u2500\u2500 landing.tsx            # Public landing page\n\u251c\u2500\u2500 themes/                    # MUI theme setup\n\u251c\u2500\u2500 hooks/                     # Custom hooks (useAuth, useConfig, useMenuItems)\n\u2514\u2500\u2500 shared/                    # Shared utils &amp; storage helpers\n</code></pre>"},{"location":"product/getting-started/app-ui-structure/#app-wrapping-apptsx-structure","title":"\ud83c\udfd7\ufe0f App Wrapping (App.tsx Structure)","text":"<pre><code>&lt;GlobalErrorBoundary&gt;\n  &lt;ConfigProvider&gt;\n    &lt;ThemeCustomization&gt;\n      &lt;Locales&gt;\n        &lt;ScrollTop&gt;\n          &lt;ErrorProvider&gt;\n            &lt;SafeAuth0Provider&gt;\n              &lt;Notistack&gt;\n                &lt;BackdropProvider&gt;\n                  &lt;RouterProvider router={router} /&gt;\n                  &lt;Snackbar /&gt;\n                &lt;/BackdropProvider&gt;\n              &lt;/Notistack&gt;\n            &lt;/SafeAuth0Provider&gt;\n          &lt;/ErrorProvider&gt;\n        &lt;/ScrollTop&gt;\n      &lt;/Locales&gt;\n    &lt;/ThemeCustomization&gt;\n  &lt;/ConfigProvider&gt;\n&lt;/GlobalErrorBoundary&gt;\n</code></pre> <p>Each provider layer:   - GlobalErrorBoundary: Catch any crash globally.   - ConfigProvider: Manage Organization, Company, Financial Year context.   - ThemeCustomization: Material UI theme setup.   - Locales: Language and RTL support.   - ScrollTop: Scrolls page to top on route changes.   - ErrorProvider: Manage app-wide caught errors.   - SafeAuth0Provider: Wraps Auth0Provider inside AuthErrorBoundary.   - Notistack: Snackbar system for notifications.   - BackdropProvider: Loader/spinner control.   - RouterProvider: React Router DOM routes.</p>"},{"location":"product/getting-started/app-ui-structure/#authentication-permissions","title":"\ud83d\udd10 Authentication &amp; Permissions","text":""},{"location":"product/getting-started/app-ui-structure/#1-login-flow","title":"1. Login Flow","text":"<ul> <li>Wrapped with <code>SafeAuth0Provider</code> \u2192 <code>Auth0Provider</code> internally.</li> <li>On login:</li> <li>Auth0 session is validated.</li> <li>User info + token fetched.</li> <li>Service token stored in <code>localStorage</code>.</li> <li>Org/Company/FinYear are restored from <code>localStorage</code> via <code>applyLastSelectedPreferences()</code>.</li> </ul>"},{"location":"product/getting-started/app-ui-structure/#2-permission-management","title":"2. Permission Management","text":"<ul> <li>Permissions fetched using: <code>fetchUserPermissionsApi(orgId, userId)</code>.</li> <li>Stored in Redux/context + localStorage.</li> <li>Permission refreshes automatically on org change.</li> </ul> <pre><code>useEffect(() =&gt; {\n  if (organization?.organizationId &amp;&amp; state.isLoggedIn) {\n    refreshPermissions();\n  }\n}, [organization?.organizationId]);\n</code></pre>"},{"location":"product/getting-started/app-ui-structure/#3-accessing-permissions","title":"3. Accessing Permissions","text":"<ul> <li><code>useAuth()</code> hook gives access to <code>userPermissions</code>.</li> <li>Used for conditional rendering of menus, routes, or UI elements.</li> <li>Permissions follow RBAC model with dynamic policies.</li> </ul>"},{"location":"product/getting-started/app-ui-structure/#routes-structure","title":"\ud83d\uddc2\ufe0f Routes Structure","text":""},{"location":"product/getting-started/app-ui-structure/#srcroutesindextsx","title":"src/routes/index.tsx","text":"<pre><code>createBrowserRouter([\n  LandingRoutes, // Public landing pages\n  LoginRoutes,   // Login / Callback\n  MainRoutes     // Protected /App Routes\n]);\n</code></pre>"},{"location":"product/getting-started/app-ui-structure/#srcroutesmainroutestsx","title":"src/routes/MainRoutes.tsx","text":"<p>Splits into module-specific routes: <pre><code>{\n  path: '/community',\n  element: &lt;MinimalLayout /&gt;,\n  errorElement: &lt;RouteErrorPage /&gt;, // Per module fallback\n  children: [...]\n}\n{\n  path: '/sales', children: [...]\n}\n{\n  path: '/purchase', children: [...]\n}\n...\n</code></pre></p> <p>\u2705 Each domain (<code>community</code>, <code>sales</code>, etc.) has its own file. \u2705 Every route tree uses an <code>errorElement</code> for route errors.</p>"},{"location":"product/getting-started/app-ui-structure/#auth-permission-lifecycle","title":"\ud83d\udd10 Auth &amp; Permission Lifecycle","text":""},{"location":"product/getting-started/app-ui-structure/#login-flow","title":"Login Flow","text":"<pre><code>- User clicks Login\n- Auth0 popup appears\n- On success:\n    1. Token stored \u2192 localStorage\n    2. User profile fetched\n    3. Restore Last Selected Org/Company/FinYear\n    4. Update ConfigContext\n    5. Fetch Permissions based on organization\n    6. Save Permissions into context + localStorage\n</code></pre>"},{"location":"product/getting-started/app-ui-structure/#core-files","title":"Core Files","text":"<ul> <li><code>contexts/Auth0Context.tsx</code> \u2192 Handles login, token, user, permissions.</li> <li><code>hooks/useAuth.ts</code> \u2192 Custom hook to access auth.</li> <li><code>hooks/useConfig.ts</code> \u2192 Custom hook to access org/company/fin year.</li> </ul>"},{"location":"product/getting-started/app-ui-structure/#menu-generation-and-permissions","title":"\ud83e\udde9 Menu Generation and Permissions","text":""},{"location":"product/getting-started/app-ui-structure/#menu-is-generated-dynamically-via-usemenuitems","title":"Menu is Generated Dynamically via <code>useMenuItems</code>","text":"<pre><code>const menuItems = useMenuItems();\n</code></pre> <p>Internal working: <pre><code>const getMenuItemsImpl = ({ permissions, company, user }) =&gt; {\n  if (!Array.isArray(permissions)) return [];\n  return permissions.map(p =&gt; generateMenuItemFromPermission(p));\n};\n</code></pre> - Menu options are based on permissions. - No hardcoded menu. - Hides features if permission missing.</p> <p>\u2705 Safe fallbacks if permissions are missing.</p>"},{"location":"product/getting-started/app-ui-structure/#example","title":"Example:","text":"<p>If user has <code>Sales.Invoice.View</code>, they see <code>Invoices</code> menu. If not, it won't even render that menu item.</p>"},{"location":"product/getting-started/app-ui-structure/#error-handling-in-the-app","title":"\ud83d\udea8 Error Handling in the App","text":"<ul> <li>GlobalErrorBoundary: Any React error at the App level.</li> <li>AuthErrorBoundary: If Auth0 provider crashes.</li> <li>RouteErrorPage: Per route crash fallback.</li> </ul> <p>Sample Route Usage: <pre><code>{\n  path: '/sales',\n  element: &lt;MinimalLayout /&gt;,\n  errorElement: &lt;RouteErrorPage /&gt;,\n  children: [...]\n}\n</code></pre></p>"},{"location":"product/getting-started/app-ui-structure/#menu-generation","title":"\ud83e\udded Menu Generation","text":""},{"location":"product/getting-started/app-ui-structure/#usemenuitems","title":"<code>useMenuItems()</code>","text":"<ul> <li>Generates dynamic menus based on user permissions + current company/org.</li> <li>Reads from centralized permissions list.</li> <li>Organized in a modular structure, e.g.: <pre><code>const getMenuItemsImpl = ({ permissions, company, user }) =&gt; {\n  if (!Array.isArray(permissions)) return [];\n  return permissions.map(p =&gt; generateMenuItemFromPermission(p));\n};\n</code></pre></li> <li>Resilient to null/undefined using fallback checks.</li> </ul>"},{"location":"product/getting-started/app-ui-structure/#routing","title":"\ud83e\udde9 Routing","text":"<ul> <li>Each domain (community, sales, inventory, payroll, etc.) has its own file under <code>routes/modules/</code></li> <li>Combined in <code>MainRoutes.tsx</code>.</li> <li>Public routes (about, terms) in <code>LandingRoutes.tsx</code></li> <li>Error boundary per route via: <pre><code>{\n  path: '/app',\n  element: &lt;MinimalLayout /&gt;,\n  errorElement: &lt;RouteErrorPage /&gt;, // dynamically catches per route\n  children: [...]\n}\n</code></pre></li> </ul>"},{"location":"product/getting-started/app-ui-structure/#error-boundaries","title":"\ud83d\udea8 Error Boundaries","text":""},{"location":"product/getting-started/app-ui-structure/#1-globalerrorboundary","title":"1. GlobalErrorBoundary","text":"<p>Wraps <code>App.tsx</code> \u2014 catches unexpected React errors.</p>"},{"location":"product/getting-started/app-ui-structure/#2-autherrorboundary","title":"2. AuthErrorBoundary","text":"<p>Handles failures inside the auth layer.</p>"},{"location":"product/getting-started/app-ui-structure/#3-routeerrorpage","title":"3. RouteErrorPage","text":"<p>Used in routing <code>errorElement</code>. Displays fallback UI for route crashes (e.g. failed loaders, permissions map errors).</p>"},{"location":"product/getting-started/app-ui-structure/#full-login-preference-restoration-flow","title":"\ud83d\udd04 Full Login &amp; Preference Restoration Flow","text":"<pre><code>[Login Success]\n  \u2192 Get user via Auth0\n  \u2192 Save token to localStorage\n  \u2192 Fetch org/company/finYear from localStorage or defaults\n  \u2192 Call `applyLastSelectedPreferences`\n      \u21b3 Triggers ConfigContext update\n  \u2192 Fetch permissions\n      \u21b3 Save to context + localStorage\n  \u2192 Render components conditionally based on permissions\n</code></pre>"},{"location":"product/getting-started/app-ui-structure/#key-learnings-best-practices","title":"\ud83e\udde0 Key Learnings / Best Practices","text":"<ul> <li>Modular route files scale better.</li> <li>SafeAuth0Provider with AuthErrorBoundary gives graceful auth fallback.</li> <li>Global error handling ensures better UX under failure.</li> <li>useConfig + localStorage drives organization/company/fin year persistence.</li> <li>Centralized permission fetch avoids redundancy and ensures proper UI visibility.</li> <li>Menu is dynamically derived and not hardcoded.</li> </ul> <p>\u2705 Refactoring completed successfully. \ud83d\udce6 Future Enhancements: - Add lazy loading + suspense fallback per route chunk - Implement role-based menu grouping - Add loader guards while permission fetch is pending</p>"},{"location":"product/getting-started/app-ui-structure/#suggested-diagram","title":"\ud83d\udcca Suggested Diagram","text":""},{"location":"product/getting-started/app-ui-structure/#login-page-auth0-login-flow-save-token-restore-preferences-org-company-fin-year-fetch-permissions-update-auth-context-localstorage-usemenuitems-builds-menu","title":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Login Page \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Auth0 Login Flow \u2502\u2500\u2500\u2500\u2500\u25b6 Save Token     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                               \u2193\n                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                     \u2502 Restore Preferences        \u2502\n                     \u2502 - Org                      \u2502\n                     \u2502 - Company                  \u2502\n                     \u2502 - Fin Year                 \u2502\n                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                \u2193\n                      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                      \u2502 Fetch Permissions    \u2502\n                      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2193\n                      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                      \u2502 Update Auth Context    \u2502\n                      \u2502 + localStorage         \u2502\n                      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2193\n                      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                      \u2502 useMenuItems builds Menu  \u2502\n                      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>","text":""},{"location":"product/getting-started/app-ui-structure/#full-app-lifecycle-diagram","title":"\ud83d\udd04 Full App Lifecycle Diagram","text":"<pre><code>[User Lands]\n  \u2193\n[Auth0 Check Session]\n  \u2193\nIs Logged In? \n |        \nNo        Yes\n |           \u2193\nShow Login   Fetch Token\n               \u2193\n           Fetch User Profile\n               \u2193\n           Restore Org/Company/FinYear\n               \u2193\n           Fetch Permissions\n               \u2193\n           Update Auth Context\n               \u2193\n           Render Menu Items Dynamically\n</code></pre>"},{"location":"product/getting-started/app-ui-structure/#summary","title":"\ud83d\udce6 Summary","text":"<ul> <li>App wrapping is deeply layered but clean.</li> <li>Dynamic routing with modular approach.</li> <li>Permission-driven UI visibility (RBAC).</li> <li>Error boundaries at App, Auth, and Route levels.</li> <li>Use of centralized hooks (<code>useAuth</code>, <code>useConfig</code>, <code>useMenuItems</code>).</li> <li>Minimal hardcoding \u2192 Everything reactive.</li> </ul>"},{"location":"product/getting-started/email-templates/","title":"\ud83d\udce7 Email &amp; Template Service - CrossCuttingConcern Documentation","text":""},{"location":"product/getting-started/email-templates/#overview","title":"Overview","text":"<p>This module provides a centralized and reusable email sending solution using: - <code>EmailService</code> for sending emails via SMTP - <code>EmailTemplateService</code> for managing DB-driven email templates - <code>TemplatedEmailService</code> as a helper that combines both</p> <p>This design keeps the configuration and transport details abstracted from consumers.</p>"},{"location":"product/getting-started/email-templates/#folder-structure","title":"\ud83d\udce6 Folder Structure","text":"<pre><code>CrossCuttingConcern.Email/\n\u251c\u2500\u2500 Abstractions/\n\u2502   \u251c\u2500\u2500 IEmailService.cs\n\u2502   \u2514\u2500\u2500 IEmailTemplateService.cs\n\u2502\n\u251c\u2500\u2500 Entities/\n\u2502   \u251c\u2500\u2500 EmailMessage.cs\n\u2502   \u2514\u2500\u2500 ProcessedEmailTemplate.cs\n\u2502\n\u251c\u2500\u2500 Services/\n\u2502   \u251c\u2500\u2500 EmailService.cs\n\u2502   \u251c\u2500\u2500 EmailTemplateService.cs\n\u2502   \u2514\u2500\u2500 TemplatedEmailService.cs\n\u2502\n\u251c\u2500\u2500 Settings/\n\u2502   \u2514\u2500\u2500 SmtpSettings.cs\n</code></pre>"},{"location":"product/getting-started/email-templates/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"product/getting-started/email-templates/#appsettingsjson","title":"<code>appsettings.json</code>","text":"<pre><code>\"Smtp\": {\n  \"Host\": \"smtp-relay.brevo.com\",\n  \"Port\": 587,\n  \"Username\": \"your-smtp-user\",\n  \"Password\": \"your-smtp-password\",\n  \"FromEmail\": \"support@dhanman.com\"\n}\n</code></pre>"},{"location":"product/getting-started/email-templates/#connection-string","title":"Connection String","text":"<pre><code>\"ConnectionStrings\": {\n  \"TemplateDb\": \"Host=localhost;Port=5432;Database=TemplateDb;Username=postgres;Password=password\"\n}\n</code></pre>"},{"location":"product/getting-started/email-templates/#di-registration","title":"DI Registration","text":"<pre><code>services.Configure&lt;SmtpSettings&gt;(configuration.GetSection(\"Smtp\"));\nservices.AddSingleton&lt;IDateTime, SystemDateTime&gt;();\n\nservices.AddDbContext&lt;TemplateDbContext&gt;(options =&gt;\n    options.UseNpgsql(configuration.GetConnectionString(\"TemplateDb\")));\n\nservices.AddScoped&lt;ITemplateDbContext&gt;(provider =&gt;\n    provider.GetRequiredService&lt;TemplateDbContext&gt;());\n\nservices.AddScoped&lt;IEmailService, EmailService&gt;();\nservices.AddScoped&lt;IEmailTemplateService, EmailTemplateService&gt;();\nservices.AddScoped&lt;TemplatedEmailService&gt;();\n</code></pre>"},{"location":"product/getting-started/email-templates/#emailservice","title":"\u2709\ufe0f EmailService","text":""},{"location":"product/getting-started/email-templates/#usage","title":"Usage","text":"<pre><code>await _emailService.SendEmailAsync(\n    to: \"bharat.mane@gmail.com\",\n    subject: \"Manual Email\",\n    body: \"&lt;p&gt;Hello Bharat&lt;/p&gt;\",\n    isHtml: true);\n</code></pre>"},{"location":"product/getting-started/email-templates/#emailtemplateservice","title":"\ud83e\udde9 EmailTemplateService","text":""},{"location":"product/getting-started/email-templates/#description","title":"Description","text":"<p>Fetches email templates from DB, caches them, and replaces placeholders.</p>"},{"location":"product/getting-started/email-templates/#example-template-in-db","title":"Example Template in DB","text":"<pre><code>Subject: Welcome to Dhanman\nBodyHtml: Hello {{CustomerName}}, click &lt;a href=\"{{LoginUrl}}\"&gt;here&lt;/a&gt; to login.\n</code></pre>"},{"location":"product/getting-started/email-templates/#usage_1","title":"Usage","text":"<pre><code>var placeholders = new Dictionary&lt;string, string&gt;\n{\n    [\"CustomerName\"] = \"Bharat\",\n    [\"LoginUrl\"] = \"https://dhanman.com/login\"\n};\n\nvar template = await _templateService.GetProcessedTemplateAsync(101, placeholders);\n</code></pre>"},{"location":"product/getting-started/email-templates/#templatedemailservice-helper","title":"\ud83e\udd16 TemplatedEmailService (Helper)","text":""},{"location":"product/getting-started/email-templates/#usage_2","title":"Usage","text":"<pre><code>var placeholders = new Dictionary&lt;string, string&gt;\n{\n    [\"CustomerName\"] = order.CustomerName,\n    [\"OrderId\"] = order.Id.ToString()\n};\n\nawait _templatedEmailService.SendAsync(\n    templateId: 102,\n    recipient: order.CustomerEmail,\n    placeholders: placeholders);\n</code></pre> <p>No need to manually deal with template loading or SMTP.</p>"},{"location":"product/getting-started/email-templates/#consumer-example-service-layer","title":"\ud83e\uddea Consumer Example (Service Layer)","text":"<pre><code>public class OrderService\n{\n    private readonly TemplatedEmailService _templatedEmailService;\n\n    public OrderService(TemplatedEmailService templatedEmailService)\n    {\n        _templatedEmailService = templatedEmailService;\n    }\n\n    public async Task SendOrderConfirmation(Order order)\n    {\n        var placeholders = new Dictionary&lt;string, string&gt;\n        {\n            [\"CustomerName\"] = order.CustomerName,\n            [\"OrderId\"] = order.Id.ToString()\n        };\n\n        await _templatedEmailService.SendAsync(102, order.CustomerEmail, placeholders);\n    }\n}\n</code></pre>"},{"location":"product/getting-started/email-templates/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li><code>TemplatedEmailService</code> is a concrete helper, injected directly.</li> <li><code>EmailTemplateService</code> uses <code>TemplateDbContext</code> with scoped lifetime.</li> <li>SMTP settings are injected via <code>IOptions&lt;SmtpSettings&gt;</code>.</li> <li>Placeholders must exactly match what the template expects (e.g. <code>{{CustomerName}}</code>).</li> </ul>"},{"location":"product/getting-started/email-templates/#summary","title":"\u2705 Summary","text":"<p>With this module, any service can send emails via a template-driven system without worrying about HTML formatting or SMTP details.</p> <p>Use <code>TemplatedEmailService</code> to send branded, consistent emails with ease.</p>"},{"location":"product/mobile-app/","title":"mobile-app Overview","text":"<p>Auto-generated placeholder index.</p>"},{"location":"product/payroll/sample_templates/","title":"Sample templates","text":""},{"location":"product/payroll/sample_templates/#template-1-standard-salary-structure-percentage-based","title":"Template 1: Standard Salary Structure (Percentage-Based)","text":"Component Percentage of CTC Description Tax Treatment Basic Salary 40% Core component of the salary. Fully taxable Dearness Allowance (DA) 10% Allowance to counteract the effects of inflation. Fully taxable House Rent Allowance (HRA) 20% Allowance to cover the cost of renting a house. Partially exempt under Section 10(13A) of the Income Tax Act, based on certain conditions Conveyance Allowance 5% Allowance to cover transportation expenses. Tax-exempt up to INR 1,600 per month Special Allowance 10% Flexible component used to balance the salary structure. Fully taxable Leave Travel Allowance (LTA) 5% Allowance to cover travel expenses for employees on leave. Tax-exempt under Section 10(5) of the Income Tax Act, subject to certain conditions Medical Reimbursement 5% Reimbursement for medical expenses. Tax-exempt up to INR 15,000 per annum Professional Tax Fixed Amount Statutory deduction levied by the state government. Amount varies by state. Fully taxable Provident Fund (PF) 12% of Basic Salary Both employer and employee contribute 12% of the basic salary to the Provident Fund. Employee contributions are eligible for tax deduction under Section 80C of the Income Tax Act Gratuity 4.81% of Basic Salary Statutory benefit paid to employees who have completed five years of service. Exempt up to a certain limit under Section 10(10) of the Income Tax Act"},{"location":"product/payroll/sample_templates/#template-2-enhanced-salary-structure-percentage-based","title":"Template 2: Enhanced Salary Structure (Percentage-Based)","text":"Component Percentage of CTC Description Tax Treatment Basic Salary 50% Core component of the salary. Fully taxable Dearness Allowance (DA) 5% Allowance to counteract the effects of inflation. Fully taxable House Rent Allowance (HRA) 20% Allowance to cover the cost of renting a house. Partially exempt under Section 10(13A) of the Income Tax Act, based on certain conditions Conveyance Allowance 4% Allowance to cover transportation expenses. Tax-exempt up to INR 1,600 per month Special Allowance 8% Flexible component used to balance the salary structure. Fully taxable Leave Travel Allowance (LTA) 5% Allowance to cover travel expenses for employees on leave. Tax-exempt under Section 10(5) of the Income Tax Act, subject to certain conditions Medical Reimbursement 3% Reimbursement for medical expenses. Tax-exempt up to INR 15,000 per annum Professional Tax Fixed Amount Statutory deduction levied by the state government. Amount varies by state. Fully taxable Provident Fund (PF) 12% of Basic Salary Both employer and employee contribute 12% of the basic salary to the Provident Fund. Employee contributions are eligible for tax deduction under Section 80C of the Income Tax Act Gratuity 4.81% of Basic Salary Statutory benefit paid to employees who have completed five years of service. Exempt up to a certain limit under Section 10(10) of the Income Tax Act"},{"location":"product/reports-analytics/accounts%20_payable_aging_report/","title":"Accounts Payable Aging Report","text":"<p>This report shows the outstanding amounts owed to vendors and how long they have been outstanding.</p> <pre><code>SELECT \n    v.name AS vendor_name,\n    coa.name AS account_name,\n    je.amount,\n    th.transaction_date + INTERVAL '30 days' AS due_date,  -- Assuming a 30-day payment term\n    CASE \n        WHEN th.transaction_date + INTERVAL '30 days' &lt;= CURRENT_DATE THEN 'Current'\n        WHEN th.transaction_date + INTERVAL '30 days' BETWEEN CURRENT_DATE - INTERVAL '30 days' AND CURRENT_DATE THEN '1-30 Days Past Due'\n        WHEN th.transaction_date + INTERVAL '30 days' BETWEEN CURRENT_DATE - INTERVAL '60 days' AND CURRENT_DATE - INTERVAL '31 days' THEN '31-60 Days Past Due'\n        ELSE 'Over 60 Days Past Due'\n    END AS aging_bucket\nFROM \n    journal_entries je\nJOIN \n    transaction_header th ON je.transaction_id = th.id\nJOIN \n    chart_of_accounts coa ON je.account_id = coa.id\nJOIN \n    vendors v ON th.vendor_id = v.id\nWHERE \n    coa.account_type_id = (SELECT id FROM account_types WHERE name = 'Accounts Payable')\nAND je.is_deleted = false\nORDER BY \n    v.name, th.transaction_date;\n</code></pre>"},{"location":"product/reports-analytics/accounts_receivable_aging_report/","title":"Accounts Receivable Aging Report","text":"<p>This report shows the outstanding amounts owed by customers and how long they have been outstanding.</p> <pre><code>SELECT \n    c.name AS customer_name,\n    coa.name AS account_name,\n    je.amount,\n    th.transaction_date + INTERVAL '30 days' AS due_date,  -- Assuming a 30-day payment term\n    CASE \n        WHEN th.transaction_date + INTERVAL '30 days' &lt;= CURRENT_DATE THEN 'Current'\n        WHEN th.transaction_date + INTERVAL '30 days' BETWEEN CURRENT_DATE - INTERVAL '30 days' AND CURRENT_DATE THEN '1-30 Days Past Due'\n        WHEN th.transaction_date + INTERVAL '30 days' BETWEEN CURRENT_DATE - INTERVAL '60 days' AND CURRENT_DATE - INTERVAL '31 days' THEN '31-60 Days Past Due'\n        ELSE 'Over 60 Days Past Due'\n    END AS aging_bucket\nFROM \n    journal_entries je\nJOIN \n    transaction_header th ON je.transaction_id = th.id\nJOIN \n    chart_of_accounts coa ON je.account_id = coa.id\nJOIN \n    customers c ON th.customer_id = c.id\nWHERE \n    coa.account_type_id = (SELECT id FROM account_types WHERE name = 'Accounts Receivable')\nAND je.is_deleted = false\nORDER BY \n    c.name, th.transaction_date;\n</code></pre>"},{"location":"product/reports-analytics/balance_sheet/","title":"Balance Sheet","text":"<p>The balance sheet shows the financial position of the organization, detailing assets, liabilities, and equity.</p> <pre><code>-- Assets\nSELECT \n    'Assets' AS section,\n    coa.account_number,\n    coa.name,\n    SUM(CASE WHEN je.entry_type = 'D' THEN je.amount ELSE -je.amount END) AS balance\nFROM \n    journal_entries je\nJOIN \n    chart_of_accounts coa ON je.account_id = coa.id\nWHERE \n    coa.account_type_id IN (1, 2)  -- Current Assets and Non-Current Assets\nAND je.is_deleted = false\nGROUP BY \n    coa.account_number, coa.name\nUNION ALL\n-- Liabilities\nSELECT \n    'Liabilities' AS section,\n    coa.account_number,\n    coa.name,\n    SUM(CASE WHEN je.entry_type = 'C' THEN je.amount ELSE -je.amount END) AS balance\nFROM \n    journal_entries je\nJOIN \n    chart_of_accounts coa ON je.account_id = coa.id\nWHERE \n    coa.account_type_id IN (3, 4)  -- Current Liabilities and Non-Current Liabilities\nAND je.is_deleted = false\nGROUP BY \n    coa.account_number, coa.name\nUNION ALL\n-- Equity\nSELECT \n    'Equity' AS section,\n    coa.account_number,\n    coa.name,\n    SUM(CASE WHEN je.entry_type = 'C' THEN je.amount ELSE -je.amount END) AS balance\nFROM \n    journal_entries je\nJOIN \n    chart_of_accounts coa ON je.account_id = coa.id\nWHERE \n    coa.account_type_id IN (5, 6)  -- Various Equity Accounts\nAND je.is_deleted = false\nGROUP BY \n    coa.account_number, coa.name\nORDER BY \n    section, account_number;\n</code></pre>"},{"location":"product/reports-analytics/cash_flow_statement/","title":"Cash Flow Statement","text":"<p>The cash flow statement shows the inflows and outflows of cash.</p> <pre><code>SELECT \n    je.transaction_date,\n    coa.account_number,\n    coa.name,\n    SUM(CASE WHEN je.entry_type = 'D' THEN je.amount ELSE -je.amount END) AS net_cash_flow\nFROM \n    journal_entries je\nJOIN \n    chart_of_accounts coa ON je.account_id = coa.id\nWHERE \n    coa.account_type_id = 1  -- Current Assets, focusing on cash accounts\nAND je.is_deleted = false\nGROUP BY \n    je.transaction_date, coa.account_number, coa.name\nORDER BY \n    je.transaction_date, coa.account_number;\n</code></pre>"},{"location":"product/reports-analytics/ledger_of_customers/","title":"Ledger of Customers","text":"<p>The customer ledger shows transactions related to customer accounts (Accounts Receivable).</p> <pre><code>SELECT \n    th.transaction_date AS transaction_date,\n    c.name AS customer_name,\n    coa.name AS account_name,\n    CASE WHEN je.entry_type = 'D' THEN je.amount ELSE 0 END AS debit,\n    CASE WHEN je.entry_type = 'C' THEN je.amount ELSE 0 END AS credit,\n    SUM(CASE WHEN je.entry_type = 'D' THEN je.amount ELSE -je.amount END) OVER (PARTITION BY c.id ORDER BY th.transaction_date) AS balance\nFROM \n    transaction_header th\nJOIN \n    journal_entries je ON th.id = je.transaction_id\nJOIN \n    chart_of_accounts coa ON je.account_id = coa.id\nJOIN \n    customers c ON th.customer_id = c.id\nWHERE \n    coa.account_type_id = (SELECT id FROM account_types WHERE name = 'Accounts Receivable')\nORDER BY \n    th.transaction_date, c.name;\n</code></pre>"},{"location":"product/reports-analytics/ledger_of_vendors/","title":"Ledger of Vendors","text":"<p>The vendor ledger shows transactions related to vendor accounts (Accounts Payable).</p> <pre><code>SELECT \n    th.transaction_date AS transaction_date,\n    v.name AS vendor_name,\n    coa.name AS account_name,\n    CASE WHEN je.entry_type = 'C' THEN je.amount ELSE 0 END AS credit,\n    CASE WHEN je.entry_type = 'D' THEN je.amount ELSE 0 END AS debit,\n    SUM(CASE WHEN je.entry_type = 'C' THEN je.amount ELSE -je.amount END) OVER (PARTITION BY v.id ORDER BY th.transaction_date) AS balance\nFROM \n    transaction_header th\nJOIN \n    journal_entries je ON th.id = je.transaction_id\nJOIN \n    chart_of_accounts coa ON je.account_id = coa.id\nJOIN \n    vendors v ON th.vendor_id = v.id\nWHERE \n    coa.account_type_id = (SELECT id FROM account_types WHERE name = 'Accounts Payable')\nORDER BY \n    th.transaction_date, v.name;\n</code></pre>"},{"location":"product/reports-analytics/pending_dues_report/","title":"Pending Dues Report","text":"<p>This report shows all the outstanding amounts owed by customers and vendors that are past due.</p> <pre><code>-- Pending Dues from Customers (Accounts Receivable)\nSELECT \n    'Customer' AS type,\n    c.name AS name,\n    coa.name AS account_name,\n    je.amount,\n    th.transaction_date + INTERVAL '30 days' AS due_date,  -- Assuming a 30-day payment term\n    CASE \n        WHEN th.transaction_date + INTERVAL '30 days' &lt;= CURRENT_DATE THEN 'Current'\n        WHEN th.transaction_date + INTERVAL '30 days' BETWEEN CURRENT_DATE - INTERVAL '30 days' AND CURRENT_DATE THEN '1-30 Days Past Due'\n        WHEN th.transaction_date + INTERVAL '30 days' BETWEEN CURRENT_DATE - INTERVAL '60 days' AND CURRENT_DATE - INTERVAL '31 days' THEN '31-60 Days Past Due'\n        ELSE 'Over 60 Days Past Due'\n    END AS aging_bucket\nFROM \n    journal_entries je\nJOIN \n    transaction_header th ON je.transaction_id = th.id\nJOIN \n    chart_of_accounts coa ON je.account_id = coa.id\nJOIN \n    customers c ON th.customer_id = c.id\nWHERE \n    coa.account_type_id = (SELECT id FROM account_types WHERE name = 'Accounts Receivable')\nAND je.is_deleted = false\nAND th.transaction_date + INTERVAL '30 days' &lt;= CURRENT_DATE\nORDER BY \n    name, due_date;\n</code></pre>"},{"location":"product/reports-analytics/profit_and_loss_statement/","title":"Profit and Loss Statement","text":"<p>The profit and loss statement shows the organization\u2019s revenues and expenses over a period.</p> <pre><code>-- Revenue\nSELECT \n    'Revenue' AS section,\n    coa.account_number,\n    coa.name,\n    SUM(CASE WHEN je.entry_type = 'C' THEN je.amount ELSE -je.amount END) AS balance\nFROM \n    journal_entries je\nJOIN \n    chart_of_accounts coa ON je.account_id = coa.id\nWHERE \n    coa.account_type_id IN (7, 8)  -- Revenue Accounts\nAND je.is_deleted = false\nGROUP BY \n    coa.account_number, coa.name\nUNION ALL\n-- Expenses\nSELECT \n    'Expenses' AS section,\n    coa.account_number,\n    coa.name,\n    SUM(CASE WHEN je.entry_type = 'D' THEN je.amount ELSE -je.amount END) AS balance\nFROM \n    journal_entries je\nJOIN \n    chart_of_accounts coa ON je.account_id = coa.id\nWHERE \n    coa.account_type_id IN (9, 10, 11)  -- Expense Accounts\nAND je.is_deleted = false\nGROUP BY \n    coa.account_number, coa.name\nORDER BY \n    section, account_number;\n</code></pre>"},{"location":"product/reports-analytics/trial_balance/","title":"Trial Balance","text":"<p>The trial balance is a summary of all the debits and credits in the ledger.</p> <pre><code>SELECT \n    coa.account_number,\n    coa.name,\n    SUM(CASE WHEN je.entry_type = 'D' THEN je.amount ELSE 0 END) AS total_debits,\n    SUM(CASE WHEN je.entry_type = 'C' THEN je.amount ELSE 0 END) AS total_credits\nFROM \n    journal_entries je\nJOIN \n    chart_of_accounts coa ON je.account_id = coa.id\nWHERE \n    je.is_deleted = false\nGROUP BY \n    coa.account_number, coa.name\nORDER BY \n    coa.account_number;\n</code></pre>"},{"location":"system/","title":"\ud83c\udfd7\ufe0f System Documentation","text":"<p>Technical documentation for the Dhanman ERP system \u2014 covering its architecture, infrastructure, development standards, operations, and security.</p>"},{"location":"system/#sections","title":"\ud83d\udcda Sections","text":""},{"location":"system/#architecture","title":"Architecture","text":"<ul> <li>Overview</li> <li>Diagrams</li> <li>ADRs (Architecture Decision Records)</li> <li>Modules</li> <li>Patterns</li> </ul>"},{"location":"system/#infrastructure","title":"Infrastructure","text":"<ul> <li>Overview</li> <li>Database Setup</li> <li>Messaging (RabbitMQ)</li> <li>Storage (MinIO)</li> <li>Monitoring (Grafana, Loki)</li> </ul>"},{"location":"system/#development","title":"Development","text":"<ul> <li>Getting Started</li> <li>Project Structure</li> <li>Standards &amp; Guidelines</li> <li>Entity Management</li> <li>API Contracts</li> <li>Testing</li> </ul>"},{"location":"system/#operations","title":"Operations","text":"<ul> <li>Deployment Guides</li> <li>Runbooks</li> <li>Monitoring &amp; Dashboards</li> </ul>"},{"location":"system/#security","title":"Security","text":"<ul> <li>Authentication Flow</li> <li>Permissions &amp; Roles</li> <li>Secrets Management</li> <li>Policies</li> </ul>"},{"location":"system/#onboarding","title":"Onboarding","text":"<ul> <li>Developer Onboarding</li> <li>First Contribution</li> </ul>"},{"location":"system/#dhanman-microservices","title":"\ud83e\udde9 Dhanman Microservices","text":"Service Purpose dhanman-common Shared services, authentication, and multitenancy dhanman-myhome Community, gate, water, and events modules dhanman-sales Financial management and invoicing dhanman-purchase Vendor and purchase management dhanman-inventory Asset and inventory tracking dhanman-payroll Employee and payroll management dhanman-app React/TypeScript frontend application <p>\ud83d\udcd8 Next Step: Explore Architecture \u2192 Overview to understand the system\u2019s overall design.</p>"},{"location":"system/architecture/","title":"\ud83c\udfd7\ufe0f System Architecture","text":"<p>This section documents the Dhanman ERP system architecture, key modules, guiding principles, and core design patterns used across all services.</p>"},{"location":"system/architecture/#contents","title":"\ud83d\udcd8 Contents","text":""},{"location":"system/architecture/#overview","title":"Overview","text":"<ul> <li>Architecture Overview \u2014 High-level view of the system design, microservice boundaries, and data flow.</li> <li>Architecture Principles \u2014 Core design principles such as modularity, scalability, and resilience.</li> <li>Design Decisions \u2014 Key architectural decisions, rationale, and trade-offs.</li> <li>Deployment &amp; Scalability \u2014 Infrastructure topology, deployment procedures, and scaling strategies.</li> <li>Security Architecture \u2014 Authentication, authorization, data protection, and security best practices.</li> <li>Scheduling Architecture \u2014 Scheduling.</li> </ul>"},{"location":"system/architecture/#architecture-decision-records-adr","title":"Architecture Decision Records (ADR)","text":"<ul> <li>View ADRs \u2014 Records of significant architectural decisions and rationale.</li> <li>ADR-0001: Use PostgreSQL 18</li> </ul>"},{"location":"system/architecture/#diagrams","title":"Diagrams","text":"<ul> <li>Rendered Architecture Diagrams \u2014 Finalized diagrams for presentations and documentation.</li> <li>Source UML Files \u2014 PlantUML, Mermaid, or draw.io sources for version-controlled diagrams.</li> </ul>"},{"location":"system/architecture/#modules","title":"Modules","text":"<ul> <li>Service-Level Architecture \u2014 Breakdown of modules such as Sales, Purchase, Inventory, Payroll, and Common.</li> </ul>"},{"location":"system/architecture/#patterns","title":"Patterns","text":"<ul> <li>CQRS \u2014 Command Query Responsibility Segregation pattern applied in Dhanman.</li> <li>Domain-Driven Design \u2014 DDD tactical patterns, bounded contexts, and domain modeling.</li> <li>Event Sourcing &amp; Messaging \u2014 RabbitMQ-based event-driven architecture with MassTransit patterns.</li> <li>Communication Patterns \u2014 Synchronous and asynchronous inter-service communication.</li> <li>Scheduled Jobs (Hangfire) \u2014 Background job processing and recurring task scheduling.</li> <li>Resilience &amp; Fault Tolerance \u2014 Circuit breakers, retries, bulkheads, and error handling.</li> </ul>"},{"location":"system/architecture/#architectural-summary","title":"\ud83e\udde0 Architectural Summary","text":"Layer Responsibility Technology Presentation Layer React/TypeScript frontend for end-user interactions. React 18, TypeScript, MUI API Layer .NET 9 microservices exposing RESTful endpoints for domain modules. .NET 9, ASP.NET Core Application Layer CQRS handlers, DTOs, business workflows. MediatR, FluentValidation Domain Layer Rich domain models, aggregates, domain events. Pure C# with DDD patterns Messaging Layer RabbitMQ-based event-driven communication between services. RabbitMQ 3.x Data Layer PostgreSQL 18 databases with schema-per-service and read models. PostgreSQL 18, EF Core Storage Layer MinIO for document and media storage. MinIO (S3-compatible) Job Processing Hangfire for background and scheduled tasks. Hangfire 1.8+ Authentication Auth0 for identity and access management. Auth0 SaaS Monitoring &amp; Logging Grafana + Loki + Promtail for observability and alerting. Grafana Stack"},{"location":"system/architecture/#key-architectural-characteristics","title":"\ud83c\udfaf Key Architectural Characteristics","text":""},{"location":"system/architecture/#microservices-architecture","title":"Microservices Architecture","text":"<ul> <li>6 core services aligned with bounded contexts</li> <li>Independent deployment and scaling per service</li> <li>Database per service for data isolation</li> <li>Event-driven integration via RabbitMQ</li> </ul>"},{"location":"system/architecture/#cqrs-event-sourcing","title":"CQRS &amp; Event Sourcing","text":"<ul> <li>Separate read and write models for optimal performance</li> <li>Domain events published to event bus</li> <li>Event handlers in consuming services</li> <li>Eventual consistency across bounded contexts</li> </ul>"},{"location":"system/architecture/#domain-driven-design","title":"Domain-Driven Design","text":"<ul> <li>Rich domain models with business logic</li> <li>Aggregates as consistency boundaries</li> <li>Value objects for immutable concepts</li> <li>Domain services for cross-aggregate operations</li> </ul>"},{"location":"system/architecture/#resilience-patterns","title":"Resilience Patterns","text":"<ul> <li>Retry policies with exponential backoff</li> <li>Circuit breakers for failing services</li> <li>Bulkheads for resource isolation</li> <li>Timeout policies for bounded waiting</li> <li>Health checks for service monitoring</li> </ul>"},{"location":"system/architecture/#security","title":"Security","text":"<ul> <li>Auth0 for authentication with JWT tokens</li> <li>Role-based access control (RBAC) with permissions</li> <li>Multi-tenancy with data isolation</li> <li>Encryption at rest and in transit</li> <li>Audit logging for compliance</li> </ul>"},{"location":"system/architecture/#data-flow-example-invoice-creation","title":"\ud83d\udd04 Data Flow Example: Invoice Creation","text":"<pre><code>1. User submits invoice (Frontend)\n   \u2193\n2. Sales API validates and creates invoice\n   \u2193\n3. Invoice saved to PostgreSQL (Sales DB)\n   \u2193\n4. InvoiceCreatedEvent published to RabbitMQ\n   \u2193\n   \u251c\u2500\u25b6 5a. Common Service: Updates ledger entries\n   \u251c\u2500\u25b6 5b. Notification Service: Sends email to customer\n   \u2514\u2500\u25b6 5c. Analytics Service: Updates dashboard metrics\n   \u2193\n6. Hangfire schedules payment reminder (delayed job)\n</code></pre>"},{"location":"system/architecture/#design-principles","title":"\ud83d\udcd0 Design Principles","text":"<ol> <li>Business Domain First: Architecture driven by business capabilities</li> <li>Evolutionary Design: Support incremental changes and technological evolution</li> <li>Cloud-Native: Designed for containerized deployment and horizontal scalability</li> <li>Developer Experience: Balance architectural rigor with developer productivity</li> <li>Operational Excellence: Build observability and reliability into the architecture</li> <li>Security by Design: Security considerations at every layer</li> <li>Fail Fast, Recover Quickly: Resilience patterns for fault tolerance</li> </ol>"},{"location":"system/architecture/#technology-stack","title":"\ud83d\ude80 Technology Stack","text":""},{"location":"system/architecture/#backend","title":"Backend","text":"<ul> <li>.NET 9 (C#) - High-performance, cross-platform</li> <li>ASP.NET Core - Web API framework</li> <li>Entity Framework Core - ORM with PostgreSQL provider</li> <li>MediatR - CQRS implementation</li> <li>FluentValidation - Input validation</li> </ul>"},{"location":"system/architecture/#frontend","title":"Frontend","text":"<ul> <li>React 18 - UI library</li> <li>TypeScript - Type-safe JavaScript</li> <li>Material-UI (MUI) - Component library</li> <li>React Query - Data fetching and caching</li> </ul>"},{"location":"system/architecture/#infrastructure","title":"Infrastructure","text":"<ul> <li>PostgreSQL 18 - Primary database</li> <li>RabbitMQ 3.x - Message broker</li> <li>MinIO - Object storage (S3-compatible)</li> <li>Hangfire - Background job processing</li> <li>Redis - Distributed caching (planned)</li> </ul>"},{"location":"system/architecture/#observability","title":"Observability","text":"<ul> <li>Grafana - Dashboards and visualization</li> <li>Loki - Log aggregation</li> <li>Promtail - Log shipping</li> <li>Netdata - System metrics</li> <li>Uptime Kuma - Uptime monitoring</li> </ul>"},{"location":"system/architecture/#devops","title":"DevOps","text":"<ul> <li>GitHub Actions - CI/CD pipelines</li> <li>Ansible - Infrastructure automation</li> <li>NGINX - Reverse proxy and load balancer</li> <li>Docker - Containerization (for infrastructure services)</li> <li>Let's Encrypt - SSL/TLS certificates</li> </ul>"},{"location":"system/architecture/#further-reading","title":"\ud83d\udcda Further Reading","text":""},{"location":"system/architecture/#getting-started","title":"Getting Started","text":"<ol> <li>Architecture Overview - Understand the big picture</li> <li>Design Decisions - Learn why we made these choices</li> <li>CQRS Pattern - Understand our command/query separation</li> <li>Communication Patterns - How services talk to each other</li> </ol>"},{"location":"system/architecture/#deep-dives","title":"Deep Dives","text":"<ul> <li>Domain-Driven Design - Rich domain modeling</li> <li>Resilience Patterns - Building fault-tolerant systems</li> <li>Security Architecture - Protecting data and users</li> <li>Deployment &amp; Scalability - Operations and scaling</li> </ul>"},{"location":"system/architecture/#implementation-guides","title":"Implementation Guides","text":"<ul> <li>Scheduled Jobs - Background task processing</li> <li>Event Sourcing - Event-driven integration</li> <li>ADRs - Decision records and rationale</li> </ul> <p>\ud83d\udcd8 Next Step: Start with the Architecture Overview or check Diagrams \u2192 Source for detailed flow visualizations.</p>"},{"location":"system/architecture/deployment-scalability/","title":"Deployment Architecture and Scalability","text":""},{"location":"system/architecture/deployment-scalability/#overview","title":"Overview","text":"<p>This document describes Dhanman's deployment architecture, infrastructure topology, scalability strategies, and operational procedures for managing the system across different environments.</p>"},{"location":"system/architecture/deployment-scalability/#environment-overview","title":"Environment Overview","text":""},{"location":"system/architecture/deployment-scalability/#current-deployment-topology","title":"Current Deployment Topology","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         PRODUCTION                                \u2502\n\u2502                    OVH VPS Singapore                              \u2502\n\u2502                    51.79.156.217                                  \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502\n\u2502  \u2502   NGINX     \u2502  \u2502  Microservices \u2502 \u2502  PostgreSQL  \u2502            \u2502\n\u2502  \u2502   Reverse   \u2502\u2500\u25b6\u2502  (6 services)  \u2502\u2500\u2502      18      \u2502            \u2502\n\u2502  \u2502   Proxy     \u2502  \u2502  Ports: 5001-  \u2502 \u2502              \u2502            \u2502\n\u2502  \u2502   :80, :443 \u2502  \u2502        5006    \u2502 \u2502              \u2502            \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502\n\u2502  \u2502   RabbitMQ  \u2502  \u2502    MinIO    \u2502  \u2502   Grafana    \u2502            \u2502\n\u2502  \u2502   :5672     \u2502  \u2502    :9000    \u2502  \u2502   + Loki     \u2502            \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                               \u2502\n\u2502  \u2502   Hangfire  \u2502  \u2502   Netdata   \u2502                               \u2502\n\u2502  \u2502  Dashboard  \u2502  \u2502   Metrics   \u2502                               \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                             QA                                    \u2502\n\u2502                    OVH VPS France                                 \u2502\n\u2502                    54.37.159.71                                   \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502\n\u2502  \u2502   NGINX     \u2502  \u2502  Microservices \u2502 \u2502  PostgreSQL  \u2502            \u2502\n\u2502  \u2502   Reverse   \u2502\u2500\u25b6\u2502  (6 services)  \u2502\u2500\u2502      18      \u2502            \u2502\n\u2502  \u2502   Proxy     \u2502  \u2502  Ports: 5101-  \u2502 \u2502              \u2502            \u2502\n\u2502  \u2502   :80, :443 \u2502  \u2502        5106    \u2502 \u2502              \u2502            \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                               \u2502\n\u2502  \u2502   RabbitMQ  \u2502  \u2502    MinIO    \u2502                               \u2502\n\u2502  \u2502   :5672     \u2502  \u2502    :9000    \u2502                               \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                       EXTERNAL SERVICES                           \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502\n\u2502  \u2502    Auth0    \u2502  \u2502    Brevo    \u2502  \u2502   Backblaze  \u2502            \u2502\n\u2502  \u2502     SaaS    \u2502  \u2502    SMTP     \u2502  \u2502   B2 Backup  \u2502            \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#service-deployment","title":"Service Deployment","text":""},{"location":"system/architecture/deployment-scalability/#port-allocation","title":"Port Allocation","text":"Service Production Port QA Port Domain dhanman-common 5001 5101 <code>common.dhanman.com</code> / <code>qa.common.dhanman.com</code> dhanman-community 5002 5102 <code>community.dhanman.com</code> / <code>qa.community.dhanman.com</code> dhanman-inventory 5003 5103 <code>inventory.dhanman.com</code> / <code>qa.inventory.dhanman.com</code> dhanman-payroll 5004 5104 <code>payroll.dhanman.com</code> / <code>qa.payroll.dhanman.com</code> dhanman-purchase 5005 5105 <code>purchase.dhanman.com</code> / <code>qa.purchase.dhanman.com</code> dhanman-sales 5006 5106 <code>sales.dhanman.com</code> / <code>qa.sales.dhanman.com</code>"},{"location":"system/architecture/deployment-scalability/#service-configuration","title":"Service Configuration","text":"<p>Each service runs as a systemd service with the following structure:</p> <p>Systemd Service File (<code>/etc/systemd/system/dhanman-{service}-{env}.service</code>):</p> <pre><code>[Unit]\nDescription=Dhanman {Service} - {Environment}\nAfter=network.target postgresql.service rabbitmq-server.service\n\n[Service]\nWorkingDirectory=/var/www/{env}/dhanman-{service}\nExecStart=/usr/bin/dotnet /var/www/{env}/dhanman-{service}/Dhanman.{Service}.dll --urls \"http://localhost:{port}\"\nRestart=always\nRestartSec=10\nKillSignal=SIGINT\nSyslogIdentifier=dhanman-{service}-{env}\nUser=www-data\nGroup=www-data\n\n# Environment variables\nEnvironment=ASPNETCORE_ENVIRONMENT={Environment}\nEnvironment=DOTNET_PRINT_TELEMETRY_MESSAGE=false\n\n# Logging\nStandardOutput=append:/var/log/dhanman/{env}/{service}.log\nStandardError=append:/var/log/dhanman/{env}/{service}.error.log\n\n# Resource limits\nLimitNOFILE=65536\nMemoryMax=2G\nCPUQuota=200%\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#folder-structure-on-server","title":"Folder Structure on Server","text":"<pre><code>/var/www/\n\u251c\u2500\u2500 prod/\n\u2502   \u251c\u2500\u2500 dhanman-common/\n\u2502   \u2502   \u251c\u2500\u2500 Dhanman.Common.dll\n\u2502   \u2502   \u251c\u2500\u2500 appsettings.json\n\u2502   \u2502   \u251c\u2500\u2500 appsettings.Production.json\n\u2502   \u2502   \u2514\u2500\u2500 logs/\n\u2502   \u251c\u2500\u2500 dhanman-sales/\n\u2502   \u251c\u2500\u2500 dhanman-purchase/\n\u2502   \u251c\u2500\u2500 dhanman-payroll/\n\u2502   \u251c\u2500\u2500 dhanman-community/\n\u2502   \u2514\u2500\u2500 dhanman-inventory/\n\u251c\u2500\u2500 qa/\n\u2502   \u251c\u2500\u2500 dhanman-common/\n\u2502   \u251c\u2500\u2500 ... (same structure)\n\u2514\u2500\u2500 frontend/\n    \u251c\u2500\u2500 prod/\n    \u2502   \u2514\u2500\u2500 build/ (React static files)\n    \u2514\u2500\u2500 qa/\n        \u2514\u2500\u2500 build/\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#nginx-configuration","title":"NGINX Configuration","text":""},{"location":"system/architecture/deployment-scalability/#reverse-proxy-setup","title":"Reverse Proxy Setup","text":"<p>Main Configuration (<code>/etc/nginx/sites-available/dhanman-prod</code>):</p> <pre><code># Upstream definitions for production services\nupstream dhanman-common-prod {\n    server localhost:5001;\n    keepalive 32;\n}\n\nupstream dhanman-sales-prod {\n    server localhost:5006;\n    keepalive 32;\n}\n\n# SSL Configuration\nserver {\n    listen 443 ssl http2;\n    server_name common.dhanman.com;\n\n    ssl_certificate /etc/letsencrypt/live/common.dhanman.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/common.dhanman.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers on;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n\n    # Logging\n    access_log /var/log/nginx/dhanman-common-prod-access.log;\n    error_log /var/log/nginx/dhanman-common-prod-error.log;\n\n    # Proxy settings\n    location / {\n        proxy_pass http://dhanman-common-prod;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection keep-alive;\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n\n        # Buffer settings\n        proxy_buffering on;\n        proxy_buffer_size 4k;\n        proxy_buffers 8 4k;\n        proxy_busy_buffers_size 8k;\n    }\n\n    # Health check endpoint (no auth)\n    location /health {\n        proxy_pass http://dhanman-common-prod;\n        access_log off;\n    }\n\n    # Hangfire dashboard (restricted)\n    location /hangfire {\n        proxy_pass http://dhanman-common-prod;\n        # Add authentication if needed\n        # auth_basic \"Hangfire Dashboard\";\n        # auth_basic_user_file /etc/nginx/.htpasswd;\n    }\n}\n\n# Redirect HTTP to HTTPS\nserver {\n    listen 80;\n    server_name common.dhanman.com;\n    return 301 https://$server_name$request_uri;\n}\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#frontend-spa-configuration","title":"Frontend (SPA) Configuration","text":"<pre><code>server {\n    listen 443 ssl http2;\n    server_name app.dhanman.com;\n\n    ssl_certificate /etc/letsencrypt/live/app.dhanman.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/app.dhanman.com/privkey.pem;\n\n    root /var/www/frontend/prod/build;\n    index index.html;\n\n    # Caching for static assets\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    # SPA fallback (all routes to index.html)\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_types text/plain text/css text/xml text/javascript \n               application/x-javascript application/xml+rss \n               application/javascript application/json;\n}\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#database-configuration","title":"Database Configuration","text":""},{"location":"system/architecture/deployment-scalability/#postgresql-setup","title":"PostgreSQL Setup","text":"<p>Server Configuration (<code>/etc/postgresql/18/main/postgresql.conf</code>):</p> <pre><code># Connection settings\nmax_connections = 200\nshared_buffers = 4GB\neffective_cache_size = 12GB\nmaintenance_work_mem = 1GB\nwork_mem = 16MB\n\n# WAL settings\nwal_level = replica\nmax_wal_size = 4GB\nmin_wal_size = 1GB\ncheckpoint_completion_target = 0.9\n\n# Query tuning\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\n\n# Logging\nlogging_collector = on\nlog_directory = '/var/log/postgresql'\nlog_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'\nlog_rotation_age = 1d\nlog_rotation_size = 100MB\nlog_min_duration_statement = 1000  # Log queries &gt; 1s\n\n# Autovacuum\nautovacuum = on\nautovacuum_max_workers = 4\nautovacuum_naptime = 30s\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#database-per-service","title":"Database Per Service","text":"<p>Each microservice has its own database:</p> <pre><code>-- Production databases\nCREATE DATABASE \"prod-dhanman-common\" OWNER dhanman_user;\nCREATE DATABASE \"prod-dhanman-sales\" OWNER dhanman_user;\nCREATE DATABASE \"prod-dhanman-purchase\" OWNER dhanman_user;\nCREATE DATABASE \"prod-dhanman-payroll\" OWNER dhanman_user;\nCREATE DATABASE \"prod-dhanman-community\" OWNER dhanman_user;\nCREATE DATABASE \"prod-dhanman-inventory\" OWNER dhanman_user;\n\n-- QA databases (similar structure)\nCREATE DATABASE \"qa-dhanman-common\" OWNER dhanman_user;\n-- ... etc\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#connection-pooling","title":"Connection Pooling","text":"<p>Application Configuration (<code>appsettings.Production.json</code>):</p> <pre><code>{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Host=localhost;Port=5432;Database=prod-dhanman-sales;Username=dhanman_user;Password=***;Maximum Pool Size=100;Minimum Pool Size=10;Connection Idle Lifetime=300;Connection Pruning Interval=10\"\n  }\n}\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#cicd-pipeline","title":"CI/CD Pipeline","text":""},{"location":"system/architecture/deployment-scalability/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>Production Deployment (<code>.github/workflows/deploy-prod.yml</code>):</p> <pre><code>name: Deploy to Production\n\non:\n  workflow_dispatch:  # Manual trigger for production\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  build-and-deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Setup .NET\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: '9.0.x'\n\n      - name: Restore dependencies\n        run: dotnet restore\n\n      - name: Build\n        run: dotnet build --configuration Release --no-restore\n\n      - name: Run tests\n        run: dotnet test --no-build --verbosity normal\n\n      - name: Publish\n        run: dotnet publish -c Release -o ./publish\n\n      - name: Deploy to Production\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.PROD_HOST }}\n          username: ${{ secrets.PROD_USER }}\n          key: ${{ secrets.PROD_SSH_KEY }}\n          script: |\n            # Stop service\n            sudo systemctl stop dhanman-sales-prod\n\n            # Backup current version\n            cd /var/www/prod\n            sudo cp -r dhanman-sales dhanman-sales.backup.$(date +%Y%m%d_%H%M%S)\n\n            # Deploy new version\n            sudo rm -rf dhanman-sales/*\n\n            # Copy files (handled by rsync in separate step)\n\n            # Update configuration\n            cd dhanman-sales\n            sudo cp appsettings.Production.json.template appsettings.Production.json\n\n            # Set permissions\n            sudo chown -R www-data:www-data /var/www/prod/dhanman-sales\n\n            # Start service\n            sudo systemctl start dhanman-sales-prod\n            sudo systemctl status dhanman-sales-prod\n\n            # Health check\n            sleep 10\n            curl -f http://localhost:5006/health || exit 1\n\n            echo \"Deployment successful!\"\n\n      - name: Sync files via rsync\n        run: |\n          rsync -avz --delete ./publish/ ${{ secrets.PROD_USER }}@${{ secrets.PROD_HOST }}:/var/www/prod/dhanman-sales/\n\n      - name: Notify deployment\n        if: always()\n        uses: 8398a7/action-slack@v3\n        with:\n          status: ${{ job.status }}\n          text: 'Production deployment ${{ job.status }}'\n          webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#qa-auto-deployment","title":"QA Auto-Deployment","text":"<pre><code>name: Deploy to QA\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy-qa:\n    runs-on: ubuntu-latest\n\n    steps:\n      # Similar steps as production\n      # but automatically deploys on merge to main\n      # and targets QA server (54.37.159.71)\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#scalability-strategies","title":"Scalability Strategies","text":""},{"location":"system/architecture/deployment-scalability/#vertical-scaling-current","title":"Vertical Scaling (Current)","text":"<p>Current Server Specs: - CPU: 8 vCores - RAM: 16 GB - Storage: 400 GB SSD - Network: 1 Gbps</p> <p>Upgrade Path: - Step 1: 16 vCores, 32 GB RAM - Step 2: 24 vCores, 64 GB RAM - Step 3: Consider horizontal scaling</p>"},{"location":"system/architecture/deployment-scalability/#horizontal-scaling-future","title":"Horizontal Scaling (Future)","text":""},{"location":"system/architecture/deployment-scalability/#load-balancing-architecture","title":"Load Balancing Architecture","text":"<pre><code>                  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                  \u2502   NGINX      \u2502\n                  \u2502 Load Balancer\u2502\n                  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502                \u2502                \u2502\n    \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510\n    \u2502 Sales-1 \u2502     \u2502 Sales-2  \u2502     \u2502 Sales-3 \u2502\n    \u2502 (5006)  \u2502     \u2502 (5007)   \u2502     \u2502 (5008)  \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>NGINX Load Balancing Config:</p> <pre><code>upstream dhanman-sales-cluster {\n    least_conn;  # Load balancing method\n\n    server sales-server-1:5006 weight=1 max_fails=3 fail_timeout=30s;\n    server sales-server-2:5006 weight=1 max_fails=3 fail_timeout=30s;\n    server sales-server-3:5006 weight=1 max_fails=3 fail_timeout=30s;\n\n    keepalive 32;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name sales.dhanman.com;\n\n    location / {\n        proxy_pass http://dhanman-sales-cluster;\n        # ... other proxy settings\n    }\n}\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#database-scaling","title":"Database Scaling","text":"<p>Read Replicas:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Primary (RW)   \u2502\n\u2502  PostgreSQL     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u2502 Replication\n         \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502         \u2502        \u2502\n\u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510\n\u2502Replica\u2502 \u2502Replica\u2502 \u2502Replica\u2502\n\u2502 (RO)  \u2502 \u2502 (RO)  \u2502 \u2502 (RO)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Connection String Strategy:</p> <pre><code>{\n  \"ConnectionStrings\": {\n    \"WriteConnection\": \"Host=primary.db;Database=prod-dhanman-sales;...\",\n    \"ReadConnection\": \"Host=replica1.db,replica2.db,replica3.db;Database=prod-dhanman-sales;Target Session Attributes=any;Load Balance Hosts=true;...\"\n  }\n}\n</code></pre> <p>EF Core Configuration:</p> <pre><code>services.AddDbContext&lt;SalesDbContext&gt;(options =&gt;\n{\n    var connectionType = httpContext.Request.Method == \"GET\" ? \"Read\" : \"Write\";\n    var connectionString = configuration.GetConnectionString($\"{connectionType}Connection\");\n    options.UseNpgsql(connectionString);\n});\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#caching-layer-planned","title":"Caching Layer (Planned)","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Redis Cluster               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 Master  \u2502 \u2502 Master  \u2502 \u2502 Master  \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502       \u2502           \u2502           \u2502      \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 Replica \u2502 \u2502 Replica \u2502 \u2502 Replica \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Usage:</p> <pre><code>public class CachedCustomerRepository : ICustomerRepository\n{\n    private readonly IDistributedCache _cache;\n    private readonly CustomerRepository _repository;\n\n    public async Task&lt;Customer?&gt; GetByIdAsync(Guid id)\n    {\n        var cacheKey = $\"customer:{id}\";\n        var cached = await _cache.GetStringAsync(cacheKey);\n\n        if (cached != null)\n            return JsonSerializer.Deserialize&lt;Customer&gt;(cached);\n\n        var customer = await _repository.GetByIdAsync(id);\n\n        if (customer != null)\n        {\n            await _cache.SetStringAsync(\n                cacheKey,\n                JsonSerializer.Serialize(customer),\n                new DistributedCacheEntryOptions\n                {\n                    AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(15)\n                }\n            );\n        }\n\n        return customer;\n    }\n}\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#monitoring-and-health-checks","title":"Monitoring and Health Checks","text":""},{"location":"system/architecture/deployment-scalability/#application-health-endpoints","title":"Application Health Endpoints","text":"<p>Each service exposes: - <code>/health</code> - Basic liveness check - <code>/health/ready</code> - Readiness check (DB, RabbitMQ, dependencies) - <code>/health/startup</code> - Startup check</p>"},{"location":"system/architecture/deployment-scalability/#uptime-monitoring","title":"Uptime Monitoring","text":"<p>Uptime Kuma Configuration: - Check interval: 60 seconds - Timeout: 10 seconds - Retry: 3 times - Notifications: Slack, Email</p>"},{"location":"system/architecture/deployment-scalability/#performance-metrics","title":"Performance Metrics","text":"<p>Grafana Dashboards: 1. System Metrics    - CPU usage per service    - Memory usage    - Disk I/O    - Network throughput</p> <ol> <li>Application Metrics</li> <li>Request rate</li> <li>Response time (p50, p95, p99)</li> <li>Error rate</li> <li> <p>Active connections</p> </li> <li> <p>Database Metrics</p> </li> <li>Query performance</li> <li>Connection pool usage</li> <li>Cache hit ratio</li> <li> <p>Lock waits</p> </li> <li> <p>Message Queue Metrics</p> </li> <li>Message rate</li> <li>Queue depth</li> <li>Consumer lag</li> <li>Dead-letter queue size</li> </ol>"},{"location":"system/architecture/deployment-scalability/#backup-and-disaster-recovery","title":"Backup and Disaster Recovery","text":""},{"location":"system/architecture/deployment-scalability/#database-backups","title":"Database Backups","text":"<p>Automated Backup Script (<code>/usr/local/bin/backup-dhanman-db.sh</code>):</p> <pre><code>#!/bin/bash\n\nBACKUP_DIR=\"/backups/postgresql\"\nDATE=$(date +%Y%m%d_%H%M%S)\nRETENTION_DAYS=30\n\n# Backup each database\nfor db in prod-dhanman-common prod-dhanman-sales prod-dhanman-purchase \\\n          prod-dhanman-payroll prod-dhanman-community prod-dhanman-inventory; do\n\n    echo \"Backing up $db...\"\n    pg_dump -U dhanman_user -F c -b -v -f \\\n        \"$BACKUP_DIR/${db}_${DATE}.backup\" $db\n\n    # Compress\n    gzip \"$BACKUP_DIR/${db}_${DATE}.backup\"\n\n    # Upload to Backblaze B2\n    b2 upload-file dhanman-backups \\\n        \"$BACKUP_DIR/${db}_${DATE}.backup.gz\" \\\n        \"postgresql/${db}_${DATE}.backup.gz\"\ndone\n\n# Clean old backups\nfind $BACKUP_DIR -name \"*.backup.gz\" -mtime +$RETENTION_DAYS -delete\n\necho \"Backup completed\"\n</code></pre> <p>Cron Schedule: <pre><code># Daily backup at 2 AM\n0 2 * * * /usr/local/bin/backup-dhanman-db.sh &gt;&gt; /var/log/backup.log 2&gt;&amp;1\n</code></pre></p>"},{"location":"system/architecture/deployment-scalability/#recovery-procedures","title":"Recovery Procedures","text":"<p>Full Database Restore:</p> <pre><code># Stop application\nsudo systemctl stop dhanman-sales-prod\n\n# Download backup from B2\nb2 download-file-by-name dhanman-backups \\\n    \"postgresql/prod-dhanman-sales_20240115_020000.backup.gz\" \\\n    ./restore.backup.gz\n\n# Decompress\ngunzip restore.backup.gz\n\n# Drop existing database\ndropdb prod-dhanman-sales\n\n# Create new database\ncreatedb prod-dhanman-sales\n\n# Restore\npg_restore -U dhanman_user -d prod-dhanman-sales -v restore.backup\n\n# Start application\nsudo systemctl start dhanman-sales-prod\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#security-considerations","title":"Security Considerations","text":""},{"location":"system/architecture/deployment-scalability/#ssltls-configuration","title":"SSL/TLS Configuration","text":"<ul> <li>Let's Encrypt certificates with auto-renewal</li> <li>TLS 1.2 and 1.3 only</li> <li>Strong cipher suites</li> <li>HSTS headers</li> </ul>"},{"location":"system/architecture/deployment-scalability/#firewall-rules","title":"Firewall Rules","text":"<pre><code># Allow only necessary ports\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\n\n# SSH\nsudo ufw allow 22/tcp\n\n# HTTP/HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# PostgreSQL (internal only)\nsudo ufw allow from 10.0.0.0/8 to any port 5432\n\n# RabbitMQ (internal only)\nsudo ufw allow from 10.0.0.0/8 to any port 5672\nsudo ufw allow from 10.0.0.0/8 to any port 15672\n\nsudo ufw enable\n</code></pre>"},{"location":"system/architecture/deployment-scalability/#secrets-management","title":"Secrets Management","text":"<p>Secrets stored in: - GitHub Secrets (CI/CD) - Environment variables (systemd service files) - Encrypted configuration files</p> <p>Never commit secrets to repository.</p>"},{"location":"system/architecture/deployment-scalability/#best-practices","title":"Best Practices","text":""},{"location":"system/architecture/deployment-scalability/#dos","title":"Do's \u2705","text":"<ul> <li>Use systemd for service management</li> <li>Implement health checks</li> <li>Monitor all services</li> <li>Automate backups</li> <li>Use SSL/TLS everywhere</li> <li>Implement rate limiting</li> <li>Log all operations</li> <li>Use connection pooling</li> <li>Implement graceful shutdown</li> <li>Version deployments</li> </ul>"},{"location":"system/architecture/deployment-scalability/#donts","title":"Don'ts \u274c","text":"<ul> <li>Don't run services as root</li> <li>Don't skip health checks</li> <li>Don't ignore backup verification</li> <li>Don't deploy without testing</li> <li>Don't skip database migrations</li> <li>Don't ignore resource limits</li> <li>Don't deploy during peak hours</li> <li>Don't skip rollback plans</li> </ul>"},{"location":"system/architecture/deployment-scalability/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>[ ] Kubernetes orchestration</li> <li>[ ] Multi-region deployment</li> <li>[ ] CDN for static assets</li> <li>[ ] Advanced caching strategy</li> <li>[ ] Auto-scaling based on metrics</li> <li>[ ] Blue-green deployments</li> <li>[ ] Canary deployments</li> <li>[ ] Service mesh (Istio/Linkerd)</li> </ul>"},{"location":"system/architecture/deployment-scalability/#summary","title":"Summary","text":"<p>Dhanman's deployment architecture provides: - Reliability: Systemd services with auto-restart - Scalability: Ready for horizontal scaling - Security: SSL/TLS, firewalls, secrets management - Observability: Comprehensive monitoring and logging - Maintainability: Automated CI/CD and backups - Performance: Optimized database and proxy configuration</p> <p>The architecture supports current needs while providing clear paths for future growth.</p>"},{"location":"system/architecture/design-decisions/","title":"Architecture Design Decisions","text":""},{"location":"system/architecture/design-decisions/#overview","title":"Overview","text":"<p>This document captures key architectural design decisions, their rationale, trade-offs, and implications for the Dhanman ERP system. These decisions shape the system's structure, technology choices, and operational characteristics.</p>"},{"location":"system/architecture/design-decisions/#design-philosophy","title":"Design Philosophy","text":""},{"location":"system/architecture/design-decisions/#core-principles","title":"Core Principles","text":"<ol> <li>Business Domain First: Architecture driven by business capabilities and bounded contexts</li> <li>Evolutionary Design: Support incremental changes and technological evolution</li> <li>Cloud-Native: Designed for containerized deployment and horizontal scalability</li> <li>Developer Experience: Balance architectural rigor with developer productivity</li> <li>Operational Excellence: Build observability and reliability into the architecture</li> </ol>"},{"location":"system/architecture/design-decisions/#key-architectural-decisions","title":"Key Architectural Decisions","text":""},{"location":"system/architecture/design-decisions/#1-microservices-architecture","title":"1. Microservices Architecture","text":"<p>Decision: Adopt microservices architecture over monolithic design</p> <p>Context: - Dhanman serves multiple business domains (Sales, Purchase, Payroll, Community) - Need for independent deployment and scaling - Multiple teams working on different features - Different services may have different scaling requirements</p> <p>Rationale: - Bounded Context Alignment: Each service maps to a domain bounded context - Independent Deployment: Deploy services without affecting others - Technology Flexibility: Choose appropriate technology per service - Scalability: Scale services based on individual load patterns - Team Autonomy: Teams own services end-to-end</p> <p>Trade-offs:</p> Advantages Disadvantages Independent deployment Increased operational complexity Better scalability Network latency between services Technology diversity Distributed system challenges Fault isolation More complex testing Team autonomy Data consistency challenges <p>Alternatives Considered: - Monolithic: Rejected due to coupling and scaling limitations - Modular Monolith: Considered but rejected for deployment flexibility needs - Service-Oriented Architecture (SOA): Too heavyweight with ESB requirements</p> <p>Implementation: <pre><code>Microservices:\n- dhanman-common (Auth, Notifications, Ledger)\n- dhanman-sales (Invoicing, Receipts)\n- dhanman-purchase (Procurement, Bills)\n- dhanman-payroll (Salaries, Employees)\n- dhanman-community (Residents, Facilities)\n- dhanman-inventory (Assets, Stock)\n</code></pre></p> <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#2-event-driven-architecture-with-rabbitmq","title":"2. Event-Driven Architecture with RabbitMQ","text":"<p>Decision: Use RabbitMQ for asynchronous event-driven communication</p> <p>Context: - Services need to communicate without tight coupling - Business workflows span multiple services - Need for eventual consistency - Requirement for audit trail and event history</p> <p>Rationale: - Decoupling: Services don't need direct knowledge of consumers - Asynchronous Processing: Non-blocking operations improve responsiveness - Scalability: Message broker handles load spikes - Reliability: Persistent messages ensure no data loss - Integration: Easy to add new services as event consumers</p> <p>Trade-offs:</p> Advantages Disadvantages Loose coupling Eventual consistency Scalability More complex debugging Reliability Message ordering challenges Asynchronous processing Requires message broker infrastructure Event history Potential message duplication <p>Why RabbitMQ over alternatives:</p> <p>vs Apache Kafka: - RabbitMQ better for traditional message queuing - Lower operational complexity - Sufficient throughput for current needs - Better routing capabilities</p> <p>vs Azure Service Bus: - RabbitMQ is open-source and cloud-agnostic - Lower costs - More control over infrastructure - Similar features for our use cases</p> <p>vs AWS SQS/SNS: - Avoid cloud vendor lock-in - Can deploy on-premises or any cloud - More features (exchange types, routing)</p> <p>Implementation Details: <pre><code>Exchanges:\n  - dhanman.events (fanout) - Domain events\n  - dhanman.commands (direct) - Service commands\n\nQueues per Service:\n  - {service}.events\n  - {service}.commands\n  - {service}.dlq (dead-letter queue)\n\nMessage Patterns:\n  - Publish-Subscribe (events)\n  - Point-to-Point (commands)\n  - Request-Reply (synchronous operations)\n</code></pre></p> <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#3-cqrs-command-query-responsibility-segregation","title":"3. CQRS (Command Query Responsibility Segregation)","text":"<p>Decision: Implement CQRS pattern using MediatR</p> <p>Context: - Different performance characteristics for reads vs writes - Complex business logic for write operations - Need for optimized read models - Support for event sourcing</p> <p>Rationale: - Separation of Concerns: Read and write models optimized independently - Scalability: Scale read and write sides separately - Performance: Optimized queries without business logic overhead - Maintainability: Clear structure for operations - Flexibility: Different data models for reads vs writes</p> <p>Trade-offs:</p> Advantages Disadvantages Optimized performance Increased complexity Clear separation More code to maintain Independent scaling Potential data staleness Better testability Learning curve <p>Why MediatR: - Proven .NET library - In-process messaging (low latency) - Clean handler pattern - Pipeline behaviors for cross-cutting concerns - Good community support</p> <p>Implementation Pattern: <pre><code>Commands (Write):\n  CreateInvoiceCommand \u2192 CreateInvoiceCommandHandler\n  - Validates business rules\n  - Modifies domain entities\n  - Publishes domain events\n  - Returns Result&lt;T&gt;\n\nQueries (Read):\n  GetInvoiceByIdQuery \u2192 GetInvoiceByIdQueryHandler\n  - Bypasses domain model\n  - Reads optimized projections\n  - Returns DTOs\n  - No side effects\n</code></pre></p> <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#4-postgresql-as-primary-database","title":"4. PostgreSQL as Primary Database","text":"<p>Decision: Use PostgreSQL 18 as the primary database for all services</p> <p>Context: - Need for relational data model - ACID transactions required - JSON support for flexible schemas - Open-source preference - Multi-tenancy support</p> <p>Rationale: - Maturity: Battle-tested, reliable RDBMS - Features: JSON/JSONB, full-text search, GIS support - Performance: Excellent query performance - Cost: Open-source, no licensing fees - Scalability: Read replicas, partitioning support - Community: Large community, extensive documentation</p> <p>Trade-offs:</p> Advantages Disadvantages ACID compliance Vertical scaling limits Rich feature set Complex sharding JSON support Not ideal for document storage Open-source Manual operational overhead <p>Database Per Service: <pre><code>Production:\n- prod-dhanman-common\n- prod-dhanman-sales\n- prod-dhanman-purchase\n- prod-dhanman-payroll\n- prod-dhanman-community\n- prod-dhanman-inventory\n\nQA:\n- qa-dhanman-common\n- qa-dhanman-sales\n- ... (similar structure)\n</code></pre></p> <p>Why not NoSQL: - Accounting requires ACID transactions - Complex relational queries needed - Data integrity critical for financial records - Team expertise in SQL</p> <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#5-domain-driven-design-ddd","title":"5. Domain-Driven Design (DDD)","text":"<p>Decision: Apply DDD tactical patterns in domain layer</p> <p>Context: - Complex business domain with specific rules - Need for rich domain model - Multiple bounded contexts - Business logic centralization</p> <p>Rationale: - Business Alignment: Code reflects business concepts - Ubiquitous Language: Shared vocabulary between team and domain experts - Encapsulation: Business logic in domain entities - Maintainability: Clear domain boundaries - Testability: Domain logic testable in isolation</p> <p>DDD Patterns Applied: <pre><code>\u2705 Entities - Objects with identity (Invoice, PurchaseOrder)\n\u2705 Value Objects - Immutable objects (Money, Address)\n\u2705 Aggregates - Consistency boundaries (Invoice + LineItems)\n\u2705 Domain Events - Business occurrences (InvoiceCreated)\n\u2705 Repositories - Persistence abstraction\n\u2705 Domain Services - Cross-aggregate operations\n\u2705 Bounded Contexts - Service boundaries\n</code></pre></p> <p>Trade-offs:</p> Advantages Disadvantages Business alignment Learning curve Rich domain model More code Clear boundaries Can be over-engineered Testable Requires domain expertise <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#6-hangfire-for-scheduled-jobs","title":"6. Hangfire for Scheduled Jobs","text":"<p>Decision: Use Hangfire for background job processing and scheduling</p> <p>Context: - Need for reliable background job processing - Scheduled tasks (e.g., monthly invoice generation) - Delayed jobs (e.g., payment reminders) - Job monitoring and management</p> <p>Rationale: - Persistence: Jobs survive application restarts - Dashboard: Built-in monitoring UI - Retry Logic: Automatic retry with exponential backoff - Flexibility: Fire-and-forget, delayed, recurring jobs - Integration: Works well with PostgreSQL</p> <p>Why Hangfire over alternatives:</p> <p>vs Quartz.NET: - Hangfire has better dashboard - Simpler configuration - Better persistence options</p> <p>vs Azure Functions: - Avoid cloud lock-in - More control over execution - Lower costs</p> <p>vs Custom Solution: - Don't reinvent the wheel - Proven reliability - Active maintenance</p> <p>Job Types Used: <pre><code>Fire-and-Forget: Email notifications\nDelayed: Payment reminders\nRecurring: Monthly invoice generation, daily reports\nContinuations: Sequential workflows\nBatches: Bulk operations\n</code></pre></p> <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#7-auth0-for-authentication","title":"7. Auth0 for Authentication","text":"<p>Decision: Use Auth0 for authentication and authorization</p> <p>Context: - Need for secure authentication - OAuth2/OIDC support required - Multi-tenancy requirements - Social login support</p> <p>Rationale: - Security: Industry-standard security practices - Features: MFA, SSO, social logins - Multi-tenancy: Separate tenants for QA and Production - Maintenance: Managed service, no security patches to apply - Compliance: SOC2, HIPAA compliance</p> <p>Trade-offs:</p> Advantages Disadvantages Managed security Vendor lock-in Rich features Costs scale with users Compliance External dependency Quick implementation Limited customization <p>Implementation: <pre><code>Tenants:\n- qa-auth0 (QA environment)\n- prod-auth0 (Production)\n\nCustom Actions:\n- Inject customer_id, org_id in tokens\n- Custom claims for roles\n\nIntegration:\n- Frontend: Auth0 React SDK\n- Backend: JWT Bearer authentication\n</code></pre></p> <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#8-net-9-for-backend-services","title":"8. .NET 9 for Backend Services","text":"<p>Decision: Use .NET 9 (C#) for all backend microservices</p> <p>Context: - Need for high-performance backend - Cross-platform deployment - Modern language features - Team expertise</p> <p>Rationale: - Performance: Excellent throughput and low latency - Productivity: Modern C# features, strong typing - Ecosystem: Rich library ecosystem - Cross-platform: Runs on Linux (production servers) - Long-term Support: Microsoft backing</p> <p>Why .NET over alternatives:</p> <p>vs Node.js: - Better performance for CPU-intensive tasks - Stronger typing - Better tooling (Visual Studio, Rider)</p> <p>vs Java: - More modern language features - Better async/await support - Lighter memory footprint</p> <p>vs Python: - Much better performance - Strong typing - Better for financial calculations</p> <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#9-react-typescript-for-frontend","title":"9. React + TypeScript for Frontend","text":"<p>Decision: Use React with TypeScript for the web application</p> <p>Context: - Need for rich, interactive UI - Single-page application requirements - Team preference and expertise - Strong ecosystem</p> <p>Rationale: - Component Model: Reusable UI components - Type Safety: TypeScript catches errors at compile time - Ecosystem: Large library ecosystem (MUI, React Query) - Performance: Virtual DOM for efficient updates - Developer Experience: Great tooling and debugging</p> <p>Technology Stack: <pre><code>- React 18\n- TypeScript\n- Material-UI (MUI)\n- React Query (data fetching)\n- React Router (routing)\n- Vite (build tool)\n</code></pre></p> <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#10-clean-architecture-layered-architecture","title":"10. Clean Architecture / Layered Architecture","text":"<p>Decision: Organize code in clean architecture layers</p> <p>Context: - Need for maintainable codebase - Clear separation of concerns - Testability requirements - Technology independence</p> <p>Layers: <pre><code>1. Domain Layer (Core)\n   - Entities, Value Objects, Aggregates\n   - Domain Events, Interfaces\n   - No external dependencies\n\n2. Application Layer\n   - CQRS handlers (Commands, Queries)\n   - DTOs, Mappers, Validators\n   - Depends on Domain\n\n3. Infrastructure Layer\n   - EF Core implementations\n   - RabbitMQ, External APIs\n   - Depends on Domain and Application\n\n4. API/Presentation Layer\n   - Controllers, SignalR hubs\n   - Request/Response models\n   - Depends on Application\n</code></pre></p> <p>Benefits: - Testability: Domain logic testable without infrastructure - Maintainability: Clear responsibilities - Flexibility: Can swap implementations - Independence: Business logic isolated from frameworks</p> <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#11-minio-for-object-storage","title":"11. MinIO for Object Storage","text":"<p>Decision: Use MinIO for document and file storage</p> <p>Context: - Need for scalable file storage - PDF invoices, images, documents - S3-compatible API preferred - Self-hosted requirement</p> <p>Rationale: - S3 Compatible: Standard API - Self-hosted: Control over data - Performance: Fast file access - Scalability: Distributed storage support</p> <p>Why MinIO: - Open-source - Production-ready - Easy deployment - No vendor lock-in</p> <p>Use Cases: <pre><code>- Invoice PDFs\n- Payslip documents\n- User profile images\n- Import/export files\n- Backup archives\n</code></pre></p> <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#12-grafana-loki-promtail-for-observability","title":"12. Grafana + Loki + Promtail for Observability","text":"<p>Decision: Use Grafana stack for logging and monitoring</p> <p>Context: - Need for centralized logging - Service health monitoring - Performance metrics tracking - Alert management</p> <p>Components: <pre><code>Promtail: Log collection from services\nLoki: Log aggregation and storage\nGrafana: Visualization and dashboards\nPrometheus: Metrics collection (planned)\nNetdata: System-level metrics\n</code></pre></p> <p>Why this stack: - Open-source - Lightweight (compared to ELK stack) - Good integration between components - Excellent visualization (Grafana) - Cost-effective</p> <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#13-api-gateway-pattern-future","title":"13. API Gateway Pattern (Future)","text":"<p>Decision: Plan to implement API Gateway using NGINX/Ocelot</p> <p>Context: - Currently using NGINX as reverse proxy - Need for centralized routing - Rate limiting requirements - Authentication/authorization enforcement</p> <p>Planned Features: <pre><code>- Request routing\n- Load balancing\n- Rate limiting\n- Authentication\n- Response caching\n- API versioning\n</code></pre></p> <p>Status: \ud83d\udd04 Planned</p>"},{"location":"system/architecture/design-decisions/#14-multi-tenancy-strategy","title":"14. Multi-tenancy Strategy","text":"<p>Decision: Database-per-tenant with schema isolation</p> <p>Context: - Need for data isolation - Performance requirements - Compliance and security - Scalability considerations</p> <p>Strategy: <pre><code>Organization Level:\n- Each organization has org_id\n- Row-level security via filters\n- Shared database schema\n- Custom database per organization (optional)\n\nTenant Identification:\n- JWT claims (org_id, customer_id)\n- Global query filters in EF Core\n- Tenant resolver middleware\n</code></pre></p> <p>Benefits: - Data isolation - Performance optimization - Cost-effective - Easier backups per tenant</p> <p>Status: \u2705 Implemented</p>"},{"location":"system/architecture/design-decisions/#technology-stack-summary","title":"Technology Stack Summary","text":"Layer Technology Version Status Backend .NET 9 \u2705 Frontend React 18 \u2705 Language TypeScript 5.x \u2705 Database PostgreSQL 18 \u2705 Messaging RabbitMQ 3.x \u2705 Caching Redis 7.x \ud83d\udd04 Planned Object Storage MinIO Latest \u2705 Job Scheduling Hangfire 1.8+ \u2705 Authentication Auth0 - \u2705 Logging Loki + Promtail Latest \u2705 Monitoring Grafana + Netdata Latest \u2705 Reverse Proxy NGINX Latest \u2705 CI/CD GitHub Actions - \u2705 Infrastructure Ansible Latest \u2705"},{"location":"system/architecture/design-decisions/#decision-process","title":"Decision Process","text":"<p>When making architectural decisions, we consider:</p> <ol> <li>Business Requirements: Does it solve the business problem?</li> <li>Technical Fit: Does it align with existing architecture?</li> <li>Team Capability: Can the team implement and maintain it?</li> <li>Cost: What are the licensing and operational costs?</li> <li>Scalability: Will it scale with growth?</li> <li>Risk: What are the risks and mitigation strategies?</li> <li>Alternatives: What other options exist?</li> </ol>"},{"location":"system/architecture/design-decisions/#future-considerations","title":"Future Considerations","text":""},{"location":"system/architecture/design-decisions/#under-evaluation","title":"Under Evaluation","text":"<ul> <li>Caching Strategy: Redis for distributed caching</li> <li>API Gateway: Ocelot or custom gateway</li> <li>Service Mesh: Istio or Linkerd for advanced routing</li> <li>Event Sourcing: Full event sourcing for audit trail</li> <li>GraphQL: Alternative API query language</li> <li>gRPC: For internal service-to-service communication</li> </ul>"},{"location":"system/architecture/design-decisions/#deferred","title":"Deferred","text":"<ul> <li>Kubernetes: Current deployment works well, defer until scale requires it</li> <li>Cloud Migration: Stay on VPS until growth requires cloud scalability</li> <li>Microservices Split: Current services are appropriate size</li> </ul>"},{"location":"system/architecture/design-decisions/#related-documentation","title":"Related Documentation","text":"<ul> <li>Architecture Overview</li> <li>Patterns</li> </ul>"},{"location":"system/architecture/design-decisions/#summary","title":"Summary","text":"<p>Dhanman's architecture decisions prioritize: - Business alignment through DDD and bounded contexts - Scalability via microservices and event-driven design - Reliability with proven technologies (PostgreSQL, RabbitMQ, .NET) - Operational excellence through observability and automation - Developer productivity with modern tools and patterns - Flexibility to evolve with business needs</p> <p>These decisions form a solid foundation for a scalable, maintainable ERP system that can grow with the business.</p>"},{"location":"system/architecture/overview/","title":"DhanMan Architecture","text":""},{"location":"system/architecture/overview/#architecture-overview","title":"Architecture Overview","text":"<p>Dhanman is an ERP built with a microservices architecture and the CQRS pattern. Each bounded context is a separate service with its own data store, communicating primarily through asynchronous events via RabbitMQ. The frontend is a React/TypeScript SPA that talks to backend REST APIs through an API gateway.</p> <p>Key objectives - Modular services for each business capability (Sales, Purchase, Inventory, Payroll, Community/MyHome, Common) - Independent deployability and scaling of services - Clear separation of write and read concerns (CQRS) - Strong observability (logs, metrics, uptime) - Secure, multi-tenant-ready foundation</p> <p>Core technologies - Backend: C# services following Clean Architecture with CQRS (MediatR), Repository pattern - Data: PostgreSQL (primary DB per service), optional read models - Messaging: RabbitMQ (event-driven integration) - Object Storage: MinIO (files, attachments) - Frontend: React/TypeScript SPA - Observability: Promtail + Loki (logs), Grafana (dashboards), Netdata (+ Cloud) for node metrics, Uptime Kuma for uptime checks</p> <p>Sections - Runtime Topology - Service Catalog - CQRS: Commands and Queries - Data Management - Messaging and Integration - Security - Observability - Deployment</p> <p>Next steps - We will attach rendered diagrams under Diagrams as PNG/SVG.</p> <p></p>"},{"location":"system/architecture/principles/","title":"\ud83c\udfe0 Dhanman OVH VPS Infrastructure \u2013 Full Deployment Documentation","text":""},{"location":"system/architecture/principles/#1-tech-stack-overview","title":"\ud83d\udcc6 1. Tech Stack Overview","text":"Layer Technology Used Backend APIs .NET 9 Frontend React 18 (Vite) Database PostgreSQL 17 Auth Auth0 (QA + PROD tenants) Logging Serilog \u2192 Promtail \u2192 Loki Monitoring Grafana, Prometheus, Node/PG Exporter, Uptime Kuma Email Zoho Mail (MX), Brevo SMTP Code Quality SonarQube (Community) Automation Ansible CI/CD GitHub Actions Reverse Proxy NGINX + Certbot"},{"location":"system/architecture/principles/#2-repositories-overview","title":"\ud83e\uddf0 2. Repositories Overview","text":"Repository Purpose <code>dhanman-common</code> Shared organization-level API logic <code>dhanman-community</code> Housing/residents management <code>dhanman-inventory</code> Stock and warehouse management <code>dhanman-payroll</code> Salary and employee management <code>dhanman-purchase</code> Vendor, PO, GRN, Bills <code>dhanman-sales</code> Customer billing, invoices <code>dhanman-react</code> Frontend App <code>b2a-crosscutting</code> Shared EF Core logic \u2514\ufe0f <code>b2a-permissions</code> Permission handling module \u2514\ufe0f <code>b2a-emailtemplate</code> Email templating module"},{"location":"system/architecture/principles/#3-database-layout-postgresql-17","title":"\ud83d\uddc3\ufe0f 3. Database Layout (PostgreSQL 17)","text":""},{"location":"system/architecture/principles/#production","title":"\u2705 Production","text":"<ul> <li><code>prod-dhanman-common</code></li> <li><code>prod-dhanman-community</code></li> <li><code>prod-dhanman-inventory</code></li> <li><code>prod-dhanman-payroll</code></li> <li><code>prod-dhanman-purchase</code></li> <li><code>prod-dhanman-sales</code></li> </ul>"},{"location":"system/architecture/principles/#qa","title":"\u2705 QA","text":"<ul> <li><code>qa-dhanman-common</code></li> <li><code>qa-dhanman-community</code></li> <li><code>qa-dhanman-inventory</code></li> <li><code>qa-dhanman-payroll</code></li> <li><code>qa-dhanman-purchase</code></li> <li><code>qa-dhanman-sales</code></li> </ul>"},{"location":"system/architecture/principles/#4-deployment-architecture","title":"\u2699\ufe0f 4. Deployment Architecture","text":""},{"location":"system/architecture/principles/#folder-structure-on-ovh","title":"\ud83d\udd39 Folder Structure (on OVH)","text":"<pre><code>/var/www/\n\u251c\u2500\u2500 prod/\n\u2502   \u251c\u2500\u2500 dhanman-common/\n\u2502   \u2502   \u251c\u2500\u2500 .env\n\u2502   \u2502   \u2514\u2500\u2500 logs/dhanman-common-YYYYMMDD.log\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 logs/\n\u251c\u2500\u2500 qa/\n\u2502   \u251c\u2500\u2500 dhanman-common/\n\u2502   \u2502   \u251c\u2500\u2500 .env\n\u2502   \u2502   \u2514\u2500\u2500 logs/dhanman-common-YYYYMMDD.log\n\u2502   \u251c\u2500\u2500 ...\n\u2502   \u2514\u2500\u2500 logs/\n</code></pre>"},{"location":"system/architecture/principles/#ports","title":"\ud83d\udd39 Ports","text":"Env Service Port QA dhanman-common 5101 QA dhanman-community 5102 QA dhanman-inventory 5103 QA dhanman-payroll 5104 QA dhanman-purchase 5105 QA dhanman-sales 5106 PROD dhanman-common 5001 PROD dhanman-community 5002 PROD dhanman-inventory 5003 PROD dhanman-payroll 5004 PROD dhanman-purchase 5005 PROD dhanman-sales 5006"},{"location":"system/architecture/principles/#env-example-per-service","title":"\ud83d\udd39 .env Example (Per Service)","text":"<p><pre><code>ASPNETCORE_ENVIRONMENT=Production\nConnectionStrings__MainDb=Host=...;Database=prod-dhanman-common;...\nConnectionStrings__PermissionsDb=...;\nBrevo__ApiKey=...;\nLogging__Path=/var/www/prod/logs/\n</code></pre> - Injected dynamically from GitHub Secrets during deployment. - Ensures clean separation of environments.</p>"},{"location":"system/architecture/principles/#5-cicd-github-actions","title":"\ud83d\ude80 5. CI/CD: GitHub Actions","text":""},{"location":"system/architecture/principles/#qa-deployment","title":"\u2705 QA Deployment","text":"<ul> <li>Triggered on merge to <code>main</code>.</li> <li>Auto deploys to OVH:</li> <li>SSH</li> <li>Rsync binaries</li> <li>Generate <code>.env</code></li> <li>Restart systemd service</li> </ul>"},{"location":"system/architecture/principles/#prod-deployment","title":"\u2705 PROD Deployment","text":"<ul> <li>Manual via <code>workflow_dispatch</code>.</li> <li>Uses same logic but run intentionally.</li> </ul>"},{"location":"system/architecture/principles/#secrets-management","title":"\u2705 Secrets Management","text":"Secret Name Purpose <code>DO_HOST</code> OVH IP address <code>DO_USER</code> SSH user <code>DO_SSH_KEY</code> SSH private key <code>CONNECTIONSTRINGS__PURCHASEDB_QA</code> QA DB conn string <code>CONNECTIONSTRINGS__PURCHASEDB_PROD</code> PROD DB conn string <code>CONNECTIONSTRINGS__PERMISSIONSDB_QA</code> Permissions DB <code>CONNECTIONSTRINGS__PERMISSIONSDB_PROD</code> Permissions DB <code>SONAR_TOKEN</code> SonarCloud token"},{"location":"system/architecture/principles/#6-authentication-with-auth0","title":"\ud83d\udd10 6. Authentication with Auth0","text":"<ul> <li>Two tenants: <code>qa-auth0</code>, <code>prod-auth0</code></li> <li>Custom Actions:</li> <li>Inject <code>customer_id</code>, <code>org_id</code> in access tokens</li> <li>Used in both frontend and backend</li> </ul>"},{"location":"system/architecture/principles/#7-logging-architecture","title":"\ud83d\udcc4 7. Logging Architecture","text":"<ul> <li>Serilog (JSON logs)</li> <li>Logs written to:</li> <li><code>/var/www/prod/logs/*.log</code></li> <li><code>/var/www/qa/logs/*.log</code></li> <li>Filename format: <code>service-name-YYYYMMDD.log</code></li> <li>Promtail regex extracts service/environment</li> <li>Loki aggregates logs</li> <li>Grafana dashboards include:</li> <li>Error logs</li> <li>Recent events</li> <li>SQL queries via EF</li> </ul>"},{"location":"system/architecture/principles/#8-monitoring-metrics","title":"\ud83d\udcca 8. Monitoring &amp; Metrics","text":"<ul> <li>Uptime Kuma: HTTP-based health monitoring</li> <li>Prometheus:</li> <li>Node Exporter: CPU, RAM, disk</li> <li>PostgreSQL Exporter: query times, active connections</li> <li>Grafana Dashboards:</li> <li>Live stats</li> <li>Alerts (future enhancement)</li> </ul>"},{"location":"system/architecture/principles/#9-email-setup","title":"\ud83d\udce7 9. Email Setup","text":"<ul> <li>Zoho Mail:</li> <li>Mailboxes like <code>info@dhanman.com</code></li> <li> <p>SPF, DKIM, DMARC configured</p> </li> <li> <p>Brevo SMTP:</p> </li> <li>Used in email template service</li> <li>Injected via <code>.env</code></li> </ul>"},{"location":"system/architecture/principles/#10-code-quality","title":"\ud83d\udd22 10. Code Quality","text":"<ul> <li>SonarQube (Community):</li> <li><code>.NET</code> and <code>React</code> projects</li> <li>Scans run in pipeline</li> <li>Token stored in <code>SONAR_TOKEN</code></li> </ul>"},{"location":"system/architecture/principles/#11-future-improvements","title":"\ud83d\udd27 11. Future Improvements","text":"<ul> <li>[ ] PgBouncer setup for DB pooling</li> <li>[ ] Auto backup of PostgreSQL</li> <li>[ ] Log archival + rotation</li> <li>[ ] Grafana alerts for anomalies</li> <li>[ ] Audit logging for user actions</li> </ul>"},{"location":"system/architecture/principles/#summary-table","title":"\u2705 Summary Table","text":"Area Status APIs 6 PROD + 6 QA Frontend React 18 SPA Authentication Auth0 (multi-tenant) CI/CD GitHub Actions Logging Serilog + Loki Monitoring Prometheus + Kuma Email Zoho + Brevo SMTP Code Quality SonarQube CI Deployment Ansible + GitHub"},{"location":"system/architecture/security-architecture/","title":"Security Architecture","text":""},{"location":"system/architecture/security-architecture/#overview","title":"Overview","text":"<p>This document describes Dhanman's security architecture, authentication and authorization mechanisms, data protection strategies, and security best practices implemented across the system.</p>"},{"location":"system/architecture/security-architecture/#security-principles","title":"Security Principles","text":""},{"location":"system/architecture/security-architecture/#core-tenets","title":"Core Tenets","text":"<ol> <li>Defense in Depth: Multiple layers of security controls</li> <li>Least Privilege: Minimum necessary permissions</li> <li>Zero Trust: Verify every request, trust nothing</li> <li>Security by Design: Build security into architecture</li> <li>Fail Secure: Default to denying access on errors</li> <li>Audit Everything: Log all security-relevant events</li> </ol>"},{"location":"system/architecture/security-architecture/#authentication","title":"Authentication","text":""},{"location":"system/architecture/security-architecture/#auth0-integration","title":"Auth0 Integration","text":"<p>Dhanman uses Auth0 as the identity provider for centralized authentication.</p> <p>Architecture:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Frontend  \u2502                    \u2502    Auth0     \u2502\n\u2502   (React)   \u2502\u2500\u2500\u2500\u2500\u2500\u2500 Login \u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502   Tenant     \u2502\n\u2502             \u2502                    \u2502              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                                  \u2502\n       \u2502 \u25c0\u2500\u2500\u2500\u2500\u2500\u2500 JWT Token \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502 API Request + JWT\n       \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Backend   \u2502\u2500\u2500\u2500 Validate JWT \u2500\u2500\u25b6\u2502   Auth0      \u2502\n\u2502  Services   \u2502                    \u2502   JWKS       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"system/architecture/security-architecture/#auth0-configuration","title":"Auth0 Configuration","text":"<p>Tenants: - Production: <code>prod-dhanman.auth0.com</code> - QA: <code>qa-dhanman.auth0.com</code></p> <p>Applications: - Web Application (SPA): React frontend - Machine-to-Machine: Service-to-service communication - Management API: Administrative operations</p> <p>Features Enabled: - Multi-factor Authentication (MFA) - Email verification - Password reset - Social login (Google, Microsoft) - Passwordless (SMS/Email OTP)</p>"},{"location":"system/architecture/security-architecture/#jwt-token-structure","title":"JWT Token Structure","text":"<pre><code>{\n  \"header\": {\n    \"alg\": \"RS256\",\n    \"typ\": \"JWT\",\n    \"kid\": \"abc123...\"\n  },\n  \"payload\": {\n    \"iss\": \"https://prod-dhanman.auth0.com/\",\n    \"sub\": \"auth0|60a1234567890\",\n    \"aud\": [\n      \"https://api.dhanman.com\",\n      \"https://prod-dhanman.auth0.com/userinfo\"\n    ],\n    \"iat\": 1704067200,\n    \"exp\": 1704153600,\n    \"azp\": \"client_id_here\",\n    \"scope\": \"openid profile email\",\n\n    // Custom claims (added via Auth0 Actions)\n    \"org_id\": \"org_12345\",\n    \"customer_id\": \"cust_67890\",\n    \"roles\": [\"admin\", \"accountant\"],\n    \"permissions\": [\n      \"invoice:create\",\n      \"invoice:read\",\n      \"invoice:update\",\n      \"report:generate\"\n    ]\n  }\n}\n</code></pre>"},{"location":"system/architecture/security-architecture/#auth0-actions-custom-logic","title":"Auth0 Actions (Custom Logic)","text":"<p>Login Flow Action:</p> <pre><code>exports.onExecutePostLogin = async (event, api) =&gt; {\n  const namespace = 'https://dhanman.com';\n\n  if (event.authorization) {\n    // Get user metadata from app_metadata\n    const orgId = event.user.app_metadata.org_id;\n    const customerId = event.user.app_metadata.customer_id;\n    const roles = event.authorization.roles;\n\n    // Add custom claims to token\n    api.idToken.setCustomClaim(`${namespace}/org_id`, orgId);\n    api.idToken.setCustomClaim(`${namespace}/customer_id`, customerId);\n    api.idToken.setCustomClaim(`${namespace}/roles`, roles);\n\n    api.accessToken.setCustomClaim(`${namespace}/org_id`, orgId);\n    api.accessToken.setCustomClaim(`${namespace}/customer_id`, customerId);\n    api.accessToken.setCustomClaim(`${namespace}/roles`, roles);\n  }\n};\n</code></pre>"},{"location":"system/architecture/security-architecture/#backend-jwt-validation","title":"Backend JWT Validation","text":"<p>.NET Configuration:</p> <pre><code>// Program.cs\nbuilder.Services\n    .AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =&gt;\n    {\n        options.Authority = builder.Configuration[\"Auth0:Authority\"];\n        options.Audience = builder.Configuration[\"Auth0:Audience\"];\n\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = true,\n            ValidIssuer = builder.Configuration[\"Auth0:Authority\"],\n            ValidateAudience = true,\n            ValidAudience = builder.Configuration[\"Auth0:Audience\"],\n            ValidateLifetime = true,\n            ClockSkew = TimeSpan.Zero, // No tolerance for expired tokens\n            RequireExpirationTime = true,\n            RequireSignedTokens = true\n        };\n\n        options.Events = new JwtBearerEvents\n        {\n            OnAuthenticationFailed = context =&gt;\n            {\n                _logger.LogWarning(\n                    \"Authentication failed: {Error}\", \n                    context.Exception.Message\n                );\n                return Task.CompletedTask;\n            },\n            OnTokenValidated = context =&gt;\n            {\n                var claims = context.Principal?.Claims;\n                var userId = claims?.FirstOrDefault(c =&gt; c.Type == ClaimTypes.NameIdentifier)?.Value;\n                _logger.LogInformation(\"Token validated for user {UserId}\", userId);\n                return Task.CompletedTask;\n            }\n        };\n    });\n</code></pre> <p>Configuration File:</p> <pre><code>{\n  \"Auth0\": {\n    \"Authority\": \"https://prod-dhanman.auth0.com/\",\n    \"Audience\": \"https://api.dhanman.com\",\n    \"ClientId\": \"your_client_id\",\n    \"ClientSecret\": \"your_client_secret\"\n  }\n}\n</code></pre>"},{"location":"system/architecture/security-architecture/#authorization","title":"Authorization","text":""},{"location":"system/architecture/security-architecture/#role-based-access-control-rbac","title":"Role-Based Access Control (RBAC)","text":"<p>Roles Hierarchy:</p> <pre><code>System Administrator\n\u251c\u2500\u2500 Organization Admin\n\u2502   \u251c\u2500\u2500 Financial Manager\n\u2502   \u2502   \u251c\u2500\u2500 Accountant\n\u2502   \u2502   \u2514\u2500\u2500 Billing Clerk\n\u2502   \u251c\u2500\u2500 HR Manager\n\u2502   \u2502   \u251c\u2500\u2500 Payroll Admin\n\u2502   \u2502   \u2514\u2500\u2500 HR Assistant\n\u2502   \u2514\u2500\u2500 Operations Manager\n\u2502       \u251c\u2500\u2500 Procurement Officer\n\u2502       \u2514\u2500\u2500 Inventory Manager\n\u251c\u2500\u2500 Resident\n\u2514\u2500\u2500 Guard\n</code></pre> <p>Role Definitions:</p> Role Description Typical Permissions System Admin Full system access All permissions Org Admin Organization owner All within organization Financial Manager Manages finances Invoice, receipt, ledger operations Accountant Accounting tasks Create/approve invoices, view reports Billing Clerk Basic billing Create invoices, receipts Payroll Admin Payroll processing Create/approve salaries, view reports Procurement Officer Purchase management Create/approve POs, manage vendors Resident Apartment resident View own invoices, make payments Guard Security staff Visitor check-in, gate management"},{"location":"system/architecture/security-architecture/#permission-model","title":"Permission Model","text":"<p>Permission Format: <code>{resource}:{action}</code></p> <p>Examples: - <code>invoice:create</code> - <code>invoice:read</code> - <code>invoice:update</code> - <code>invoice:delete</code> - <code>invoice:approve</code> - <code>report:generate</code> - <code>user:manage</code></p> <p>Permission Matrix:</p> Permission System Admin Org Admin Accountant Billing Clerk Resident <code>invoice:create</code> \u2705 \u2705 \u2705 \u2705 \u274c <code>invoice:approve</code> \u2705 \u2705 \u2705 \u274c \u274c <code>invoice:delete</code> \u2705 \u2705 \u274c \u274c \u274c <code>invoice:read</code> \u2705 \u2705 \u2705 \u2705 \u2705 (own only) <code>payment:create</code> \u2705 \u2705 \u2705 \u2705 \u2705 <code>report:generate</code> \u2705 \u2705 \u2705 \u274c \u274c <code>user:manage</code> \u2705 \u2705 \u274c \u274c \u274c"},{"location":"system/architecture/security-architecture/#authorization-implementation","title":"Authorization Implementation","text":"<p>Attribute-Based Authorization:</p> <pre><code>[ApiController]\n[Route(\"api/[controller]\")]\n[Authorize] // Requires authentication\npublic class InvoicesController : ControllerBase\n{\n    [HttpPost]\n    [RequirePermission(\"invoice:create\")] // Custom attribute\n    public async Task&lt;IActionResult&gt; CreateInvoice([FromBody] CreateInvoiceRequest request)\n    {\n        var command = new CreateInvoiceCommand\n        {\n            CustomerId = request.CustomerId,\n            Amount = request.Amount,\n            // Organization ID from JWT claim\n            OrganizationId = User.GetOrganizationId()\n        };\n\n        var result = await _mediator.Send(command);\n        return result.IsSuccess ? Ok(result.Value) : BadRequest(result.Error);\n    }\n\n    [HttpGet(\"{id}\")]\n    [RequirePermission(\"invoice:read\")]\n    public async Task&lt;IActionResult&gt; GetInvoice(Guid id)\n    {\n        var query = new GetInvoiceByIdQuery { InvoiceId = id };\n        var result = await _mediator.Send(query);\n\n        if (result.IsFailure)\n            return NotFound();\n\n        // Check if user has access to this organization's invoice\n        if (!User.HasAccessToOrganization(result.Value.OrganizationId))\n            return Forbid();\n\n        return Ok(result.Value);\n    }\n\n    [HttpDelete(\"{id}\")]\n    [RequirePermission(\"invoice:delete\")]\n    [RequireRole(\"SystemAdmin\", \"OrgAdmin\")] // Multiple roles\n    public async Task&lt;IActionResult&gt; DeleteInvoice(Guid id)\n    {\n        var command = new DeleteInvoiceCommand { InvoiceId = id };\n        var result = await _mediator.Send(command);\n        return result.IsSuccess ? NoContent() : BadRequest(result.Error);\n    }\n}\n</code></pre> <p>Custom Authorization Attributes:</p> <pre><code>public class RequirePermissionAttribute : TypeFilterAttribute\n{\n    public RequirePermissionAttribute(params string[] permissions) \n        : base(typeof(PermissionAuthorizationFilter))\n    {\n        Arguments = new object[] { permissions };\n    }\n}\n\npublic class PermissionAuthorizationFilter : IAuthorizationFilter\n{\n    private readonly string[] _permissions;\n\n    public PermissionAuthorizationFilter(string[] permissions)\n    {\n        _permissions = permissions;\n    }\n\n    public void OnAuthorization(AuthorizationFilterContext context)\n    {\n        var user = context.HttpContext.User;\n\n        if (!user.Identity?.IsAuthenticated ?? true)\n        {\n            context.Result = new UnauthorizedResult();\n            return;\n        }\n\n        var userPermissions = user.Claims\n            .Where(c =&gt; c.Type == \"permissions\")\n            .Select(c =&gt; c.Value)\n            .ToList();\n\n        var hasPermission = _permissions.Any(p =&gt; userPermissions.Contains(p));\n\n        if (!hasPermission)\n        {\n            context.Result = new ForbidResult();\n            _logger.LogWarning(\n                \"User {UserId} denied access. Required permissions: {Permissions}\",\n                user.GetUserId(),\n                string.Join(\", \", _permissions)\n            );\n        }\n    }\n}\n</code></pre> <p>User Extensions:</p> <pre><code>public static class UserExtensions\n{\n    public static Guid GetUserId(this ClaimsPrincipal user)\n    {\n        var claim = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;\n        return Guid.TryParse(claim, out var userId) ? userId : Guid.Empty;\n    }\n\n    public static Guid GetOrganizationId(this ClaimsPrincipal user)\n    {\n        var claim = user.FindFirst(\"https://dhanman.com/org_id\")?.Value;\n        return Guid.TryParse(claim, out var orgId) ? orgId : Guid.Empty;\n    }\n\n    public static List&lt;string&gt; GetPermissions(this ClaimsPrincipal user)\n    {\n        return user.Claims\n            .Where(c =&gt; c.Type == \"permissions\")\n            .Select(c =&gt; c.Value)\n            .ToList();\n    }\n\n    public static bool HasPermission(this ClaimsPrincipal user, string permission)\n    {\n        return user.GetPermissions().Contains(permission);\n    }\n\n    public static bool HasAccessToOrganization(this ClaimsPrincipal user, Guid organizationId)\n    {\n        var userOrgId = user.GetOrganizationId();\n        return userOrgId == organizationId || user.IsInRole(\"SystemAdmin\");\n    }\n}\n</code></pre>"},{"location":"system/architecture/security-architecture/#data-security","title":"Data Security","text":""},{"location":"system/architecture/security-architecture/#multi-tenancy-and-data-isolation","title":"Multi-tenancy and Data Isolation","text":"<p>Row-Level Security via Global Query Filters:</p> <pre><code>public class SalesDbContext : DbContext\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        // Apply global query filter for all tenant-aware entities\n        modelBuilder.Entity&lt;Invoice&gt;().HasQueryFilter(e =&gt; \n            e.OrganizationId == GetCurrentOrganizationId());\n\n        modelBuilder.Entity&lt;Receipt&gt;().HasQueryFilter(e =&gt; \n            e.OrganizationId == GetCurrentOrganizationId());\n\n        modelBuilder.Entity&lt;Customer&gt;().HasQueryFilter(e =&gt; \n            e.OrganizationId == GetCurrentOrganizationId());\n    }\n\n    private Guid GetCurrentOrganizationId()\n    {\n        var user = _httpContextAccessor.HttpContext?.User;\n        return user?.GetOrganizationId() ?? Guid.Empty;\n    }\n}\n</code></pre> <p>Bypass Filter for System Admin:</p> <pre><code>public async Task&lt;List&lt;Invoice&gt;&gt; GetAllInvoicesForSystemAdmin()\n{\n    // Bypass tenant filter for system admin\n    return await _context.Invoices\n        .IgnoreQueryFilters()\n        .ToListAsync();\n}\n</code></pre>"},{"location":"system/architecture/security-architecture/#encryption","title":"Encryption","text":""},{"location":"system/architecture/security-architecture/#data-at-rest","title":"Data at Rest","text":"<p>Database Encryption: - PostgreSQL Transparent Data Encryption (TDE) via pgcrypto - Sensitive columns encrypted using AES-256</p> <pre><code>-- Encrypt sensitive data\nCREATE EXTENSION IF NOT EXISTS pgcrypto;\n\n-- Store encrypted credit card info\nINSERT INTO payment_methods (customer_id, card_number_encrypted)\nVALUES (\n    'customer_id_here',\n    pgp_sym_encrypt('4111111111111111', 'encryption_key')\n);\n\n-- Retrieve and decrypt\nSELECT \n    customer_id,\n    pgp_sym_decrypt(card_number_encrypted::bytea, 'encryption_key') AS card_number\nFROM payment_methods;\n</code></pre> <p>File Storage Encryption: - MinIO server-side encryption (SSE-S3) - Files encrypted before upload for sensitive documents</p>"},{"location":"system/architecture/security-architecture/#data-in-transit","title":"Data in Transit","text":"<p>TLS/SSL Configuration: - TLS 1.2 and 1.3 only - Strong cipher suites (AES-256-GCM) - Perfect Forward Secrecy (PFS) - HSTS headers enforced</p> <p>NGINX SSL Configuration:</p> <pre><code>ssl_protocols TLSv1.2 TLSv1.3;\nssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';\nssl_prefer_server_ciphers on;\nssl_session_timeout 10m;\nssl_session_cache shared:SSL:10m;\nssl_stapling on;\nssl_stapling_verify on;\n\n# HSTS\nadd_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\n</code></pre>"},{"location":"system/architecture/security-architecture/#secrets-management","title":"Secrets Management","text":"<p>Environment Variables:</p> <pre><code># systemd service file\nEnvironment=ConnectionStrings__DefaultConnection=\"Host=...;Password=${DB_PASSWORD}\"\nEnvironment=Auth0__ClientSecret=\"${AUTH0_CLIENT_SECRET}\"\nEnvironment=Brevo__ApiKey=\"${BREVO_API_KEY}\"\n</code></pre> <p>GitHub Secrets: - <code>DB_PASSWORD_PROD</code> - <code>DB_PASSWORD_QA</code> - <code>AUTH0_CLIENT_SECRET_PROD</code> - <code>AUTH0_CLIENT_SECRET_QA</code> - <code>BREVO_API_KEY</code> - <code>SSH_PRIVATE_KEY</code></p> <p>Best Practices: - Never commit secrets to repository - Rotate secrets regularly (every 90 days) - Use different secrets for QA and Production - Limit secret access to necessary personnel - Use strong, randomly generated secrets</p>"},{"location":"system/architecture/security-architecture/#api-security","title":"API Security","text":""},{"location":"system/architecture/security-architecture/#rate-limiting","title":"Rate Limiting","text":"<p>NGINX Configuration:</p> <pre><code># Define rate limit zones\nlimit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;\nlimit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/m;\n\nserver {\n    location /api/ {\n        limit_req zone=api_limit burst=20 nodelay;\n        limit_req_status 429;\n\n        proxy_pass http://backend;\n    }\n\n    location /api/auth/login {\n        limit_req zone=login_limit burst=3 nodelay;\n\n        proxy_pass http://backend;\n    }\n}\n</code></pre> <p>Application-Level Rate Limiting:</p> <pre><code>builder.Services.AddMemoryCache();\nbuilder.Services.AddSingleton&lt;IRateLimitConfiguration, RateLimitConfiguration&gt;();\n\nbuilder.Services.Configure&lt;IpRateLimitOptions&gt;(options =&gt;\n{\n    options.EnableEndpointRateLimiting = true;\n    options.StackBlockedRequests = false;\n    options.HttpStatusCode = 429;\n    options.RealIpHeader = \"X-Real-IP\";\n    options.GeneralRules = new List&lt;RateLimitRule&gt;\n    {\n        new RateLimitRule\n        {\n            Endpoint = \"*\",\n            Period = \"1s\",\n            Limit = 10\n        },\n        new RateLimitRule\n        {\n            Endpoint = \"*\",\n            Period = \"1m\",\n            Limit = 100\n        }\n    };\n});\n\napp.UseIpRateLimiting();\n</code></pre>"},{"location":"system/architecture/security-architecture/#cors-configuration","title":"CORS Configuration","text":"<pre><code>builder.Services.AddCors(options =&gt;\n{\n    options.AddPolicy(\"AllowedOrigins\", policy =&gt;\n    {\n        policy.WithOrigins(\n            \"https://app.dhanman.com\",\n            \"https://qa.app.dhanman.com\"\n        )\n        .AllowAnyMethod()\n        .AllowAnyHeader()\n        .AllowCredentials()\n        .SetIsOriginAllowedToAllowWildcardSubdomains();\n    });\n});\n\napp.UseCors(\"AllowedOrigins\");\n</code></pre>"},{"location":"system/architecture/security-architecture/#security-headers","title":"Security Headers","text":"<pre><code>app.Use(async (context, next) =&gt;\n{\n    context.Response.Headers.Add(\"X-Content-Type-Options\", \"nosniff\");\n    context.Response.Headers.Add(\"X-Frame-Options\", \"SAMEORIGIN\");\n    context.Response.Headers.Add(\"X-XSS-Protection\", \"1; mode=block\");\n    context.Response.Headers.Add(\"Referrer-Policy\", \"strict-origin-when-cross-origin\");\n    context.Response.Headers.Add(\"Content-Security-Policy\", \n        \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'\");\n\n    await next();\n});\n</code></pre>"},{"location":"system/architecture/security-architecture/#input-validation","title":"Input Validation","text":"<p>FluentValidation:</p> <pre><code>public class CreateInvoiceCommandValidator : AbstractValidator&lt;CreateInvoiceCommand&gt;\n{\n    public CreateInvoiceCommandValidator()\n    {\n        RuleFor(x =&gt; x.CustomerId)\n            .NotEmpty().WithMessage(\"Customer ID is required\")\n            .Must(BeValidGuid).WithMessage(\"Invalid Customer ID format\");\n\n        RuleFor(x =&gt; x.Amount)\n            .GreaterThan(0).WithMessage(\"Amount must be positive\")\n            .LessThanOrEqualTo(1000000).WithMessage(\"Amount exceeds maximum\");\n\n        RuleFor(x =&gt; x.InvoiceNumber)\n            .NotEmpty().WithMessage(\"Invoice number is required\")\n            .Matches(@\"^INV-\\d{6}-\\d{4}$\").WithMessage(\"Invalid invoice number format\")\n            .MaximumLength(50).WithMessage(\"Invoice number too long\");\n\n        RuleFor(x =&gt; x.LineItems)\n            .NotEmpty().WithMessage(\"At least one line item required\")\n            .Must(items =&gt; items.Count &lt;= 100).WithMessage(\"Too many line items\");\n    }\n\n    private bool BeValidGuid(Guid guid)\n    {\n        return guid != Guid.Empty;\n    }\n}\n</code></pre> <p>SQL Injection Prevention:</p> <p>Always use parameterized queries via Entity Framework Core:</p> <pre><code>// \u2705 SAFE: Parameterized query\nvar invoices = await _context.Invoices\n    .Where(i =&gt; i.CustomerId == customerId)\n    .ToListAsync();\n\n// \u274c DANGEROUS: String concatenation\n// NEVER DO THIS:\n// var sql = $\"SELECT * FROM Invoices WHERE CustomerId = '{customerId}'\";\n</code></pre>"},{"location":"system/architecture/security-architecture/#audit-logging","title":"Audit Logging","text":""},{"location":"system/architecture/security-architecture/#audit-trail","title":"Audit Trail","text":"<p>Audit Log Entity:</p> <pre><code>public class AuditLog\n{\n    public Guid Id { get; set; }\n    public DateTime Timestamp { get; set; }\n    public Guid UserId { get; set; }\n    public string UserName { get; set; }\n    public Guid OrganizationId { get; set; }\n    public string Action { get; set; } // CREATE, UPDATE, DELETE, READ\n    public string EntityType { get; set; } // Invoice, PurchaseOrder, etc.\n    public Guid EntityId { get; set; }\n    public string Changes { get; set; } // JSON of changes\n    public string IpAddress { get; set; }\n    public string UserAgent { get; set; }\n}\n</code></pre> <p>Audit Interceptor:</p> <pre><code>public class AuditInterceptor : SaveChangesInterceptor\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    public override async ValueTask&lt;InterceptionResult&lt;int&gt;&gt; SavingChangesAsync(\n        DbContextEventData eventData,\n        InterceptionResult&lt;int&gt; result,\n        CancellationToken cancellationToken = default)\n    {\n        var context = eventData.Context;\n        if (context == null) return result;\n\n        var entries = context.ChangeTracker.Entries()\n            .Where(e =&gt; e.State == EntityState.Added || \n                       e.State == EntityState.Modified || \n                       e.State == EntityState.Deleted)\n            .ToList();\n\n        foreach (var entry in entries)\n        {\n            var auditLog = new AuditLog\n            {\n                Timestamp = DateTime.UtcNow,\n                UserId = GetCurrentUserId(),\n                UserName = GetCurrentUserName(),\n                OrganizationId = GetCurrentOrganizationId(),\n                Action = entry.State.ToString(),\n                EntityType = entry.Entity.GetType().Name,\n                EntityId = GetEntityId(entry),\n                Changes = SerializeChanges(entry),\n                IpAddress = GetClientIpAddress(),\n                UserAgent = GetUserAgent()\n            };\n\n            context.Set&lt;AuditLog&gt;().Add(auditLog);\n        }\n\n        return await base.SavingChangesAsync(eventData, result, cancellationToken);\n    }\n}\n</code></pre>"},{"location":"system/architecture/security-architecture/#security-event-logging","title":"Security Event Logging","text":"<p>Structured Logging with Serilog:</p> <pre><code>// Failed login attempt\n_logger.LogWarning(\n    \"Failed login attempt for user {Username} from IP {IpAddress}\",\n    username,\n    ipAddress\n);\n\n// Unauthorized access\n_logger.LogWarning(\n    \"Unauthorized access attempt: User {UserId} tried to access {Resource} with insufficient permissions\",\n    userId,\n    resourcePath\n);\n\n// Suspicious activity\n_logger.LogWarning(\n    \"Suspicious activity detected: User {UserId} attempted {Action} {Count} times in {TimeSpan}\",\n    userId,\n    action,\n    attemptCount,\n    timeSpan\n);\n</code></pre>"},{"location":"system/architecture/security-architecture/#security-monitoring","title":"Security Monitoring","text":""},{"location":"system/architecture/security-architecture/#metrics-to-track","title":"Metrics to Track","text":"<ol> <li>Authentication Failures</li> <li>Failed login attempts per user</li> <li>Failed login attempts per IP</li> <li> <p>Account lockouts</p> </li> <li> <p>Authorization Violations</p> </li> <li>Unauthorized access attempts</li> <li>Permission denied events</li> <li> <p>Privilege escalation attempts</p> </li> <li> <p>Suspicious Patterns</p> </li> <li>High request rates from single IP</li> <li>Multiple failed authentications</li> <li>Access to sensitive endpoints</li> <li>Unusual access times</li> </ol>"},{"location":"system/architecture/security-architecture/#alerting-rules","title":"Alerting Rules","text":"<pre><code># Example Grafana alert rules\n- name: SecurityAlerts\n  rules:\n    - alert: HighFailedLoginRate\n      expr: rate(failed_login_attempts[5m]) &gt; 10\n      for: 5m\n      labels:\n        severity: warning\n      annotations:\n        summary: \"High failed login rate detected\"\n        description: \"More than 10 failed login attempts per minute\"\n\n    - alert: SuspiciousIPActivity\n      expr: count by (ip_address) (unauthorized_access) &gt; 5\n      for: 10m\n      labels:\n        severity: critical\n      annotations:\n        summary: \"Suspicious IP activity\"\n        description: \"IP {{ $labels.ip_address }} has multiple unauthorized access attempts\"\n</code></pre>"},{"location":"system/architecture/security-architecture/#compliance","title":"Compliance","text":""},{"location":"system/architecture/security-architecture/#gdpr-considerations","title":"GDPR Considerations","text":"<ul> <li>Data minimization: Collect only necessary data</li> <li>Right to access: API endpoints for users to retrieve their data</li> <li>Right to deletion: Soft delete with anonymization</li> <li>Data portability: Export user data in JSON format</li> <li>Consent management: Track user consent for data processing</li> </ul>"},{"location":"system/architecture/security-architecture/#audit-requirements","title":"Audit Requirements","text":"<ul> <li>Immutable audit logs: Cannot be modified or deleted</li> <li>Retention: 7 years for financial records</li> <li>Access logs: Who accessed what and when</li> <li>Change tracking: All modifications to financial data</li> </ul>"},{"location":"system/architecture/security-architecture/#best-practices","title":"Best Practices","text":""},{"location":"system/architecture/security-architecture/#dos","title":"Do's \u2705","text":"<ul> <li>Use Auth0 for authentication</li> <li>Implement role-based access control</li> <li>Validate all inputs</li> <li>Use parameterized queries</li> <li>Encrypt sensitive data</li> <li>Implement rate limiting</li> <li>Log all security events</li> <li>Use HTTPS everywhere</li> <li>Implement CORS properly</li> <li>Set security headers</li> <li>Rotate secrets regularly</li> <li>Use strong passwords/keys</li> <li>Implement MFA for admin accounts</li> </ul>"},{"location":"system/architecture/security-architecture/#donts","title":"Don'ts \u274c","text":"<ul> <li>Don't store passwords in plain text</li> <li>Don't trust client input</li> <li>Don't expose sensitive data in logs</li> <li>Don't use weak encryption</li> <li>Don't skip authentication/authorization checks</li> <li>Don't ignore security updates</li> <li>Don't commit secrets to repository</li> <li>Don't use deprecated cryptographic algorithms</li> <li>Don't disable SSL certificate validation</li> </ul>"},{"location":"system/architecture/security-architecture/#security-checklist","title":"Security Checklist","text":""},{"location":"system/architecture/security-architecture/#application-security","title":"Application Security","text":"<ul> <li>[ ] JWT validation implemented</li> <li>[ ] Permission-based authorization</li> <li>[ ] Input validation on all endpoints</li> <li>[ ] SQL injection prevention (parameterized queries)</li> <li>[ ] XSS prevention (output encoding)</li> <li>[ ] CSRF protection (SameSite cookies)</li> <li>[ ] Rate limiting configured</li> <li>[ ] Security headers set</li> </ul>"},{"location":"system/architecture/security-architecture/#infrastructure-security","title":"Infrastructure Security","text":"<ul> <li>[ ] HTTPS/TLS enabled</li> <li>[ ] Firewall rules configured</li> <li>[ ] SSH key-based authentication only</li> <li>[ ] Regular security updates</li> <li>[ ] Database access restricted</li> <li>[ ] Backups encrypted</li> <li>[ ] Secrets managed securely</li> </ul>"},{"location":"system/architecture/security-architecture/#monitoring-logging","title":"Monitoring &amp; Logging","text":"<ul> <li>[ ] Audit logging enabled</li> <li>[ ] Security event logging</li> <li>[ ] Failed login tracking</li> <li>[ ] Unauthorized access alerts</li> <li>[ ] Regular log review</li> </ul>"},{"location":"system/architecture/security-architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>Developer Onboarding</li> <li>Deployment Security</li> <li>API Guidelines</li> </ul>"},{"location":"system/architecture/security-architecture/#summary","title":"Summary","text":"<p>Dhanman's security architecture provides: - Strong authentication via Auth0 with JWT tokens - Fine-grained authorization with RBAC and permissions - Data protection through encryption and multi-tenancy isolation - API security with rate limiting and input validation - Comprehensive audit logging for compliance - Security monitoring and alerting</p> <p>The architecture follows security best practices and industry standards to protect sensitive financial data and user information.</p>"},{"location":"system/architecture/adr/0001-use-postgresql-18/","title":"ADR 0001: Use PostgreSQL 18 as Primary Database","text":""},{"location":"system/architecture/adr/0001-use-postgresql-18/#status","title":"Status","text":"<p>\u2705 Accepted - Implemented across all services</p>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#context","title":"Context","text":"<p>Dhanman ERP requires a robust, scalable database system to store: - Financial transactions and ledger entries (ACID compliance critical) - Customer, vendor, and employee records - Purchase orders, invoices, and bills - Payroll and attendance data - Community and facility management data - Audit logs and system events</p>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#requirements","title":"Requirements","text":"<ol> <li>ACID Compliance: Financial data requires strong transactional guarantees</li> <li>Relational Model: Complex relationships between entities (invoices \u2194 line items, POs \u2194 GRNs)</li> <li>JSON Support: Flexible schema for extensible data (custom fields, metadata)</li> <li>Performance: Handle thousands of transactions per day</li> <li>Multi-tenancy: Support organization-level data isolation</li> <li>Open Source: No licensing costs, community support</li> <li>Proven Technology: Battle-tested in production environments</li> <li>Developer Familiarity: Team expertise in SQL</li> </ol>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#decision","title":"Decision","text":"<p>We will use PostgreSQL 18 as the primary database for all microservices with streaming replication for high availability.</p>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#key-factors","title":"Key Factors","text":""},{"location":"system/architecture/adr/0001-use-postgresql-18/#1-acid-compliance","title":"1. ACID Compliance","text":"<p>PostgreSQL provides full ACID compliance, critical for financial data: - Atomicity: All ledger entries succeed or fail together - Consistency: Database constraints enforce business rules - Isolation: Concurrent transactions don't interfere - Durability: Committed data persists even with system failures</p>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#2-advanced-features","title":"2. Advanced Features","text":"<ul> <li>JSON/JSONB: Store flexible data structures without schema changes</li> <li>Full-Text Search: Search invoices, POs, and documents</li> <li>Array Types: Store lists of values efficiently</li> <li>Procedural Extensions (PL/pgSQL): Complex business logic in database</li> <li>Generated Columns: Computed values (e.g., invoice total)</li> <li>Partitioning: Split large tables by date or tenant</li> <li>CTEs and Window Functions: Complex analytical queries</li> </ul>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#3-performance","title":"3. Performance","text":"<ul> <li>Excellent query optimizer: Efficient execution plans</li> <li>Indexes: B-tree, Hash, GiST, GIN for different use cases</li> <li>Parallel queries: Utilize multiple CPU cores</li> <li>Connection pooling: Efficient resource usage</li> <li>Materialized views: Pre-computed aggregations</li> </ul>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#4-scalability-high-availability","title":"4. Scalability &amp; High Availability","text":"<ul> <li>Streaming replication: Real-time data replication for HA</li> <li>Read replicas: Scale read operations</li> <li>Partitioning: Manage large tables efficiently</li> <li>Logical replication: Flexible replication topologies</li> </ul>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#implementation-details","title":"Implementation Details","text":""},{"location":"system/architecture/adr/0001-use-postgresql-18/#database-per-service","title":"Database Per Service","text":"<p>Each microservice has its own database for data isolation:</p> <pre><code>Production:\n- prod-dhanman-common\n- prod-dhanman-sales\n- prod-dhanman-purchase\n- prod-dhanman-payroll\n- prod-dhanman-community\n- prod-dhanman-inventory\n\nQA:\n- qa-dhanman-common\n- qa-dhanman-sales\n- qa-dhanman-purchase\n- qa-dhanman-payroll\n- qa-dhanman-community\n- qa-dhanman-inventory\n</code></pre>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#postgresql-specific-features-used","title":"PostgreSQL-Specific Features Used","text":"<ul> <li>JSONB columns for flexible metadata</li> <li>Array types for lists (tags, attachments)</li> <li>Full-text search for document searching</li> <li>Generated columns for computed fields</li> <li>PL/pgSQL functions for complex calculations</li> <li>Streaming replication for high availability</li> </ul>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#consequences","title":"Consequences","text":""},{"location":"system/architecture/adr/0001-use-postgresql-18/#positive","title":"Positive","text":"<p>\u2705 ACID compliance ensures data integrity for financial transactions \u2705 Rich feature set (JSON, arrays, FTS) reduces need for external services \u2705 Excellent performance for OLTP workloads \u2705 Strong community and extensive documentation \u2705 Cost-effective - no licensing fees \u2705 Cross-platform - runs on Linux in production \u2705 Great .NET support via Entity Framework Core and Npgsql \u2705 High availability via streaming replication  </p>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#negative","title":"Negative","text":"<p>\u26a0\ufe0f Operational overhead - Requires versioned schema sync across QA/Prod using nightly jobs \u26a0\ufe0f Vertical scaling limits - Eventual need for horizontal scaling \u26a0\ufe0f Replication lag - Streaming replication introduces small delays  </p>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#mitigation-strategies","title":"Mitigation Strategies","text":"<p>For Schema Sync: - Automated nightly sync jobs between QA and Prod schemas - EF Core migrations tracked in version control - Validation scripts to ensure schema consistency</p> <p>For Vertical Scaling: - Plan for read replicas when needed - Implement caching layer (Redis) for frequent reads - Consider partitioning for large tables</p> <p>For Replication Lag: - Monitor replication lag metrics - Use synchronous replication for critical operations if needed - Design application to handle eventual consistency</p>"},{"location":"system/architecture/adr/0001-use-postgresql-18/#related-documentation","title":"Related Documentation","text":"<ul> <li>Database Setup</li> <li>Entity Framework Core</li> <li>Multi-tenancy Strategy</li> </ul> <p>Date: January 2024 Authors: Architecture Team Status: Accepted and Implemented</p>"},{"location":"system/architecture/adr/Sequential_Scheduling_Execution/","title":"Architecture Decision Record (ADR)","text":""},{"location":"system/architecture/adr/Sequential_Scheduling_Execution/#decision-id-001","title":"Decision ID: 001","text":"<p>Date: 2025-10-16 Status: Proposed Context: Multi-Tenant Scheduling and Task Execution</p>"},{"location":"system/architecture/adr/Sequential_Scheduling_Execution/#title","title":"Title:","text":"<p>Sequential Scheduling and Execution for Multi-Tenant Jobs</p>"},{"location":"system/architecture/adr/Sequential_Scheduling_Execution/#decision","title":"Decision","text":"<p>We will implement a centralized scheduler that triggers jobs for multiple tenants sequentially, ensuring that each job type is processed in isolation to avoid overlapping resource usage and database contention. </p> <p>When a scheduler command is triggered, the following flow will occur:</p> <ol> <li>Centralized Command Trigger: A command (e.g., <code>RunSchedulerCommand</code>) will be fired to execute tasks for the specified date (<code>RunDateUtc</code>).</li> <li>Schedule Types: The service will fetch all schedule types (e.g., Post Recurring Invoices, Reconcile Payments, etc.) that need to run for the given date.</li> <li>Organization Processing: For each schedule type, the service will loop over all organizations that have a scheduled task for that date.</li> <li>Sequential Execution: The tasks will be executed sequentially \u2014 ensuring that:<ul> <li>The first task type (e.g., Sales) is executed.</li> <li>After a predefined delay (e.g., 5 minutes), the next task type (e.g., Purchase) is executed.</li> <li>This continues for each schedule type, preventing database load spikes and ensuring smooth processing.</li> </ul> </li> </ol>"},{"location":"system/architecture/adr/Sequential_Scheduling_Execution/#rationale","title":"Rationale","text":"<ul> <li> <p>Load Distribution: By executing tasks sequentially, we avoid overwhelming our shared databases with multiple concurrent heavy queries and updates, ensuring that resource usage is evenly distributed across the day.</p> </li> <li> <p>Simpler Coordination: Staggering job execution reduces the complexity of handling race conditions or conflicts between concurrently executing tasks across multiple services (Sales, Purchase, Accounting).</p> </li> <li> <p>Improved Observability and Control: Running tasks one after another gives us better tracking and logging for each task, allowing us to handle failures gracefully and retry only specific tasks instead of re-running the entire schedule.</p> </li> <li> <p>Minimal Overhead: The system will only trigger one scheduled job per module per day (Sales, Purchase, Accounting, etc.), reducing the overhead of managing multiple job instances for each organization.</p> </li> </ul>"},{"location":"system/architecture/adr/Sequential_Scheduling_Execution/#consequences","title":"Consequences","text":"<ol> <li>Increased Control Over Execution: We gain more control over when each task is executed, making it easier to adjust the schedule later if needed.</li> <li>Simpler Debugging: Since jobs are staggered, we can focus on troubleshooting specific tasks without worrying about concurrency issues.</li> <li>Performance Considerations: The sequential execution model ensures that there is no performance degradation due to simultaneous job execution. However, some scheduling delays (due to the sequential execution model) might be experienced for specific job types.</li> <li>Future Scalability: While this design works well for today\u2019s requirements, future optimization could be considered (e.g., dynamic parallelization or partitioning jobs per service) to handle larger workloads.</li> <li>Job Timeout Handling: If a job takes too long to process, it could delay subsequent tasks. Timeouts and retries should be considered for ensuring timely completion.</li> </ol>"},{"location":"system/architecture/adr/Sequential_Scheduling_Execution/#alternatives-considered","title":"Alternatives Considered","text":"<ol> <li>Simultaneous Execution </li> <li>Pros: All tasks would execute at the same time, reducing total runtime.  </li> <li> <p>Cons: This could overwhelm the database, especially in a multi-tenant system where many organizations are executing heavy jobs simultaneously. This would increase the risk of resource contention, slow queries, and data conflicts.</p> </li> <li> <p>Single Global Scheduler Job </p> </li> <li>Pros: One single job triggers everything (e.g., a <code>RunAllSchedulersCommand</code>), and the orchestration would be centralized.  </li> <li>Cons: It would still have to loop over every schedule and organization in sequence, similar to our chosen solution, and might introduce additional complexity if new schedule types are added in the future.</li> </ol>"},{"location":"system/architecture/adr/Sequential_Scheduling_Execution/#related-decisions","title":"Related Decisions","text":"<ul> <li>Use of Hangfire for Scheduling: We are using Hangfire for scheduling the periodic jobs (recurring invoices, reconciliation, etc.).</li> <li>MassTransit for Command and Event Handling: We will publish the <code>RunSchedulerCommand</code> to the respective consumers (Sales, Purchase, Accounting) using MassTransit.</li> </ul>"},{"location":"system/architecture/adr/Sequential_Scheduling_Execution/#diagram","title":"Diagram","text":"<pre><code>sequenceDiagram\n    participant SchedulerService\n    participant SalesService\n    participant PurchaseService\n    participant AccountingService\n    participant DB\n\n    SchedulerService-&gt;&gt;SalesService: RunSchedulerCommand (today's date)\n    SalesService-&gt;&gt;DB: Fetch all schedules for today (Post Recurring Invoices, Reconcile Payments, etc.)\n    SalesService-&gt;&gt;SalesService: Loop over each schedule type\n    SalesService-&gt;&gt;DB: Get all organizations for schedule type\n    SalesService-&gt;&gt;SalesService: Loop over organizations\n    SalesService-&gt;&gt;SalesService: Execute task (e.g., Post Recurring Invoices for each org)\n    SalesService-&gt;&gt;SalesService: Move to next schedule (Reconcile Payments)\n    SalesService-&gt;&gt;DB: Get all organizations for Reconcile Payments\n    SalesService-&gt;&gt;SalesService: Loop over organizations and execute task\n    SalesService-&gt;&gt;SchedulerService: Finish executing all tasks\n\n    SchedulerService-&gt;&gt;PurchaseService: RunSchedulerCommand (today's date)\n    PurchaseService-&gt;&gt;DB: Fetch all schedules for today (Post Recurring Bills, etc.)\n    PurchaseService-&gt;&gt;PurchaseService: Loop over each schedule type\n    PurchaseService-&gt;&gt;DB: Get all organizations for schedule type\n    PurchaseService-&gt;&gt;PurchaseService: Loop over organizations\n    PurchaseService-&gt;&gt;PurchaseService: Execute task (e.g., Post Recurring Bills)\n    PurchaseService-&gt;&gt;PurchaseService: Move to next schedule type\n    PurchaseService-&gt;&gt;SchedulerService: Finish executing all tasks\n\n    SchedulerService-&gt;&gt;AccountingService: RunSchedulerCommand (today's date)\n    AccountingService-&gt;&gt;DB: Fetch all schedules for today (Reconcile Payments)\n    AccountingService-&gt;&gt;AccountingService: Loop over each schedule type\n    AccountingService-&gt;&gt;DB: Get all organizations for schedule type\n    AccountingService-&gt;&gt;AccountingService: Loop over organizations and execute task\n    AccountingService-&gt;&gt;SchedulerService: Finish executing all tasks\n</code></pre>"},{"location":"system/architecture/adr/Sequential_Scheduling_Execution/#next-steps","title":"Next Steps","text":"<ol> <li>Development: Implement the <code>RunSchedulerCommand</code> with the proper command structure and derived classes for each module (Sales, Purchase, Accounting, etc.).</li> <li>Testing: Test with a few different schedule types and ensure the sequential execution and handling of large numbers of organizations works as expected.</li> <li>Monitoring: Add proper logging and monitoring around the execution time of each schedule type to ensure that no task takes too long and delays subsequent tasks.</li> </ol>"},{"location":"system/architecture/adr/Sequential_Scheduling_Execution/#decision-made-by","title":"Decision Made By","text":"<ul> <li>Bharat (System Architect, B2A Technologies Pvt. Ltd.)</li> </ul>"},{"location":"system/architecture/diagrams/","title":"Architecture Diagrams Overview","text":"<p>This document provides an overview of the architecture diagrams used within the project, detailing the various types of diagrams, the tools used to create them, and the standards we adhere to.</p>"},{"location":"system/architecture/diagrams/#types-of-diagrams","title":"Types of Diagrams","text":"<ol> <li> <p>Infrastructure Topology    This diagram illustrates the physical and logical layout of the infrastructure, including servers, databases, and network components.</p> </li> <li> <p>Application Architecture    This diagram outlines the structure of the application, including its components, modules, and the relationships between them.</p> </li> <li> <p>Data Flow Diagrams    These diagrams represent the flow of data within the system, showing how data is processed and transferred between different components.</p> </li> <li> <p>CQRS Patterns    Command Query Responsibility Segregation (CQRS) patterns help to separate the read and write operations of the application, optimizing performance and scalability.</p> </li> <li> <p>Container Diagrams    Container diagrams visualize the individual containers (applications, services, databases) within the architecture and their interactions.</p> </li> </ol>"},{"location":"system/architecture/diagrams/#tools-used","title":"Tools Used","text":"<ul> <li> <p>Lucidchart   A web-based diagramming application used for creating various architecture diagrams.</p> </li> <li> <p>Draw.io   A free tool for creating diagrams that can be integrated with various platforms.</p> </li> <li> <p>Microsoft Visio   A diagramming tool used for creating detailed and professional diagrams.</p> </li> </ul>"},{"location":"system/architecture/diagrams/#standards","title":"Standards","text":"<p>We follow industry best practices for creating architecture diagrams, ensuring that: - Diagrams are clear, concise, and easy to understand. - Standard symbols and notations are used for consistency. - Diagrams are regularly updated to reflect the current architecture.</p> <p>This document is a living document and will be updated as our architecture evolves.</p>"},{"location":"system/architecture/diagrams/source/","title":"dhanman-docs","text":"<p>wiki</p> <p>mkdocs gh-deploy</p> <p>devdhanman B@dhi$123</p>"},{"location":"system/architecture/diagrams/source/#dhanman-archiecture","title":"dhanman archiecture","text":""},{"location":"system/architecture/diagrams/source/01-infrastructure-topology-future/","title":"01 infrastructure topology future","text":"<pre><code>graph TD;\n    subgraph Production [Production Environment]\n        direction TB\n        A[RabbitMQ] --&gt;|connects to| B[MinIO]\n        B --&gt;|interacts with| C[dhanman-common]\n        B --&gt;|interacts with| D[dhanman-myhome]\n        B --&gt;|interacts with| E[dhanman-sales]\n        B --&gt;|interacts with| F[dhanman-purchase]\n        B --&gt;|interacts with| G[dhanman-inventory]\n        B --&gt;|interacts with| H[dhanman-payroll]\n\n        style A fill:#28a745,stroke:#333,stroke-width:2px;\n        style B fill:#28a745,stroke:#333,stroke-width:2px;\n        style C fill:#28a745,stroke:#333,stroke-width:2px;\n        style D fill:#28a745,stroke:#333,stroke-width:2px;\n        style E fill:#28a745,stroke:#333,stroke-width:2px;\n        style F fill:#28a745,stroke:#333,stroke-width:2px;\n        style G fill:#28a745,stroke:#333,stroke-width:2px;\n        style H fill:#28a745,stroke:#333,stroke-width:2px;\n\n        IP[51.79.156.217]:::ip\n    end\n\n    subgraph QA [QA Environment]\n        direction TB\n        I[RabbitMQ] --&gt;|connects to| J[MinIO]\n        J --&gt;|interacts with| K[dhanman-common]\n        J --&gt;|interacts with| L[dhanman-myhome]\n        J --&gt;|interacts with| M[dhanman-sales]\n        J --&gt;|interacts with| N[dhanman-purchase]\n        J --&gt;|interacts with| O[dhanman-inventory]\n        J --&gt;|interacts with| P[dhanman-payroll]\n\n        style I fill:#007bff,stroke:#333,stroke-width:2px;\n        style J fill:#007bff,stroke:#333,stroke-width:2px;\n        style K fill:#007bff,stroke:#333,stroke-width:2px;\n        style L fill:#007bff,stroke:#333,stroke-width:2px;\n        style M fill:#007bff,stroke:#333,stroke-width:2px;\n        style N fill:#007bff,stroke:#333,stroke-width:2px;\n        style O fill:#007bff,stroke:#333,stroke-width:2px;\n        style P fill:#007bff,stroke:#333,stroke-width:2px;\n\n        IP[54.37.159.71]:::ip\n    end\n\n    subgraph Monitoring [Monitoring Stack]\n        direction TB\n        Q[Grafana]\n        R[Loki]\n        S[Netdata]\n\n        style Q fill:#6c757d,stroke:#333,stroke-width:2px;\n        style R fill:#6c757d,stroke:#333,stroke-width:2px;\n        style S fill:#6c757d,stroke:#333,stroke-width:2px;\n    end\n\n    subgraph External [External Services]\n        direction TB\n        T[Auth0]\n        U[Zoho]\n        V[Brevo]\n        W[GitHub]\n        X[Backblaze B2]\n\n        style T fill:#fd7e14,stroke:#333,stroke-width:2px;\n        style U fill:#fd7e14,stroke:#333,stroke-width:2px;\n        style V fill:#fd7e14,stroke:#333,stroke-width:2px;\n        style W fill:#fd7e14,stroke:#333,stroke-width:2px;\n        style X fill:#fd7e14,stroke:#333,stroke-width:2px;\n    end\n\n    classDef ip fill:#fff,stroke:#333,stroke-width:1px,stroke-dasharray: 5 5;\n</code></pre>"},{"location":"system/architecture/diagrams/source/02-application-architecture/","title":"Application Architecture \u2013 Dhanman Microservices","text":"<p>```mermaid graph TB     subgraph Shared[\"Shared Components\"]         RabbitMQ[\"\ud83d\udc07 RabbitMQEvents / Commands\"]         MinIO[\"\ud83d\udce6 MinIODocument Storage\"]         PG[\"\ud83d\uddc4\ufe0f PostgreSQL 18Databases\"]     end</p> <pre><code>subgraph Services[\"Microservices\"]\n    Common[\"\ud83e\udde9 Dhanman.Common&lt;br/&gt;Auth, Multitenancy\"]\n    Community[\"\ud83c\udfd8\ufe0f Dhanman.Community&lt;br/&gt;MyHome, Visitors\"]\n    Inventory[\"\ud83d\udce6 Dhanman.Inventory&lt;br/&gt;Assets, Stock\"]\n    Payroll[\"\ud83d\udcb0 Dhanman.Payroll&lt;br/&gt;Salaries, Employees\"]\n    Purchase[\"\ud83d\uded2 Dhanman.Purchase&lt;br/&gt;Vendors, Orders\"]\n    Sales[\"\ud83d\udcc8 Dhanman.Sales&lt;br/&gt;Invoices, Receipts\"]\nend\n\nsubgraph Clients[\"Clients\"]\n    WebApp[\"\ud83d\udcbb dhanman-react-ts\"]\n    Mobile[\"\ud83d\udcf1 Resident / Guard Apps\"]\nend\n\nWebApp --&gt;|REST APIs| Services\nMobile --&gt;|API + Auth0| Common\nCommon --&gt; RabbitMQ\nServices --&gt; RabbitMQ\nServices --&gt; MinIO\nServices --&gt; PG\nRabbitMQ --&gt; Common\n</code></pre>"},{"location":"system/architecture/diagrams/source/03-data-replication-flow/","title":"Data Replication &amp; Refresh Flow","text":"<p>```mermaid sequenceDiagram     participant ProdDB as PostgreSQL 18 (Prod)     participant Mirror as PostgreSQL 18 (QA Mirror)     participant Jenkins as Jenkins CI/CD     participant QA as PostgreSQL 18 (QA Main)     participant B2 as Backblaze B2</p> <pre><code>ProdDB-&gt;&gt;Mirror: WAL Streaming Replication (Async)\nJenkins-&gt;&gt;ProdDB: pg_dump (Nightly / On-demand)\nProdDB--&gt;&gt;B2: Upload Dump (Encrypted)\nJenkins-&gt;&gt;QA: SCP &amp; Restore Dump\nQA--&gt;&gt;B2: Archive old dumps\nNote over Jenkins,QA: QA Refresh Job executes restore, reindexes DB, and resets permissions.\n</code></pre>"},{"location":"system/architecture/diagrams/source/04-cicd-deployment-pipeline/","title":"CI/CD Deployment Pipeline","text":"<p>```mermaid sequenceDiagram     participant Dev as Developer     participant GitHub as GitHub Repo     participant Jenkins as Jenkins CI/CD     participant Raigad as Ansible (WSL)     participant QA as QA Server     participant PROD as Prod Server</p> <pre><code>Dev-&gt;&gt;GitHub: Push code (main / release branch)\nGitHub-&gt;&gt;Jenkins: Webhook trigger\nJenkins-&gt;&gt;Jenkins: Build &amp; publish artifacts\nJenkins-&gt;&gt;Raigad: Invoke Ansible playbook\nRaigad-&gt;&gt;QA: Deploy QA build\nRaigad-&gt;&gt;PROD: Deploy Production build (manual approval)\nJenkins-&gt;&gt;QA: Run smoke tests\nJenkins-&gt;&gt;B2: Upload build logs &amp; artifacts\n</code></pre>"},{"location":"system/architecture/diagrams/source/05-monitoring-observability/","title":"05 monitoring observability","text":"<p>````markdown</p>"},{"location":"system/architecture/diagrams/source/05-monitoring-observability/#monitoring-observability-stack","title":"Monitoring &amp; Observability Stack","text":"<p>Dhanman uses a comprehensive monitoring stack for system health, logs, and metrics.</p> <p>```mermaid graph TB     subgraph Applications[\"\ud83d\udda5\ufe0f Applications\"]         ProdServices[\"Production Servicesdhanman-\"]         QAServices[\"QA Servicesqa-dhanman-\"]     end</p> <pre><code>subgraph LogAggregation[\"\ud83d\udcdd Log Aggregation\"]\n    Promtail[\"Promtail&lt;br/&gt;Log Shipper\"]\n    Loki[\"Loki&lt;br/&gt;Log Storage\"]\nend\n\nsubgraph Visualization[\"\ud83d\udcca Visualization\"]\n    Grafana[\"Grafana&lt;br/&gt;Dashboards\"]\nend\n\nsubgraph SystemMetrics[\"\ud83d\udcc8 System Metrics\"]\n    Netdata[\"Netdata&lt;br/&gt;System Monitor\"]\n    NetdataCloud[\"Netdata Cloud&lt;br/&gt;Centralized Metrics\"]\nend\n\nsubgraph Uptime[\"\u2705 Uptime Monitoring\"]\n    UptimeKuma[\"Uptime Kuma&lt;br/&gt;Service Health Checks\"]\nend\n\nProdServices --&gt;|\"Logs to file\"| Promtail\nQAServices --&gt;|\"Logs to file\"| Promtail\nPromtail --&gt;|\"Ships logs\"| Loki\nLoki --&gt;|\"Query logs\"| Grafana\n\nProdServices --&gt;|\"System metrics\"| Netdata\nQAServices --&gt;|\"System metrics\"| Netdata\nNetdata --&gt;|\"Aggregate\"| NetdataCloud\n\nUptimeKuma --&gt;|\"HTTP checks\"| ProdServices\nUptimeKuma --&gt;|\"HTTP checks\"| QAServices\n\nstyle Grafana fill:#FF6C37,stroke:#333,stroke-width:3px\nstyle Loki fill:#FDB714,stroke:#333,stroke-width:3px\nstyle Netdata fill:#00AB44,stroke:#333,stroke-width:3px\nstyle UptimeKuma fill:#5CDD8B,stroke:#333,stroke-width:3px\n</code></pre>"},{"location":"system/architecture/modules/inventory/","title":"Water Tanker Delivery Tracking Feature","text":""},{"location":"system/architecture/modules/inventory/#summary","title":"Summary","text":"<p>Many societies rely on external water tankers to supply water intermittently. To enable accurate billing and consumption tracking, this feature allows society managers to record each tanker delivery with essential details such as vendor, date, time, tanker capacity, and actual water received.</p> <p>This system enables:</p> <ul> <li>Detailed tracking of tanker deliveries (multiple per day if needed).</li> <li>Calculation of total water received per period for billing.</li> <li>Reporting on tanker usage trends and vendor performance.</li> </ul>"},{"location":"system/architecture/modules/inventory/#functional-requirements","title":"Functional Requirements","text":"<ul> <li>Capture vendor details linked to each tanker delivery.</li> <li>Record date and time of each tanker delivery.</li> <li>Log tanker capacity (expected liters) and actual liters received.</li> <li>Support multiple tanker entries in a single form submission.</li> <li>Provide monthly or custom period reports on number of tankers and total liters delivered.</li> <li>Validate actual liters \u2264 tanker capacity.</li> <li>Allow editing and deletion of tanker delivery records.</li> </ul>"},{"location":"system/architecture/modules/inventory/#database-design","title":"Database Design","text":""},{"location":"system/architecture/modules/inventory/#table-water_tanker_deliveries","title":"Table: <code>water_tanker_deliveries</code>","text":"Column Type Description <code>id</code> SERIAL PRIMARY KEY Unique record identifier <code>company_id</code> UUID NOT NULL Society/organization identifier <code>vendor_id</code> UUID NOT NULL Vendor providing the tanker <code>delivery_date</code> DATE NOT NULL Date of tanker delivery <code>delivery_time</code> TIME NOT NULL Time of tanker delivery <code>tanker_capacity_liters</code> INTEGER NOT NULL Expected tanker capacity (liters) <code>actual_received_liters</code> INTEGER NOT NULL Actual water received (liters) <code>created_by</code> UUID NOT NULL User who created the record <code>created_on_utc</code> TIMESTAMP WITH TIME ZONE DEFAULT now() Record creation timestamp <code>modified_by</code> UUID Last modifier user <code>modified_on_utc</code> TIMESTAMP WITH TIME ZONE Last modification timestamp <ul> <li><code>company_id</code> links tanker delivery to the society.</li> <li><code>vendor_id</code> refers to existing vendor records.</li> <li>Date and time fields capture when the delivery occurred.</li> <li>Capacity vs actual liters allow tracking variances.</li> </ul>"},{"location":"system/architecture/modules/inventory/#ui-wireframe-concept","title":"UI Wireframe Concept","text":"<pre><code>--------------------------------------------------------------\n| Water Tanker Delivery Entry                                 |\n--------------------------------------------------------------\n| Vendor: [Dropdown with search/select]                      |\n|                                                            |\n| ---------------------------------------------------------  |\n| | Tanker Deliveries:                                   [+] |  &lt;-- Add new row button\n| ---------------------------------------------------------  |\n|  #  | Date       | Time      | Capacity (liters) | Actual Received (liters) | [x] |\n| ---------------------------------------------------------  |\n|  1  | [DatePicker] | [TimePicker] | [number input]   | [number input]           |    |\n|  2  | [DatePicker] | [TimePicker] | [number input]   | [number input]           |    |\n|  3  | [DatePicker] | [TimePicker] | [number input]   | [number input]           |    |\n|  ...                                                      |\n|                                                          |\n| [ Save ]                                   [ Cancel ]    |\n--------------------------------------------------------------\n</code></pre>"},{"location":"system/architecture/modules/inventory/#ui-notes","title":"UI Notes","text":"<ul> <li>Vendor selected once per form (assumed one vendor per submission).</li> <li>Each delivery entry has its own date, time, capacity, and actual liters.</li> <li>Users can add multiple deliveries by clicking the [ + ] button.</li> <li>Rows can be removed via the delete [ x ] button.</li> <li>Validation enforces actual liters \u2264 capacity.</li> <li>After filling, the Save button submits all deliveries together.</li> </ul>"},{"location":"system/architecture/modules/inventory/#reporting-billing-integration","title":"Reporting &amp; Billing Integration","text":"<ul> <li>Provide reports showing tanker deliveries over a date range.</li> <li>Calculate total number of tankers and total liters received for billing cycles.</li> <li>Filter reports by vendor or date range.</li> <li>Enable export of tanker delivery data for accounting.</li> </ul>"},{"location":"system/architecture/modules/inventory/#important-sql-queries","title":"Important SQL Queries","text":""},{"location":"system/architecture/modules/inventory/#1-create-table","title":"1. Create table","text":"<pre><code>CREATE TABLE water_tanker_deliveries (\n    id SERIAL PRIMARY KEY,\n    company_id UUID NOT NULL,\n    vendor_id UUID NOT NULL,\n    delivery_date DATE NOT NULL,\n    delivery_time TIME NOT NULL,\n    tanker_capacity_liters INTEGER NOT NULL,\n    actual_received_liters INTEGER NOT NULL,\n    created_by UUID NOT NULL,\n    created_on_utc TIMESTAMP WITH TIME ZONE DEFAULT now(),\n    modified_by UUID,\n    modified_on_utc TIMESTAMP WITH TIME ZONE\n);\n</code></pre>"},{"location":"system/architecture/modules/inventory/#2-insert-multiple-deliveries-example","title":"2. Insert multiple deliveries (example)","text":"<pre><code>INSERT INTO water_tanker_deliveries\n(company_id, vendor_id, delivery_date, delivery_time, tanker_capacity_liters, actual_received_liters, created_by)\nVALUES\n('company-uuid-1', 'vendor-uuid-1', '2025-05-20', '08:30:00', 15000, 14000, 'user-uuid-1'),\n('company-uuid-1', 'vendor-uuid-1', '2025-05-20', '15:45:00', 5000, 5000, 'user-uuid-1');\n</code></pre>"},{"location":"system/architecture/modules/inventory/#3-query-total-tankers-and-liters-for-a-month-per-company","title":"3. Query total tankers and liters for a month per company","text":"<pre><code>SELECT\n    COUNT(*) AS total_tankers,\n    SUM(actual_received_liters) AS total_liters\nFROM water_tanker_deliveries\nWHERE company_id = 'company-uuid-1'\n  AND delivery_date BETWEEN '2025-05-01' AND '2025-05-31';\n</code></pre>"},{"location":"system/architecture/modules/inventory/#4-query-deliveries-by-vendor-and-date-range","title":"4. Query deliveries by vendor and date range","text":"<pre><code>SELECT delivery_date, delivery_time, tanker_capacity_liters, actual_received_liters\nFROM water_tanker_deliveries\nWHERE company_id = 'company-uuid-1'\n  AND vendor_id = 'vendor-uuid-1'\n  AND delivery_date BETWEEN '2025-05-01' AND '2025-05-31'\nORDER BY delivery_date, delivery_time;\n</code></pre>"},{"location":"system/architecture/modules/inventory/#additional-considerations","title":"Additional Considerations","text":"<ul> <li>Allow editing and deleting tanker delivery records.</li> <li>Optionally capture notes or attach delivery receipts/photos.</li> <li>Support bulk import for societies that track deliveries on paper.</li> <li>Implement notifications/reminders for entering tanker data periodically.</li> </ul>"},{"location":"system/architecture/modules/inventory/#next-steps","title":"Next Steps","text":"<ul> <li>Implement database migration script for <code>water_tanker_deliveries</code> table.</li> <li>Build API endpoints to create, update, list, and delete tanker delivery records.</li> <li>Develop React form component based on the wireframe with Formik and validation.</li> <li>Create reporting UI/dashboard for tanker deliveries and billing summary.</li> </ul>"},{"location":"system/architecture/modules/inventory/#water-tanker-delivery-apis-summary","title":"Water Tanker Delivery APIs - Summary","text":"Action HTTP Method URL Create multiple tanker deliveries POST <code>/api/v1/companies/{companyId}/vendors/{vendorId}/water-tanker-deliveries</code> List tanker deliveries (vendor scoped) GET <code>/api/v1/companies/{companyId}/vendors/{vendorId}/water-tanker-deliveries</code> List tanker deliveries (company scoped, all vendors) GET <code>/api/v1/companies/{companyId}/water-tanker-deliveries</code> Get tanker delivery by ID GET <code>/api/v1/companies/{companyId}/vendors/{vendorId}/water-tanker-deliveries/{deliveryId}</code> Update tanker delivery PUT <code>/api/v1/companies/{companyId}/vendors/{vendorId}/water-tanker-deliveries/{deliveryId}</code> Delete tanker delivery DELETE <code>/api/v1/companies/{companyId}/vendors/{vendorId}/water-tanker-deliveries/{deliveryId}</code> Monthly summary report GET <code>/api/v1/companies/{companyId}/vendors/{vendorId}/water-tanker-deliveries/summary?year=2025&amp;month=5</code>"},{"location":"system/architecture/modules/inventory/#5-api-specification-dhanman-style-urls","title":"5. API Specification (Dhanman-Style URLs)","text":"Action HTTP Method URL Create multiple tanker deliveries POST <code>/api/v1/companies/{companyId}/vendors/{vendorId}/water-tanker-deliveries</code> List tanker deliveries (vendor scoped) GET <code>/api/v1/companies/{companyId}/vendors/{vendorId}/water-tanker-deliveries</code> List tanker deliveries (company scoped, all vendors) GET <code>/api/v1/companies/{companyId}/water-tanker-deliveries</code> Get tanker delivery by ID GET <code>/api/v1/companies/{companyId}/vendors/{vendorId}/water-tanker-deliveries/{deliveryId}</code> Update tanker delivery PUT <code>/api/v1/companies/{companyId}/vendors/{vendorId}/water-tanker-deliveries/{deliveryId}</code> Delete tanker delivery DELETE <code>/api/v1/companies/{companyId}/vendors/{vendorId}/water-tanker-deliveries/{deliveryId}</code> Monthly summary report GET <code>/api/v1/companies/{companyId}/vendors/{vendorId}/water-tanker-deliveries/summary?year=2025&amp;month=5</code>"},{"location":"system/architecture/modules/inventory/#6-important-sql-queries","title":"6. Important SQL Queries","text":""},{"location":"system/architecture/modules/inventory/#create-table","title":"Create table","text":"<pre><code>CREATE TABLE water_tanker_deliveries (\n    id SERIAL PRIMARY KEY,\n    company_id UUID NOT NULL,\n    vendor_id UUID NOT NULL,\n    delivery_date DATE NOT NULL,\n    delivery_time TIME NOT NULL,\n    tanker_capacity_liters INTEGER NOT NULL,\n    actual_received_liters INTEGER NOT NULL,\n    created_by UUID NOT NULL,\n    created_on_utc TIMESTAMP WITH TIME ZONE DEFAULT now(),\n    modified_by UUID,\n    modified_on_utc TIMESTAMP WITH TIME ZONE\n);\n</code></pre>"},{"location":"system/architecture/modules/inventory/#insert-example-multiple-deliveries","title":"Insert example (multiple deliveries)","text":"<pre><code>INSERT INTO water_tanker_deliveries\n(company_id, vendor_id, delivery_date, delivery_time, tanker_capacity_liters, actual_received_liters, created_by)\nVALUES\n('company-uuid-1', 'vendor-uuid-1', '2025-05-20', '08:30:00', 15000, 14000, 'user-uuid-1'),\n('company-uuid-1', 'vendor-uuid-1', '2025-05-20', '15:45:00', 5000, 5000, 'user-uuid-1');\n</code></pre>"},{"location":"system/architecture/modules/inventory/#query-total-tankers-and-liters-for-a-month-per-company","title":"Query total tankers and liters for a month per company","text":"<pre><code>SELECT\n    COUNT(*) AS total_tankers,\n    SUM(actual_received_liters) AS total_liters\nFROM water_tanker_deliveries\nWHERE company_id = 'company-uuid-1'\n  AND delivery_date BETWEEN '2025-05-01' AND '2025-05-31';\n</code></pre>"},{"location":"system/architecture/modules/inventory/#query-deliveries-by-vendor-and-date-range","title":"Query deliveries by vendor and date range","text":"<pre><code>SELECT delivery_date, delivery_time, tanker_capacity_liters, actual_received_liters\nFROM water_tanker_deliveries\nWHERE company_id = 'company-uuid-1'\n  AND vendor_id = 'vendor-uuid-1'\n  AND delivery_date BETWEEN '2025-05-01' AND '2025-05-31'\nORDER BY delivery_date, delivery_time;\n</code></pre>"},{"location":"system/architecture/modules/inventory/#7-validation-business-rules","title":"7. Validation &amp; Business Rules","text":"<ul> <li>Actual liters received must be \u2264 tanker capacity.</li> <li>Delivery date cannot be in the future.</li> <li>Vendor and company IDs must be valid and authorized.</li> <li>Required fields: vendorId, deliveryDate, deliveryTime, tankerCapacityLiters, actualReceivedLiters.</li> <li>Prevent duplicate entries for the same vendor/date/time if needed.</li> </ul>"},{"location":"system/architecture/modules/inventory/#8-security-permissions","title":"8. Security &amp; Permissions","text":"<ul> <li>Only authorized users of the company can create/edit/delete tanker deliveries.</li> <li>Role-based access control to restrict sensitive operations.</li> <li>Audit trails (createdBy, modifiedBy) for accountability.</li> </ul>"},{"location":"system/architecture/modules/inventory/#9-testing-considerations","title":"9. Testing Considerations","text":"<ul> <li>Unit tests for API endpoints (create, update, delete, list).</li> <li>UI tests for form validations and multiple entry handling.</li> <li>Edge case tests: invalid liters, missing fields, unauthorized access.</li> <li>Performance tests for listing large data sets.</li> </ul>"},{"location":"system/architecture/modules/inventory/#10-deployment-migration","title":"10. Deployment &amp; Migration","text":"<ul> <li>Include DB migration script for creating the <code>water_tanker_deliveries</code> table.</li> <li>Version APIs appropriately.</li> <li>Prepare rollback scripts for DB changes if necessary.</li> </ul>"},{"location":"system/architecture/modules/inventory/#11-examples-sample-data","title":"11. Examples &amp; Sample Data","text":"<ul> <li>Provide sample API requests and responses.</li> <li>Use dummy data in UI for demonstration.</li> </ul>"},{"location":"system/architecture/modules/inventory/#12-faqs-troubleshooting","title":"12. FAQs &amp; Troubleshooting","text":"<ul> <li> <p>Q: How to handle partial deliveries?   A: Record actual liters received, which can be less than capacity.</p> </li> <li> <p>Q: Can vendors be added dynamically?   A: Vendor management is handled separately; ensure vendors exist before assigning.</p> </li> <li> <p>Q: How to report total water usage?   A: Use the summary report API filtered by company and month.</p> </li> </ul>"},{"location":"system/architecture/modules/inventory/#13-next-steps","title":"13. Next Steps","text":"<ul> <li>Develop DB migration and seed scripts.</li> <li>Implement REST APIs following the above spec.</li> <li>Build React form UI using the wireframe.</li> <li>Create reporting dashboards for management.</li> <li>Integrate billing system with delivery data.</li> </ul>"},{"location":"system/architecture/modules/payroll/","title":"Budgeting System Overview","text":"<p>The budgeting system is designed to enable organizations and their constituent companies to plan, monitor, and analyze their financial resources effectively. It leverages a hierarchical Chart of Accounts maintained at the organization level while supporting granular budget entries and financial tracking at the company level.</p>"},{"location":"system/architecture/modules/payroll/#key-features","title":"Key Features","text":"<ul> <li> <p>Company-Level Budgeting:   Budgets are created and managed for individual companies, enabling detailed financial planning aligned with actual business units.</p> </li> <li> <p>Hierarchical Account Structure:   The system uses the organization's Chart of Accounts, supporting multiple levels of accounts. Budget entries are made at the leaf account level, while parent accounts provide aggregated summaries.</p> </li> <li> <p>Flexible Planning Interface:   Users can plan budgets by either entering absolute amounts or specifying percentage changes based on prior period actuals. This flexibility speeds up the budgeting process and enhances usability.</p> </li> <li> <p>Dynamic Roll-ups and Reporting:   Parent account budgets and financial reports are generated by aggregating child account data. The system provides comprehensive variance analysis, showing differences between budgeted and actual amounts in both absolute and percentage terms.</p> </li> <li> <p>Multi-Level Reporting:   Financial reports such as Trial Balance, Balance Sheet, and Budget Variance are available at both company and organization levels, supporting both granular and consolidated views.</p> </li> </ul> <p>This budgeting system integrates with transactional data, ensuring accuracy and consistency in financial management, and supports workflows for drafting, submitting, and approving budgets.</p> <p></p>"},{"location":"system/architecture/modules/payroll/#1-proposed-database-tables","title":"1. Proposed Database Tables","text":"<pre><code>-- Budget header: one per organization + financial year + status etc.\nCREATE TABLE public.budgets (\n  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,\n  organization_id uuid NOT NULL,\n  company_id uuid NOT NULL REFERENCES companies(id);\n  finance_year_id int4 NOT NULL,\n  name text NOT NULL,\n  status text NOT NULL DEFAULT 'Draft', -- Draft, Submitted, Approved\n  created_by uuid NOT NULL,\n  created_on_utc timestamp NOT NULL DEFAULT now(),\n  modified_by uuid NULL,\n  modified_on_utc timestamp NULL\n);\n\n-- Budget line: one per leaf account per period\nCREATE TABLE public.budget_lines (\n  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,\n  budget_id uuid NOT NULL REFERENCES budgets(id) ON DELETE CASCADE,\n  account_id uuid NOT NULL REFERENCES chart_of_accounts(id),\n  period_start date NOT NULL,\n  period_end date NOT NULL,\n  amount numeric(15,2) NOT NULL,\n  created_on_utc timestamp NOT NULL DEFAULT now(),\n  modified_on_utc timestamp NULL\n);\n\n-- (Optional) To define account hierarchy levels if not precomputed\nCREATE TABLE public.chart_of_account_levels (\n  account_id uuid PRIMARY KEY REFERENCES chart_of_accounts(id),\n  level int4 NOT NULL -- 1=root, 2=next level, etc.\n);\n</code></pre>"},{"location":"system/architecture/modules/payroll/#2-key-data-handling-logic","title":"2. Key Data Handling Logic","text":"<ul> <li>Users enter budgets in <code>budget_lines</code> for leaf accounts (e.g., accounts at level 3 or lowest level shown).</li> <li>Parent account budgets are not entered; they are calculated by summing child leaf budgets when querying or reporting.</li> <li>You can filter accounts by <code>level</code> in the UI to show only relevant accounts for entry.</li> <li>Budget amount is the source of truth stored in the database.</li> </ul>"},{"location":"system/architecture/modules/payroll/#3-planning-ui-wireframe-editable-change-or-budget-amount","title":"3. Planning UI Wireframe (Editable % Change or Budget Amount)","text":"<pre><code>+----------------------------------------------------------+\n| Budget: \"FY 2025 Budget\"                                  |\n| Organization: [Org Name]   Year: [2025]                   |\n| Filter: Account Type [Expenses \u25bc]  Account Level [3 \u25bc]    |\n+----------------------------------------------------------+\n\n| Account Number | Account Name           | Last Year Actual | % Change (editable) | Budget Amount (editable) |\n|---------------|------------------------|------------------|---------------------|--------------------------|\n| 6001          | Electricity            | 120,000          | [ +5.0%    ]        | [ 126,000 ]              |\n| 6002          | Water                  | 80,000           | [ -3.0%    ]        | [ 77,600  ]              |\n| 7001          | Cleaning               | 40,000           | [  0.0%    ]        | [ 40,000  ]              |\n+----------------------------------------------------------+\n\n[Save Draft]   [Submit for Approval]   [Export Excel]  [Cancel]\n</code></pre> <ul> <li>Users can edit either % Change or Budget Amount, and the other field updates dynamically.</li> <li><code>Last Year Actual</code> is fetched dynamically from prior data.</li> <li>Budget amount is saved in DB.</li> </ul>"},{"location":"system/architecture/modules/payroll/#4-reporting-variance-ui-wireframe","title":"4. Reporting / Variance UI Wireframe","text":"<pre><code>+-------------------------------------------------------------+\n| Budget vs Actuals Dashboard                                  |\n| Organization: [Org Name]   Year: [2025]                      |\n| Filter: Account Type [Expenses \u25bc]  Period: [Monthly \u25bc]       |\n+-------------------------------------------------------------+\n\n| Account Number | Account Name           | Budget | Actual | Variance (Amount) | Variance (%) |\n|---------------|------------------------|--------|--------|-------------------|--------------|\n| 6000          | Utilities              | 400K   | 420K   | -20K              | -5.0%        |\n|   6001        | Electricity            | 150K   | 160K   | -10K              | -6.7%        |\n|   6002        | Water                  | 250K   | 260K   | -10K              | -4.0%        |\n| 7000          | Maintenance            | 300K   | 280K   | +20K              | +7.1%        |\n|   7001        | Cleaning               | 120K   | 130K   | -10K              | -8.3%        |\n|   7002        | Repairs                | 180K   | 150K   | +30K              | +20.0%       |\n+-------------------------------------------------------------+\n\n[Export PDF]   [Drilldown Details]   [Filter Options]\n</code></pre> <ul> <li>Variance is shown both as an absolute amount and percentage for clear analysis.</li> </ul>"},{"location":"system/architecture/modules/payroll/#5-data-aggregation-for-parent-accounts","title":"5. Data Aggregation for Parent Accounts","text":"<ul> <li>Parent accounts budgets and actuals are calculated by summing child leaf accounts.</li> <li>Leaf accounts are where budget amounts are entered.</li> </ul>"},{"location":"system/architecture/modules/payroll/#summary","title":"Summary","text":"Aspect Details Budget Entries Only on leaf accounts (lowest visible level) Parent Budgets Calculated by summing all child leaf accounts\u2019 budgets Filtering By account level and account type UI Editable % Change or Budget Amount in planning; read-only budget in reporting Reporting Shows budget, actual, variance (amount and %) at all hierarchy levels"},{"location":"system/architecture/modules/payroll/#1-fetch-budget-lines-for-a-company-financial-year","title":"1. Fetch Budget Lines for a Company &amp; Financial Year","text":"<pre><code>SELECT\n  bl.id,\n  bl.account_id,\n  coa.account_number,\n  coa.name AS account_name,\n  bl.period_start,\n  bl.period_end,\n  bl.amount AS budget_amount\nFROM public.budget_lines bl\nJOIN public.budgets b ON bl.budget_id = b.id\nJOIN public.chart_of_accounts coa ON bl.account_id = coa.id\nWHERE b.company_id = :company_id\n  AND b.finance_year_id = :finance_year_id\nORDER BY coa.account_number, bl.period_start;\n</code></pre>"},{"location":"system/architecture/modules/payroll/#2-get-last-year-actuals-per-account-for-a-company-period","title":"2. Get Last Year Actuals per Account for a Company &amp; Period","text":"<pre><code>SELECT\n  je.account_id,\n  SUM(je.amount) AS actual_amount\nFROM public.journal_entries je\nJOIN public.transaction_headers th ON je.transaction_id = th.id\nWHERE th.company_id = :company_id\n  AND je.transaction_date BETWEEN :period_start AND :period_end\nGROUP BY je.account_id;\n</code></pre>"},{"location":"system/architecture/modules/payroll/#3-aggregate-budget-and-actuals-for-company-by-account","title":"3. Aggregate Budget and Actuals for Company by Account","text":"<pre><code>WITH budget_data AS (\n  SELECT\n    bl.account_id,\n    SUM(bl.amount) AS total_budget\n  FROM public.budget_lines bl\n  JOIN public.budgets b ON bl.budget_id = b.id\n  WHERE b.company_id = :company_id\n    AND b.finance_year_id = :finance_year_id\n  GROUP BY bl.account_id\n),\nactual_data AS (\n  SELECT\n    je.account_id,\n    SUM(je.amount) AS total_actual\n  FROM public.journal_entries je\n  JOIN public.transaction_headers th ON je.transaction_id = th.id\n  WHERE th.company_id = :company_id\n    AND je.transaction_date BETWEEN :period_start AND :period_end\n  GROUP BY je.account_id\n)\n\nSELECT\n  coa.account_number,\n  coa.name,\n  bd.total_budget,\n  ad.total_actual,\n  (bd.total_budget - COALESCE(ad.total_actual, 0)) AS variance_amount,\n  CASE WHEN bd.total_budget = 0 THEN NULL\n       ELSE ROUND(((bd.total_budget - COALESCE(ad.total_actual, 0)) / bd.total_budget) * 100, 2)\n  END AS variance_percentage\nFROM budget_data bd\nLEFT JOIN actual_data ad ON bd.account_id = ad.account_id\nJOIN public.chart_of_accounts coa ON bd.account_id = coa.id\nORDER BY coa.account_number;\n</code></pre>"},{"location":"system/architecture/modules/payroll/#4-consolidated-budget-and-actuals-across-all-companies-in-an-organization","title":"4. Consolidated Budget and Actuals Across All Companies in an Organization","text":"<pre><code>WITH budget_data AS (\n  SELECT\n    bl.account_id,\n    SUM(bl.amount) AS total_budget\n  FROM public.budget_lines bl\n  JOIN public.budgets b ON bl.budget_id = b.id\n  JOIN public.companies c ON b.company_id = c.id\n  WHERE c.organization_id = :organization_id\n    AND b.finance_year_id = :finance_year_id\n  GROUP BY bl.account_id\n),\nactual_data AS (\n  SELECT\n    je.account_id,\n    SUM(je.amount) AS total_actual\n  FROM public.journal_entries je\n  JOIN public.transaction_headers th ON je.transaction_id = th.id\n  JOIN public.companies c ON th.company_id = c.id\n  WHERE c.organization_id = :organization_id\n    AND je.transaction_date BETWEEN :period_start AND :period_end\n  GROUP BY je.account_id\n)\n\nSELECT\n  coa.account_number,\n  coa.name,\n  bd.total_budget,\n  ad.total_actual,\n  (bd.total_budget - COALESCE(ad.total_actual, 0)) AS variance_amount,\n  CASE WHEN bd.total_budget = 0 THEN NULL\n       ELSE ROUND(((bd.total_budget - COALESCE(ad.total_actual, 0)) / bd.total_budget) * 100, 2)\n  END AS variance_percentage\nFROM budget_data bd\nLEFT JOIN actual_data ad ON bd.account_id = ad.account_id\nJOIN public.chart_of_accounts coa ON bd.account_id = coa.id\nORDER BY coa.account_number;\n</code></pre>"},{"location":"system/architecture/modules/payroll/#5-roll-up-budget-summary-at-parent-account-level-recursive-query-example","title":"5. Roll-Up Budget Summary at Parent Account Level (Recursive Query Example)","text":"<pre><code>WITH RECURSIVE coa_tree AS (\n  SELECT\n    id,\n    parent_account_id,\n    account_number,\n    name\n  FROM public.chart_of_accounts\n  WHERE parent_account_id IS NULL -- root level accounts\n\n  UNION ALL\n\n  SELECT\n    c.id,\n    c.parent_account_id,\n    c.account_number,\n    c.name\n  FROM public.chart_of_accounts c\n  INNER JOIN coa_tree ct ON c.parent_account_id = ct.id\n),\nbudget_sums AS (\n  SELECT\n    bl.account_id,\n    SUM(bl.amount) AS total_budget\n  FROM public.budget_lines bl\n  JOIN public.budgets b ON bl.budget_id = b.id\n  WHERE b.company_id = :company_id\n    AND b.finance_year_id = :finance_year_id\n  GROUP BY bl.account_id\n)\nSELECT\n  ct.id AS account_id,\n  ct.account_number,\n  ct.name,\n  COALESCE(SUM(bs.total_budget), 0) AS budget_amount\nFROM coa_tree ct\nLEFT JOIN budget_sums bs ON bs.account_id = ct.id\nGROUP BY ct.id, ct.account_number, ct.name\nORDER BY ct.account_number;\n</code></pre>"},{"location":"system/architecture/modules/sales/","title":"DhanMan Sales Service Architecture","text":"<p>This diagram represents the internal layered architecture of the <code>Dhanman.Sales</code> service using the C4 model principles.</p> <p></p>"},{"location":"system/architecture/modules/sales/#layered-structure","title":"\ud83e\uddf1 Layered Structure","text":""},{"location":"system/architecture/modules/sales/#salesapi-presentation-layer","title":"\ud83d\udd39 Sales.Api (<code>Presentation Layer</code>)","text":"<ul> <li>Controllers: Handle HTTP requests (e.g., <code>/api/invoices</code>)</li> <li>Middleware: Applies cross-cutting logic (logging, exceptions, auth)</li> <li>Services: Contains reusable components like:</li> <li><code>UserContextService</code></li> <li><code>TokenService</code></li> </ul>"},{"location":"system/architecture/modules/sales/#salesapplication-use-case-layer","title":"\ud83d\udd39 Sales.Application (<code>Use Case Layer</code>)","text":"<ul> <li>Commands / Queries: Define use-case entry points (CQRS)</li> <li>Handlers: Execute business logic for each command/query</li> <li>Features: Modular folders like <code>Invoice</code>, <code>Customer</code>, <code>Company</code></li> <li>Contracts: DTOs for API \u2192 Application \u2192 Domain flow</li> <li>Abstractions: Interfaces for dependency inversion</li> <li>Behaviors: Common logic like:</li> <li>Validation</li> <li>Caching</li> <li>Logging</li> </ul>"},{"location":"system/architecture/modules/sales/#salesdomain-business-logic-layer","title":"\ud83d\udd39 Sales.Domain (<code>Business Logic Layer</code>)","text":"<ul> <li>Entities: Core business models (e.g., <code>Invoice</code>, <code>Customer</code>)</li> <li>Authorization: Domain permission logic</li> <li>Abstractions: Domain-level interfaces to enforce business rules</li> </ul>"},{"location":"system/architecture/modules/sales/#salespersistence-infrastructure-layer","title":"\ud83d\udd39 Sales.Persistence (<code>Infrastructure Layer</code>)","text":"<ul> <li>Repositories: Concrete data access implementations (e.g., <code>InvoiceRepository</code>)</li> <li>ApplicationDbContext: EF Core context for DB operations</li> <li>Migrations: EF migration history and schema definitions</li> <li>PostgreSQL: The underlying database for persistence</li> </ul>"},{"location":"system/architecture/modules/sales/#crosscuttingconcerns-shared-services","title":"\ud83d\udd38 CrossCuttingConcerns (Shared Services)","text":"<ul> <li>Logging: Powered by Serilog</li> <li>Messaging: Event-based communication using RabbitMQ</li> <li>Monitoring: Exposed via Prometheus metrics</li> <li>Authentication: Handled externally via Auth0</li> </ul>"},{"location":"system/architecture/modules/sales/#request-response-flow","title":"\ud83d\udd01 Request-Response Flow","text":"<pre><code>HTTP Request\n   \u2193\n[Controller]\n   \u2193\n[Command / Query Interface]\n   \u2193\n[Handler]\n   \u2193\n[Repository]\n   \u2193\n[DbContext]\n   \u2193\n[PostgreSQL]\n</code></pre>"},{"location":"system/architecture/modules/sales/#supporting-flows","title":"\ud83d\udd17 Supporting Flows","text":"<ul> <li> <p><code>Middleware</code> wraps all requests \u2192 handles exceptions, auth, and logging.</p> </li> <li> <p><code>Handlers</code> may:</p> </li> <li>Emit messages \u2192 via RabbitMQ</li> <li>Log events \u2192 via Serilog</li> <li> <p>Update metrics \u2192 via Prometheus</p> </li> <li> <p><code>Services</code> provide reusable user/session context logic to Controllers.</p> </li> </ul>"},{"location":"system/architecture/modules/sales/#key-benefits","title":"\u2705 Key Benefits","text":"<ul> <li>Separation of concerns between API, use-case, domain, and infra  </li> <li>Testable business logic (independent of DB/web)  </li> <li>Modular features allow scalability  </li> <li>Centralized monitoring, logging, and authentication  </li> </ul> <p>This architecture aligns with DhanMan\u2019s broader microservices strategy and adheres to clean architecture principles.</p>"},{"location":"system/architecture/patterns/communication-patterns/","title":"Microservices Communication and Integration Patterns","text":""},{"location":"system/architecture/patterns/communication-patterns/#overview","title":"Overview","text":"<p>This document describes how Dhanman's microservices communicate with each other, the patterns used for inter-service communication, and the data flow across bounded contexts. Understanding these patterns is crucial for maintaining system consistency and reliability.</p>"},{"location":"system/architecture/patterns/communication-patterns/#communication-patterns","title":"Communication Patterns","text":""},{"location":"system/architecture/patterns/communication-patterns/#1-synchronous-communication-httprest","title":"1. Synchronous Communication (HTTP/REST)","text":"<p>Used for real-time operations that require immediate responses.</p> <p>When to Use: - User-facing operations requiring immediate feedback - Read operations that need fresh data - Operations where eventual consistency is not acceptable - External API integrations</p> <p>Example Flow: Invoice Creation with Customer Validation</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      HTTP GET       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Frontend  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502    Sales    \u2502\n\u2502   (React)   \u2502                      \u2502   Service   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                            \u2502\n                                            \u2502 HTTP GET (validate)\n                                            \u2502\n                                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                     \u2502   Common    \u2502\n                                     \u2502   Service   \u2502\n                                     \u2502 (Customers) \u2502\n                                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Implementation:</p> <pre><code>// Sales Service - Synchronous call to Common Service\npublic class CreateInvoiceCommandHandler : IRequestHandler&lt;CreateInvoiceCommand, Result&lt;Guid&gt;&gt;\n{\n    private readonly IHttpClientFactory _httpClientFactory;\n    private readonly IInvoiceRepository _invoiceRepository;\n\n    public async Task&lt;Result&lt;Guid&gt;&gt; Handle(\n        CreateInvoiceCommand request, \n        CancellationToken cancellationToken)\n    {\n        // 1. Validate customer exists (synchronous HTTP call)\n        var customer = await ValidateCustomerAsync(request.CustomerId, cancellationToken);\n        if (customer == null)\n            return Result&lt;Guid&gt;.Failure(\"Customer not found\");\n\n        // 2. Create invoice\n        var invoice = Invoice.Create(request.CustomerId, request.Amount);\n        await _invoiceRepository.AddAsync(invoice, cancellationToken);\n\n        // 3. Publish event for async processing\n        await PublishInvoiceCreatedEventAsync(invoice);\n\n        return Result&lt;Guid&gt;.Success(invoice.Id);\n    }\n\n    private async Task&lt;CustomerDto?&gt; ValidateCustomerAsync(\n        Guid customerId, \n        CancellationToken cancellationToken)\n    {\n        var client = _httpClientFactory.CreateClient(\"CommonService\");\n        var response = await client.GetAsync(\n            $\"api/customers/{customerId}\", \n            cancellationToken\n        );\n\n        if (!response.IsSuccessStatusCode)\n            return null;\n\n        return await response.Content.ReadFromJsonAsync&lt;CustomerDto&gt;(cancellationToken);\n    }\n}\n</code></pre> <p>Resilience Pattern:</p> <pre><code>// HTTP Client with Polly resilience\nservices.AddHttpClient(\"CommonService\", client =&gt;\n{\n    client.BaseAddress = new Uri(configuration[\"Services:Common:Url\"]);\n    client.Timeout = TimeSpan.FromSeconds(10);\n})\n.AddPolicyHandler(Policy&lt;HttpResponseMessage&gt;\n    .Handle&lt;HttpRequestException&gt;()\n    .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)))\n)\n.AddPolicyHandler(Policy&lt;HttpResponseMessage&gt;\n    .Handle&lt;HttpRequestException&gt;()\n    .CircuitBreakerAsync(5, TimeSpan.FromSeconds(30))\n);\n</code></pre>"},{"location":"system/architecture/patterns/communication-patterns/#2-asynchronous-communication-event-driven","title":"2. Asynchronous Communication (Event-Driven)","text":"<p>Used for operations that can be processed eventually and don't require immediate response.</p> <p>When to Use: - Cross-service data synchronization - Triggering workflows in other services - Audit logging and analytics - Non-critical operations - Operations that can be retried</p> <p>Example Flow: Invoice Created \u2192 Ledger Update</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Sales    \u2502                    \u2502    RabbitMQ     \u2502\n\u2502   Service   \u2502\u2500\u2500\u2500\u2500\u2500 Publish \u2500\u2500\u2500\u2500\u2500\u25b6\u2502  dhanman.events \u2502\n\u2502             \u2502   InvoiceCreated   \u2502   (Exchange)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                            \u2502 Fan-out\n                                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                   \u2502                 \u2502\n                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                        \u2502     Common     \u2502  \u2502  Notification  \u2502\n                        \u2502    Service     \u2502  \u2502    Service     \u2502\n                        \u2502  (Consumes)    \u2502  \u2502  (Consumes)    \u2502\n                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Event Publishing:</p> <pre><code>// Sales Service - Publishing event after invoice creation\npublic class CreateInvoiceCommandHandler : IRequestHandler&lt;CreateInvoiceCommand, Result&lt;Guid&gt;&gt;\n{\n    private readonly IEventPublisher _eventPublisher;\n    private readonly IInvoiceRepository _invoiceRepository;\n\n    public async Task&lt;Result&lt;Guid&gt;&gt; Handle(\n        CreateInvoiceCommand request, \n        CancellationToken cancellationToken)\n    {\n        // 1. Create and save invoice\n        var invoice = Invoice.Create(request.CustomerId, request.Amount, request.DueDate);\n        await _invoiceRepository.AddAsync(invoice, cancellationToken);\n\n        // 2. Publish domain event\n        var @event = new InvoiceCreatedEvent\n        {\n            InvoiceId = invoice.Id,\n            CustomerId = invoice.CustomerId,\n            Amount = invoice.Amount,\n            DueDate = invoice.DueDate,\n            CreatedAt = DateTime.UtcNow\n        };\n\n        await _eventPublisher.PublishAsync(@event, cancellationToken);\n\n        return Result&lt;Guid&gt;.Success(invoice.Id);\n    }\n}\n</code></pre> <p>Event Consumption:</p> <pre><code>// Common Service - Consuming event to update ledger\npublic class InvoiceCreatedEventHandler : IMessageHandler&lt;InvoiceCreatedEvent&gt;\n{\n    private readonly ILedgerService _ledgerService;\n    private readonly ILogger&lt;InvoiceCreatedEventHandler&gt; _logger;\n\n    public async Task HandleAsync(\n        InvoiceCreatedEvent @event, \n        CancellationToken cancellationToken)\n    {\n        _logger.LogInformation(\n            \"Processing InvoiceCreatedEvent for Invoice {InvoiceId}\", \n            @event.InvoiceId\n        );\n\n        try\n        {\n            // Create debit entry (Accounts Receivable)\n            await _ledgerService.CreateEntryAsync(new LedgerEntry\n            {\n                AccountCode = \"1200\", // Accounts Receivable\n                Type = EntryType.Debit,\n                Amount = @event.Amount,\n                ReferenceId = @event.InvoiceId,\n                ReferenceType = \"Invoice\",\n                Description = $\"Invoice created for customer {@event.CustomerId}\"\n            });\n\n            // Create credit entry (Revenue)\n            await _ledgerService.CreateEntryAsync(new LedgerEntry\n            {\n                AccountCode = \"4000\", // Revenue\n                Type = EntryType.Credit,\n                Amount = @event.Amount,\n                ReferenceId = @event.InvoiceId,\n                ReferenceType = \"Invoice\",\n                Description = $\"Revenue from invoice {@event.InvoiceId}\"\n            });\n\n            _logger.LogInformation(\n                \"Ledger entries created for Invoice {InvoiceId}\", \n                @event.InvoiceId\n            );\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(\n                ex, \n                \"Error processing InvoiceCreatedEvent for Invoice {InvoiceId}\", \n                @event.InvoiceId\n            );\n            throw; // Retry mechanism will handle\n        }\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/communication-patterns/#3-command-pattern-point-to-point","title":"3. Command Pattern (Point-to-Point)","text":"<p>Used for directing specific actions to a particular service.</p> <p>Example Flow: Send Email Command</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Sales    \u2502                    \u2502     RabbitMQ     \u2502\n\u2502   Service   \u2502\u2500\u2500\u2500 Publish \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 dhanman.commands \u2502\n\u2502             \u2502  SendEmailCommand  \u2502   (Exchange)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                            \u2502 Direct routing\n                                            \u2502 (notification.commands)\n                                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                    \u2502   Notification   \u2502\n                                    \u2502     Service      \u2502\n                                    \u2502   (Consumes)     \u2502\n                                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Command Publishing:</p> <pre><code>public class SendInvoiceEmailCommand\n{\n    public Guid InvoiceId { get; set; }\n    public Guid CustomerId { get; set; }\n    public string EmailTemplate { get; set; }\n}\n\n// Sales Service\npublic class InvoiceEmailService\n{\n    private readonly ICommandPublisher _commandPublisher;\n\n    public async Task SendInvoiceEmailAsync(Guid invoiceId, Guid customerId)\n    {\n        var command = new SendInvoiceEmailCommand\n        {\n            InvoiceId = invoiceId,\n            CustomerId = customerId,\n            EmailTemplate = \"invoice-created\"\n        };\n\n        await _commandPublisher.PublishAsync(\n            command,\n            routingKey: \"notification.commands\"\n        );\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/communication-patterns/#communication-scenarios","title":"Communication Scenarios","text":""},{"location":"system/architecture/patterns/communication-patterns/#scenario-1-monthly-invoice-generation","title":"Scenario 1: Monthly Invoice Generation","text":"<p>Flow:</p> <pre><code>1. Hangfire Recurring Job (Sales Service)\n   \u2502\n   \u251c\u2500\u25b6 2. Query all active residents (HTTP to Community Service)\n   \u2502\n   \u251c\u2500\u25b6 3. For each resident:\n   \u2502      \u251c\u2500\u25b6 Create invoice (Local DB)\n   \u2502      \u251c\u2500\u25b6 Publish InvoiceCreatedEvent (RabbitMQ)\n   \u2502      \u2514\u2500\u25b6 Schedule payment reminder (Hangfire Delayed Job)\n   \u2502\n   \u251c\u2500\u25b6 4. Common Service receives events:\n   \u2502      \u2514\u2500\u25b6 Update ledger entries\n   \u2502\n   \u2514\u2500\u25b6 5. Notification Service receives events:\n          \u2514\u2500\u25b6 Send invoice emails\n</code></pre> <p>Implementation:</p> <pre><code>public class MonthlyInvoiceGenerationJob\n{\n    private readonly IHttpClientFactory _httpClientFactory;\n    private readonly IInvoiceService _invoiceService;\n    private readonly IBackgroundJobClient _hangfireClient;\n\n    [AutomaticRetry(Attempts = 0)] // Don't retry, run next month\n    public async Task GenerateMonthlyInvoices(CancellationToken cancellationToken)\n    {\n        _logger.LogInformation(\"Starting monthly invoice generation\");\n\n        // 1. Get active residents from Community Service (Synchronous)\n        var residents = await GetActiveResidentsAsync(cancellationToken);\n\n        // 2. Generate invoices (with events published)\n        var results = new List&lt;(Guid ResidentId, Result&lt;Guid&gt; Result)&gt;();\n\n        foreach (var resident in residents)\n        {\n            var result = await _invoiceService.GenerateMonthlyInvoiceAsync(\n                resident.Id, \n                resident.MonthlyCharges,\n                cancellationToken\n            );\n\n            results.Add((resident.Id, result));\n\n            if (result.IsSuccess)\n            {\n                // 3. Schedule reminder for 3 days before due date\n                var reminderDate = DateTime.UtcNow.AddDays(27);\n                _hangfireClient.Schedule&lt;ReminderService&gt;(\n                    x =&gt; x.SendPaymentReminder(result.Value, cancellationToken),\n                    reminderDate\n                );\n            }\n        }\n\n        // 4. Log summary\n        _logger.LogInformation(\n            \"Monthly invoice generation completed. Success: {Success}, Failed: {Failed}\",\n            results.Count(r =&gt; r.Result.IsSuccess),\n            results.Count(r =&gt; r.Result.IsFailure)\n        );\n    }\n\n    private async Task&lt;List&lt;ResidentDto&gt;&gt; GetActiveResidentsAsync(\n        CancellationToken cancellationToken)\n    {\n        var client = _httpClientFactory.CreateClient(\"CommunityService\");\n        var response = await client.GetAsync(\"api/residents/active\", cancellationToken);\n        response.EnsureSuccessStatusCode();\n        return await response.Content.ReadFromJsonAsync&lt;List&lt;ResidentDto&gt;&gt;(cancellationToken);\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/communication-patterns/#scenario-2-purchase-order-approval-workflow","title":"Scenario 2: Purchase Order Approval Workflow","text":"<p>Flow:</p> <pre><code>1. User submits PO (Frontend \u2192 Purchase Service)\n   \u2502\n   \u251c\u2500\u25b6 2. Purchase Service:\n   \u2502      \u251c\u2500\u25b6 Create PO (Local DB)\n   \u2502      \u2514\u2500\u25b6 Publish POSubmittedEvent (RabbitMQ)\n   \u2502\n   \u251c\u2500\u25b6 3. Notification Service:\n   \u2502      \u2514\u2500\u25b6 Send approval request emails to approvers\n   \u2502\n   \u251c\u2500\u25b6 4. Approver approves (Frontend \u2192 Purchase Service)\n   \u2502      \u251c\u2500\u25b6 Update PO status (Local DB)\n   \u2502      \u2514\u2500\u25b6 Publish POApprovedEvent (RabbitMQ)\n   \u2502\n   \u251c\u2500\u25b6 5. Common Service:\n   \u2502      \u2514\u2500\u25b6 Create budget reservation ledger entry\n   \u2502\n   \u2514\u2500\u25b6 6. Notification Service:\n          \u2514\u2500\u25b6 Send approval confirmation to requester\n</code></pre> <p>Implementation:</p> <pre><code>// Step 1: Submit PO\npublic class SubmitPurchaseOrderCommandHandler \n    : IRequestHandler&lt;SubmitPurchaseOrderCommand, Result&lt;Guid&gt;&gt;\n{\n    public async Task&lt;Result&lt;Guid&gt;&gt; Handle(\n        SubmitPurchaseOrderCommand request, \n        CancellationToken cancellationToken)\n    {\n        var po = PurchaseOrder.Create(request.VendorId, request.Items);\n        po.Submit();\n\n        await _repository.AddAsync(po, cancellationToken);\n\n        // Publish event\n        await _eventPublisher.PublishAsync(new POSubmittedEvent\n        {\n            POId = po.Id,\n            VendorId = po.VendorId,\n            Amount = po.TotalAmount,\n            RequiresApproval = po.TotalAmount &gt; 50000,\n            Approvers = po.TotalAmount &gt; 50000 \n                ? new[] { \"manager@company.com\", \"cfo@company.com\" }\n                : new[] { \"manager@company.com\" }\n        });\n\n        return Result&lt;Guid&gt;.Success(po.Id);\n    }\n}\n\n// Step 3: Notification Service consumes event\npublic class POSubmittedEventHandler : IMessageHandler&lt;POSubmittedEvent&gt;\n{\n    private readonly IEmailService _emailService;\n\n    public async Task HandleAsync(\n        POSubmittedEvent @event, \n        CancellationToken cancellationToken)\n    {\n        if (@event.RequiresApproval)\n        {\n            foreach (var approver in @event.Approvers)\n            {\n                await _emailService.SendAsync(new EmailMessage\n                {\n                    To = approver,\n                    Subject = $\"Purchase Order {event.POId} Requires Approval\",\n                    Template = \"po-approval-required\",\n                    Data = new { POId = @event.POId, Amount = @event.Amount }\n                });\n            }\n        }\n    }\n}\n\n// Step 4: Approve PO\npublic class ApprovePurchaseOrderCommandHandler \n    : IRequestHandler&lt;ApprovePurchaseOrderCommand, Result&gt;\n{\n    public async Task&lt;Result&gt; Handle(\n        ApprovePurchaseOrderCommand request, \n        CancellationToken cancellationToken)\n    {\n        var po = await _repository.GetByIdAsync(request.POId, cancellationToken);\n        if (po == null)\n            return Result.Failure(\"PO not found\");\n\n        var result = po.Approve(request.ApproverId, request.Comments);\n        if (result.IsFailure)\n            return result;\n\n        await _repository.UpdateAsync(po, cancellationToken);\n\n        // Publish approved event\n        await _eventPublisher.PublishAsync(new POApprovedEvent\n        {\n            POId = po.Id,\n            ApprovedBy = request.ApproverId,\n            ApprovedAt = DateTime.UtcNow,\n            Amount = po.TotalAmount\n        });\n\n        return Result.Success();\n    }\n}\n\n// Step 5: Common Service creates ledger entry\npublic class POApprovedEventHandler : IMessageHandler&lt;POApprovedEvent&gt;\n{\n    private readonly ILedgerService _ledgerService;\n\n    public async Task HandleAsync(\n        POApprovedEvent @event, \n        CancellationToken cancellationToken)\n    {\n        // Create budget reservation entry\n        await _ledgerService.CreateEntryAsync(new LedgerEntry\n        {\n            AccountCode = \"2100\", // Accounts Payable\n            Type = EntryType.Credit,\n            Amount = @event.Amount,\n            ReferenceId = @event.POId,\n            ReferenceType = \"PurchaseOrder\",\n            Description = $\"Budget reserved for approved PO {@event.POId}\"\n        });\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/communication-patterns/#scenario-3-payment-processing-with-saga","title":"Scenario 3: Payment Processing with Saga","text":"<p>Flow:</p> <pre><code>1. User makes payment (Frontend \u2192 Sales Service)\n   \u2502\n   \u251c\u2500\u25b6 2. Sales Service (Saga Orchestrator):\n   \u2502      \u251c\u2500\u25b6 Validate invoice exists (Local DB)\n   \u2502      \u251c\u2500\u25b6 Process payment via gateway (HTTP to Payment Gateway)\n   \u2502      \u2514\u2500\u25b6 Mark invoice as paid (Local DB)\n   \u2502\n   \u251c\u2500\u25b6 3. If successful:\n   \u2502      \u251c\u2500\u25b6 Publish PaymentReceivedEvent (RabbitMQ)\n   \u2502      \u2502   \u2502\n   \u2502      \u2502   \u251c\u2500\u25b6 Common Service: Update ledger\n   \u2502      \u2502   \u2514\u2500\u25b6 Notification Service: Send receipt\n   \u2502      \u2502\n   \u2502      \u2514\u2500\u25b6 Update customer balance (HTTP to Common Service)\n   \u2502\n   \u2514\u2500\u25b6 4. If failed:\n          \u2514\u2500\u25b6 Rollback: Mark payment as failed, don't publish events\n</code></pre> <p>Implementation:</p> <pre><code>public class ProcessPaymentSaga\n{\n    private readonly IInvoiceRepository _invoiceRepository;\n    private readonly IPaymentGateway _paymentGateway;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly IHttpClientFactory _httpClientFactory;\n\n    public async Task&lt;Result&lt;Guid&gt;&gt; ExecuteAsync(\n        ProcessPaymentCommand command,\n        CancellationToken cancellationToken)\n    {\n        // Step 1: Get invoice\n        var invoice = await _invoiceRepository.GetByIdAsync(\n            command.InvoiceId, \n            cancellationToken\n        );\n\n        if (invoice == null)\n            return Result&lt;Guid&gt;.Failure(\"Invoice not found\");\n\n        if (invoice.IsPaid)\n            return Result&lt;Guid&gt;.Failure(\"Invoice already paid\");\n\n        // Step 2: Process payment via gateway\n        PaymentResult paymentResult;\n        try\n        {\n            paymentResult = await _paymentGateway.ProcessPaymentAsync(new PaymentRequest\n            {\n                Amount = invoice.Amount,\n                Currency = \"USD\",\n                PaymentMethodId = command.PaymentMethodId,\n                IdempotencyKey = command.IdempotencyKey\n            });\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Payment gateway error for invoice {InvoiceId}\", invoice.Id);\n            return Result&lt;Guid&gt;.Failure(\"Payment processing failed\");\n        }\n\n        if (!paymentResult.IsSuccess)\n        {\n            return Result&lt;Guid&gt;.Failure($\"Payment failed: {paymentResult.ErrorMessage}\");\n        }\n\n        // Step 3: Mark invoice as paid\n        var payment = Payment.Create(\n            invoice.Id,\n            invoice.Amount,\n            paymentResult.TransactionId,\n            PaymentMethod.CreditCard\n        );\n\n        invoice.MarkAsPaid(payment);\n        await _invoiceRepository.UpdateAsync(invoice, cancellationToken);\n\n        // Step 4: Update customer balance (HTTP call)\n        await UpdateCustomerBalanceAsync(\n            invoice.CustomerId, \n            -invoice.Amount, \n            cancellationToken\n        );\n\n        // Step 5: Publish success event\n        await _eventPublisher.PublishAsync(new PaymentReceivedEvent\n        {\n            PaymentId = payment.Id,\n            InvoiceId = invoice.Id,\n            CustomerId = invoice.CustomerId,\n            Amount = invoice.Amount,\n            TransactionId = paymentResult.TransactionId,\n            ProcessedAt = DateTime.UtcNow\n        });\n\n        return Result&lt;Guid&gt;.Success(payment.Id);\n    }\n\n    private async Task UpdateCustomerBalanceAsync(\n        Guid customerId,\n        decimal amountDelta,\n        CancellationToken cancellationToken)\n    {\n        var client = _httpClientFactory.CreateClient(\"CommonService\");\n        var response = await client.PostAsJsonAsync(\n            $\"api/customers/{customerId}/update-balance\",\n            new { AmountDelta = amountDelta },\n            cancellationToken\n        );\n\n        if (!response.IsSuccessStatusCode)\n        {\n            _logger.LogWarning(\n                \"Failed to update customer balance for {CustomerId}\", \n                customerId\n            );\n            // Don't fail the saga, balance will sync via events eventually\n        }\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/communication-patterns/#integration-patterns-summary","title":"Integration Patterns Summary","text":""},{"location":"system/architecture/patterns/communication-patterns/#pattern-selection-guide","title":"Pattern Selection Guide","text":"Pattern Use Case Consistency Performance Complexity Synchronous HTTP Real-time validation Strong Medium Low Async Events Cross-service workflows Eventual High Medium Commands Directed actions Eventual High Medium Saga Distributed transactions Eventual Medium High"},{"location":"system/architecture/patterns/communication-patterns/#event-types","title":"Event Types","text":"Event Publisher Consumers Purpose <code>InvoiceCreatedEvent</code> Sales Common, Notification Ledger update, email notification <code>PaymentReceivedEvent</code> Sales Common, Notification Ledger update, receipt email <code>BillCreatedEvent</code> Purchase Common Ledger update <code>POApprovedEvent</code> Purchase Common, Notification Budget reservation, notifications <code>SalaryPostedEvent</code> Payroll Common, Notification Ledger update, payslip generation <code>UserCreatedEvent</code> Common All services User sync across services"},{"location":"system/architecture/patterns/communication-patterns/#best-practices","title":"Best Practices","text":""},{"location":"system/architecture/patterns/communication-patterns/#dos","title":"Do's \u2705","text":"<ul> <li>Use async events for cross-service workflows</li> <li>Implement idempotency for all event handlers</li> <li>Use correlation IDs for tracing</li> <li>Implement proper error handling and DLQ</li> <li>Version your events for backward compatibility</li> <li>Use HTTP for real-time validations</li> <li>Implement circuit breakers for external calls</li> <li>Monitor message queue health</li> <li>Log all cross-service communication</li> </ul>"},{"location":"system/architecture/patterns/communication-patterns/#donts","title":"Don'ts \u274c","text":"<ul> <li>Don't make synchronous calls in event handlers</li> <li>Don't create circular dependencies</li> <li>Don't skip retry mechanisms</li> <li>Don't ignore dead-letter queues</li> <li>Don't send large payloads in events (use IDs)</li> <li>Don't create tight coupling through synchronous calls</li> <li>Don't forget timeout configurations</li> <li>Don't skip correlation IDs</li> </ul>"},{"location":"system/architecture/patterns/communication-patterns/#monitoring-communication","title":"Monitoring Communication","text":""},{"location":"system/architecture/patterns/communication-patterns/#metrics-to-track","title":"Metrics to Track","text":"<ul> <li>Message processing time</li> <li>Event publish rate</li> <li>HTTP call duration</li> <li>Circuit breaker state</li> <li>Dead-letter queue size</li> <li>Retry attempts</li> <li>Failed messages</li> </ul>"},{"location":"system/architecture/patterns/communication-patterns/#grafana-dashboards","title":"Grafana Dashboards","text":"<pre><code>- Inter-service call latency\n- Event processing throughput\n- Failed message count\n- Circuit breaker trips\n- Queue depth\n</code></pre>"},{"location":"system/architecture/patterns/communication-patterns/#related-documentation","title":"Related Documentation","text":"<ul> <li>Event Sourcing</li> <li>Resilience Patterns</li> <li>CQRS</li> </ul>"},{"location":"system/architecture/patterns/communication-patterns/#summary","title":"Summary","text":"<p>Dhanman's microservices communicate through: - Synchronous HTTP for real-time operations - Asynchronous events for cross-service workflows - Commands for directed actions - Sagas for distributed transactions</p> <p>This combination provides flexibility, scalability, and resilience while maintaining data consistency across services.</p>"},{"location":"system/architecture/patterns/cqrs/","title":"CQRS Pattern in Dhanman","text":""},{"location":"system/architecture/patterns/cqrs/#overview","title":"Overview","text":"<p>Command Query Responsibility Segregation (CQRS) is a fundamental architectural pattern used throughout the Dhanman ERP system. CQRS separates read operations (queries) from write operations (commands), enabling better scalability, performance, and maintainability.</p>"},{"location":"system/architecture/patterns/cqrs/#core-concepts","title":"Core Concepts","text":""},{"location":"system/architecture/patterns/cqrs/#commands","title":"Commands","text":"<p>Commands represent write operations that change system state. They are imperative in nature and capture user intent.</p> <p>Characteristics: - Modify application state - Return success/failure (void or Result) - Validate business rules before execution - May trigger domain events - Execute within a transaction boundary <p>Example Commands: <pre><code>public class CreateInvoiceCommand : IRequest&lt;Result&lt;Guid&gt;&gt;\n{\n    public Guid CustomerId { get; set; }\n    public decimal Amount { get; set; }\n    public DateTime DueDate { get; set; }\n    public List&lt;InvoiceLineItem&gt; LineItems { get; set; }\n}\n\npublic class ApprovePaymentCommand : IRequest&lt;Result&gt;\n{\n    public Guid PaymentId { get; set; }\n    public Guid ApprovedBy { get; set; }\n    public string Comments { get; set; }\n}\n</code></pre></p>"},{"location":"system/architecture/patterns/cqrs/#queries","title":"Queries","text":"<p>Queries represent read operations that retrieve data without side effects. They are declarative and return DTOs optimized for presentation.</p> <p>Characteristics: - Do not modify state (side-effect free) - Return data transfer objects (DTOs) - May query read-optimized projections - Can bypass domain model for performance - Support pagination, filtering, and sorting</p> <p>Example Queries: <pre><code>public class GetInvoiceByIdQuery : IRequest&lt;Result&lt;InvoiceDto&gt;&gt;\n{\n    public Guid InvoiceId { get; set; }\n}\n\npublic class GetPendingInvoicesQuery : IRequest&lt;Result&lt;PagedList&lt;InvoiceListDto&gt;&gt;&gt;\n{\n    public int PageNumber { get; set; }\n    public int PageSize { get; set; }\n    public string SearchTerm { get; set; }\n}\n</code></pre></p>"},{"location":"system/architecture/patterns/cqrs/#implementation-in-dhanman","title":"Implementation in Dhanman","text":""},{"location":"system/architecture/patterns/cqrs/#mediatr-pattern","title":"MediatR Pattern","text":"<p>Dhanman uses MediatR library to implement CQRS, providing a mediator pattern for in-process messaging.</p>"},{"location":"system/architecture/patterns/cqrs/#project-structure","title":"Project Structure","text":"<pre><code>Dhanman.Sales/\n\u251c\u2500\u2500 Application/\n\u2502   \u251c\u2500\u2500 Commands/\n\u2502   \u2502   \u251c\u2500\u2500 CreateInvoice/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 CreateInvoiceCommand.cs\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 CreateInvoiceCommandHandler.cs\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 CreateInvoiceCommandValidator.cs\n\u2502   \u2502   \u2514\u2500\u2500 ApproveInvoice/\n\u2502   \u2502       \u251c\u2500\u2500 ApproveInvoiceCommand.cs\n\u2502   \u2502       \u2514\u2500\u2500 ApproveInvoiceCommandHandler.cs\n\u2502   \u251c\u2500\u2500 Queries/\n\u2502   \u2502   \u251c\u2500\u2500 GetInvoiceById/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 GetInvoiceByIdQuery.cs\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 GetInvoiceByIdQueryHandler.cs\n\u2502   \u2502   \u2514\u2500\u2500 GetInvoicesList/\n\u2502   \u2502       \u251c\u2500\u2500 GetInvoicesListQuery.cs\n\u2502   \u2502       \u2514\u2500\u2500 GetInvoicesListQueryHandler.cs\n\u2502   \u2514\u2500\u2500 DTOs/\n\u2502       \u251c\u2500\u2500 InvoiceDto.cs\n\u2502       \u2514\u2500\u2500 InvoiceListDto.cs\n\u251c\u2500\u2500 Domain/\n\u2502   \u251c\u2500\u2500 Entities/\n\u2502   \u2514\u2500\u2500 Events/\n\u2514\u2500\u2500 Infrastructure/\n    \u2514\u2500\u2500 Persistence/\n</code></pre>"},{"location":"system/architecture/patterns/cqrs/#command-handler-example","title":"Command Handler Example","text":"<pre><code>public class CreateInvoiceCommandHandler : IRequestHandler&lt;CreateInvoiceCommand, Result&lt;Guid&gt;&gt;\n{\n    private readonly IApplicationDbContext _context;\n    private readonly IEventPublisher _eventPublisher;\n    private readonly ILogger&lt;CreateInvoiceCommandHandler&gt; _logger;\n\n    public CreateInvoiceCommandHandler(\n        IApplicationDbContext context,\n        IEventPublisher eventPublisher,\n        ILogger&lt;CreateInvoiceCommandHandler&gt; logger)\n    {\n        _context = context;\n        _eventPublisher = eventPublisher;\n        _logger = logger;\n    }\n\n    public async Task&lt;Result&lt;Guid&gt;&gt; Handle(\n        CreateInvoiceCommand request, \n        CancellationToken cancellationToken)\n    {\n        try\n        {\n            // Create domain entity\n            var invoice = Invoice.Create(\n                request.CustomerId,\n                request.Amount,\n                request.DueDate,\n                request.LineItems\n            );\n\n            // Validate business rules\n            if (!invoice.IsValid())\n                return Result&lt;Guid&gt;.Failure(\"Invalid invoice data\");\n\n            // Persist to database\n            await _context.Invoices.AddAsync(invoice, cancellationToken);\n            await _context.SaveChangesAsync(cancellationToken);\n\n            // Publish domain event\n            await _eventPublisher.PublishAsync(\n                new InvoiceCreatedEvent(invoice.Id, invoice.CustomerId, invoice.Amount),\n                cancellationToken\n            );\n\n            _logger.LogInformation(\"Invoice {InvoiceId} created successfully\", invoice.Id);\n\n            return Result&lt;Guid&gt;.Success(invoice.Id);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error creating invoice\");\n            return Result&lt;Guid&gt;.Failure(\"Failed to create invoice\");\n        }\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/cqrs/#query-handler-example","title":"Query Handler Example","text":"<pre><code>public class GetInvoiceByIdQueryHandler : IRequestHandler&lt;GetInvoiceByIdQuery, Result&lt;InvoiceDto&gt;&gt;\n{\n    private readonly IApplicationDbContext _context;\n    private readonly IMapper _mapper;\n\n    public GetInvoiceByIdQueryHandler(\n        IApplicationDbContext context,\n        IMapper mapper)\n    {\n        _context = context;\n        _mapper = mapper;\n    }\n\n    public async Task&lt;Result&lt;InvoiceDto&gt;&gt; Handle(\n        GetInvoiceByIdQuery request,\n        CancellationToken cancellationToken)\n    {\n        var invoice = await _context.Invoices\n            .Include(i =&gt; i.Customer)\n            .Include(i =&gt; i.LineItems)\n            .FirstOrDefaultAsync(i =&gt; i.Id == request.InvoiceId, cancellationToken);\n\n        if (invoice == null)\n            return Result&lt;InvoiceDto&gt;.Failure(\"Invoice not found\");\n\n        var dto = _mapper.Map&lt;InvoiceDto&gt;(invoice);\n        return Result&lt;InvoiceDto&gt;.Success(dto);\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/cqrs/#benefits-in-dhanman-architecture","title":"Benefits in Dhanman Architecture","text":""},{"location":"system/architecture/patterns/cqrs/#1-scalability","title":"1. Scalability","text":"<ul> <li>Read and write operations can be scaled independently</li> <li>Read models can be optimized without affecting write logic</li> <li>Multiple read projections for different use cases</li> </ul>"},{"location":"system/architecture/patterns/cqrs/#2-performance","title":"2. Performance","text":"<ul> <li>Queries bypass complex domain logic</li> <li>Read models denormalized for fast retrieval</li> <li>Caching strategies applied to queries without affecting commands</li> </ul>"},{"location":"system/architecture/patterns/cqrs/#3-maintainability","title":"3. Maintainability","text":"<ul> <li>Single Responsibility Principle enforced</li> <li>Clear separation of concerns</li> <li>Easy to locate and modify specific operations</li> </ul>"},{"location":"system/architecture/patterns/cqrs/#4-testability","title":"4. Testability","text":"<ul> <li>Commands and queries tested independently</li> <li>Mock dependencies easily</li> <li>Unit tests focus on specific behaviors</li> </ul>"},{"location":"system/architecture/patterns/cqrs/#5-auditability","title":"5. Auditability","text":"<ul> <li>Commands tracked for compliance</li> <li>Clear record of state changes</li> <li>Event sourcing integration</li> </ul>"},{"location":"system/architecture/patterns/cqrs/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"system/architecture/patterns/cqrs/#validation-pipeline","title":"Validation Pipeline","text":"<p>FluentValidation integrated with MediatR pipeline:</p> <pre><code>public class CreateInvoiceCommandValidator : AbstractValidator&lt;CreateInvoiceCommand&gt;\n{\n    public CreateInvoiceCommandValidator()\n    {\n        RuleFor(x =&gt; x.CustomerId)\n            .NotEmpty().WithMessage(\"Customer is required\");\n\n        RuleFor(x =&gt; x.Amount)\n            .GreaterThan(0).WithMessage(\"Amount must be positive\");\n\n        RuleFor(x =&gt; x.DueDate)\n            .GreaterThan(DateTime.UtcNow).WithMessage(\"Due date must be in the future\");\n\n        RuleFor(x =&gt; x.LineItems)\n            .NotEmpty().WithMessage(\"At least one line item required\");\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/cqrs/#caching-strategy","title":"Caching Strategy","text":"<p>Queries can implement caching for frequently accessed data:</p> <pre><code>public class GetCustomerListQueryHandler : IRequestHandler&lt;GetCustomerListQuery, Result&lt;List&lt;CustomerDto&gt;&gt;&gt;\n{\n    private readonly IApplicationDbContext _context;\n    private readonly IDistributedCache _cache;\n    private readonly IMapper _mapper;\n\n    public async Task&lt;Result&lt;List&lt;CustomerDto&gt;&gt;&gt; Handle(\n        GetCustomerListQuery request,\n        CancellationToken cancellationToken)\n    {\n        var cacheKey = $\"customers-{request.PageNumber}-{request.PageSize}\";\n\n        // Try cache first\n        var cached = await _cache.GetAsync(cacheKey, cancellationToken);\n        if (cached != null)\n            return Result&lt;List&lt;CustomerDto&gt;&gt;.Success(\n                JsonSerializer.Deserialize&lt;List&lt;CustomerDto&gt;&gt;(cached)\n            );\n\n        // Fetch from database\n        var customers = await _context.Customers\n            .Skip((request.PageNumber - 1) * request.PageSize)\n            .Take(request.PageSize)\n            .ToListAsync(cancellationToken);\n\n        var dtos = _mapper.Map&lt;List&lt;CustomerDto&gt;&gt;(customers);\n\n        // Cache for 5 minutes\n        await _cache.SetAsync(\n            cacheKey,\n            JsonSerializer.SerializeToUtf8Bytes(dtos),\n            new DistributedCacheEntryOptions { AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(5) },\n            cancellationToken\n        );\n\n        return Result&lt;List&lt;CustomerDto&gt;&gt;.Success(dtos);\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/cqrs/#integration-with-event-driven-architecture","title":"Integration with Event-Driven Architecture","text":"<p>Commands often trigger domain events that are published to RabbitMQ:</p> <pre><code>1. User submits CreateInvoiceCommand\n   \u2193\n2. Command handler validates and creates Invoice entity\n   \u2193\n3. Invoice saved to PostgreSQL\n   \u2193\n4. InvoiceCreatedEvent published to RabbitMQ (dhanman.events exchange)\n   \u2193\n5. Common service consumes event and updates ledger\n   \u2193\n6. Notification service sends email to customer\n</code></pre>"},{"location":"system/architecture/patterns/cqrs/#best-practices","title":"Best Practices","text":""},{"location":"system/architecture/patterns/cqrs/#dos","title":"Do's \u2705","text":"<ul> <li>Keep commands and queries small and focused</li> <li>Use FluentValidation for input validation</li> <li>Return Result pattern for error handling <li>Log command execution for audit trails</li> <li>Publish domain events after successful commands</li> <li>Use AutoMapper for DTO projections</li> <li>Implement idempotency for commands</li>"},{"location":"system/architecture/patterns/cqrs/#donts","title":"Don'ts \u274c","text":"<ul> <li>Don't modify state in query handlers</li> <li>Don't mix command and query logic</li> <li>Don't return entities directly from queries (use DTOs)</li> <li>Don't skip validation in command handlers</li> <li>Don't forget to handle exceptions gracefully</li> <li>Don't create \"god\" commands with too many responsibilities</li> </ul>"},{"location":"system/architecture/patterns/cqrs/#monitoring-and-observability","title":"Monitoring and Observability","text":"<p>Commands and queries are instrumented for monitoring:</p> <pre><code>public class PerformanceMonitoringBehavior&lt;TRequest, TResponse&gt; : IPipelineBehavior&lt;TRequest, TResponse&gt;\n{\n    private readonly ILogger&lt;PerformanceMonitoringBehavior&lt;TRequest, TResponse&gt;&gt; _logger;\n    private readonly Stopwatch _timer;\n\n    public PerformanceMonitoringBehavior(ILogger&lt;PerformanceMonitoringBehavior&lt;TRequest, TResponse&gt;&gt; logger)\n    {\n        _logger = logger;\n        _timer = new Stopwatch();\n    }\n\n    public async Task&lt;TResponse&gt; Handle(TRequest request, RequestHandlerDelegate&lt;TResponse&gt; next, CancellationToken cancellationToken)\n    {\n        _timer.Start();\n        var response = await next();\n        _timer.Stop();\n\n        var requestName = typeof(TRequest).Name;\n        var elapsedMilliseconds = _timer.ElapsedMilliseconds;\n\n        if (elapsedMilliseconds &gt; 500)\n        {\n            _logger.LogWarning(\n                \"Long Running Request: {Name} ({ElapsedMilliseconds} milliseconds) {@Request}\",\n                requestName, elapsedMilliseconds, request);\n        }\n\n        return response;\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/cqrs/#related-patterns","title":"Related Patterns","text":"<ul> <li>Event Sourcing \u2014 Event-driven communication between services</li> <li>Domain-Driven Design \u2014 Rich domain models with CQRS</li> </ul>"},{"location":"system/architecture/patterns/cqrs/#summary","title":"Summary","text":"<p>CQRS in Dhanman provides: - Clear separation between reads and writes - Better performance and scalability - Improved code organization and maintainability - Foundation for event-driven architecture - Audit trail and compliance support</p> <p>Each microservice (Sales, Purchase, Payroll, etc.) implements CQRS consistently, ensuring a predictable and maintainable codebase across the entire system.</p>"},{"location":"system/architecture/patterns/domain-driven-design/","title":"Domain-Driven Design in Dhanman","text":""},{"location":"system/architecture/patterns/domain-driven-design/#overview","title":"Overview","text":"<p>Domain-Driven Design (DDD) is a strategic approach to software development that places the business domain and domain logic at the center of the system design. Dhanman's microservices architecture is built on DDD principles, ensuring that each service models its business domain accurately and maintains clear boundaries.</p>"},{"location":"system/architecture/patterns/domain-driven-design/#core-ddd-concepts","title":"Core DDD Concepts","text":""},{"location":"system/architecture/patterns/domain-driven-design/#1-ubiquitous-language","title":"1. Ubiquitous Language","text":"<p>A shared language used by both developers and domain experts to describe the business domain.</p> <p>Examples in Dhanman: - Invoice: Not just a \"document\" but a financial obligation with lifecycle states - Ledger Entry: Double-entry accounting record (debit/credit) - Resident: Not just a \"user\" but an apartment occupant with specific rights - Purchase Order: Formal procurement request with approval workflow - Salary Component: Part of payroll calculation (basic, allowances, deductions)</p>"},{"location":"system/architecture/patterns/domain-driven-design/#2-bounded-contexts","title":"2. Bounded Contexts","text":"<p>Clear boundaries within which a domain model is defined and applicable. Each microservice in Dhanman represents a bounded context.</p> Bounded Context Domain Focus Key Aggregates Sales Revenue and invoicing Invoice, Receipt, Customer Purchase Procurement and vendor management Purchase Order, Bill, Vendor, GRN Payroll Employee compensation Employee, Salary, Attendance Inventory Asset and stock management Asset, Stock Item, Location Community Resident and facility management Resident, Apartment, Facility Common Shared services and accounting Ledger Entry, Account, Organization"},{"location":"system/architecture/patterns/domain-driven-design/#3-context-mapping","title":"3. Context Mapping","text":"<p>Defines relationships between bounded contexts.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Sales     \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502   Common     \u2502\n\u2502  (Upstream) \u2502         \u2502 (Downstream) \u2502\n\u2502             \u2502         \u2502              \u2502\n\u2502 Publishes:  \u2502         \u2502 Consumes:    \u2502\n\u2502 - Invoice   \u2502         \u2502 - Invoice    \u2502\n\u2502   Created   \u2502         \u2502   Created    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502                        \u25b2\n      \u2502                        \u2502\n      \u2502                        \u2502\n      \u25bc                        \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Purchase  \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502              \u2502\n\u2502  (Upstream) \u2502         \u2502              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Relationship Patterns: - Shared Kernel: Common library (B2aTech.CrossCuttingConcern) shared across contexts - Customer-Supplier: Sales/Purchase \u2192 Common (Common adapts to upstream changes) - Published Language: Dhanman.Shared.Contracts defines event schemas - Anti-Corruption Layer: Each service translates external events to internal model</p>"},{"location":"system/architecture/patterns/domain-driven-design/#building-blocks","title":"Building Blocks","text":""},{"location":"system/architecture/patterns/domain-driven-design/#entities","title":"Entities","text":"<p>Objects with unique identity that persists over time.</p> <p>Characteristics: - Have unique identifier (usually GUID) - Identity matters more than attributes - Lifecycle spans multiple state changes - Can be referenced by other entities</p> <p>Example: <pre><code>public class Invoice : Entity&lt;Guid&gt;\n{\n    public Guid CustomerId { get; private set; }\n    public string InvoiceNumber { get; private set; }\n    public decimal Amount { get; private set; }\n    public InvoiceStatus Status { get; private set; }\n    public DateTime DueDate { get; private set; }\n    public DateTime CreatedAt { get; private set; }\n\n    private readonly List&lt;InvoiceLineItem&gt; _lineItems = new();\n    public IReadOnlyCollection&lt;InvoiceLineItem&gt; LineItems =&gt; _lineItems.AsReadOnly();\n\n    // Rich domain logic\n    public Result Approve(Guid approvedBy, DateTime approvalDate)\n    {\n        if (Status != InvoiceStatus.Draft)\n            return Result.Failure(\"Only draft invoices can be approved\");\n\n        if (approvalDate &lt; CreatedAt)\n            return Result.Failure(\"Approval date cannot be before creation date\");\n\n        Status = InvoiceStatus.Approved;\n        AddDomainEvent(new InvoiceApprovedEvent(Id, approvedBy, approvalDate));\n        return Result.Success();\n    }\n\n    public Result AddLineItem(string description, decimal quantity, decimal unitPrice)\n    {\n        if (Status != InvoiceStatus.Draft)\n            return Result.Failure(\"Cannot modify approved invoice\");\n\n        var lineItem = InvoiceLineItem.Create(description, quantity, unitPrice);\n        _lineItems.Add(lineItem);\n        RecalculateAmount();\n        return Result.Success();\n    }\n\n    private void RecalculateAmount()\n    {\n        Amount = _lineItems.Sum(item =&gt; item.Quantity * item.UnitPrice);\n    }\n}\n</code></pre></p>"},{"location":"system/architecture/patterns/domain-driven-design/#value-objects","title":"Value Objects","text":"<p>Objects without identity, defined by their attributes.</p> <p>Characteristics: - No unique identifier - Immutable - Compared by value, not reference - Can be shared safely</p> <p>Example: <pre><code>public class Money : ValueObject\n{\n    public decimal Amount { get; }\n    public string Currency { get; }\n\n    public Money(decimal amount, string currency)\n    {\n        if (amount &lt; 0)\n            throw new ArgumentException(\"Amount cannot be negative\");\n        if (string.IsNullOrWhiteSpace(currency))\n            throw new ArgumentException(\"Currency is required\");\n\n        Amount = amount;\n        Currency = currency.ToUpper();\n    }\n\n    public Money Add(Money other)\n    {\n        if (Currency != other.Currency)\n            throw new InvalidOperationException(\"Cannot add different currencies\");\n\n        return new Money(Amount + other.Amount, Currency);\n    }\n\n    public Money Multiply(decimal multiplier)\n    {\n        return new Money(Amount * multiplier, Currency);\n    }\n\n    protected override IEnumerable&lt;object&gt; GetEqualityComponents()\n    {\n        yield return Amount;\n        yield return Currency;\n    }\n}\n\npublic class Address : ValueObject\n{\n    public string Street { get; }\n    public string City { get; }\n    public string State { get; }\n    public string ZipCode { get; }\n    public string Country { get; }\n\n    public Address(string street, string city, string state, string zipCode, string country)\n    {\n        Street = street ?? throw new ArgumentNullException(nameof(street));\n        City = city ?? throw new ArgumentNullException(nameof(city));\n        State = state ?? throw new ArgumentNullException(nameof(state));\n        ZipCode = zipCode ?? throw new ArgumentNullException(nameof(zipCode));\n        Country = country ?? throw new ArgumentNullException(nameof(country));\n    }\n\n    protected override IEnumerable&lt;object&gt; GetEqualityComponents()\n    {\n        yield return Street;\n        yield return City;\n        yield return State;\n        yield return ZipCode;\n        yield return Country;\n    }\n}\n</code></pre></p>"},{"location":"system/architecture/patterns/domain-driven-design/#aggregates","title":"Aggregates","text":"<p>Cluster of entities and value objects with defined boundaries and a single root entity.</p> <p>Characteristics: - One entity is the Aggregate Root - External references only to root - Root enforces invariants - Transaction boundary - Loaded and saved as a unit</p> <p>Example: <pre><code>// Aggregate Root\npublic class PurchaseOrder : AggregateRoot&lt;Guid&gt;\n{\n    public string OrderNumber { get; private set; }\n    public Guid VendorId { get; private set; }\n    public POStatus Status { get; private set; }\n    public DateTime OrderDate { get; private set; }\n    public DateTime? ApprovalDate { get; private set; }\n    public Guid? ApprovedBy { get; private set; }\n\n    private readonly List&lt;PurchaseOrderItem&gt; _items = new();\n    public IReadOnlyCollection&lt;PurchaseOrderItem&gt; Items =&gt; _items.AsReadOnly();\n\n    private readonly List&lt;POApproval&gt; _approvals = new();\n    public IReadOnlyCollection&lt;POApproval&gt; Approvals =&gt; _approvals.AsReadOnly();\n\n    // Factory method\n    public static PurchaseOrder Create(Guid vendorId, string orderNumber)\n    {\n        var po = new PurchaseOrder\n        {\n            Id = Guid.NewGuid(),\n            VendorId = vendorId,\n            OrderNumber = orderNumber,\n            Status = POStatus.Draft,\n            OrderDate = DateTime.UtcNow\n        };\n\n        po.AddDomainEvent(new PurchaseOrderCreatedEvent(po.Id, vendorId, orderNumber));\n        return po;\n    }\n\n    // Business logic encapsulated in aggregate\n    public Result AddItem(string itemName, decimal quantity, decimal unitPrice)\n    {\n        if (Status != POStatus.Draft)\n            return Result.Failure(\"Cannot add items to non-draft PO\");\n\n        var item = new PurchaseOrderItem(Id, itemName, quantity, unitPrice);\n        _items.Add(item);\n\n        return Result.Success();\n    }\n\n    public Result Submit()\n    {\n        if (Status != POStatus.Draft)\n            return Result.Failure(\"Only draft POs can be submitted\");\n\n        if (!_items.Any())\n            return Result.Failure(\"Cannot submit PO without items\");\n\n        Status = POStatus.PendingApproval;\n        AddDomainEvent(new PurchaseOrderSubmittedEvent(Id, OrderNumber, GetTotalAmount()));\n\n        return Result.Success();\n    }\n\n    public Result Approve(Guid approverId, string comments)\n    {\n        if (Status != POStatus.PendingApproval)\n            return Result.Failure(\"Only pending POs can be approved\");\n\n        var approval = new POApproval(approverId, DateTime.UtcNow, comments);\n        _approvals.Add(approval);\n\n        // Business rule: requires 2 approvals for amount &gt; 50000\n        if (GetTotalAmount() &gt; 50000 &amp;&amp; _approvals.Count &lt; 2)\n        {\n            return Result.Success(\"Approval recorded, awaiting second approval\");\n        }\n\n        Status = POStatus.Approved;\n        ApprovalDate = DateTime.UtcNow;\n        ApprovedBy = approverId;\n\n        AddDomainEvent(new PurchaseOrderApprovedEvent(Id, approverId));\n        return Result.Success();\n    }\n\n    private decimal GetTotalAmount()\n    {\n        return _items.Sum(i =&gt; i.Quantity * i.UnitPrice);\n    }\n}\n\n// Entity within aggregate (not aggregate root)\npublic class PurchaseOrderItem : Entity&lt;Guid&gt;\n{\n    public Guid PurchaseOrderId { get; private set; }\n    public string ItemName { get; private set; }\n    public decimal Quantity { get; private set; }\n    public decimal UnitPrice { get; private set; }\n    public decimal TotalAmount =&gt; Quantity * UnitPrice;\n\n    internal PurchaseOrderItem(Guid purchaseOrderId, string itemName, decimal quantity, decimal unitPrice)\n    {\n        Id = Guid.NewGuid();\n        PurchaseOrderId = purchaseOrderId;\n        ItemName = itemName;\n        Quantity = quantity;\n        UnitPrice = unitPrice;\n    }\n}\n\n// Value object within aggregate\npublic class POApproval : ValueObject\n{\n    public Guid ApproverId { get; }\n    public DateTime ApprovalDate { get; }\n    public string Comments { get; }\n\n    public POApproval(Guid approverId, DateTime approvalDate, string comments)\n    {\n        ApproverId = approverId;\n        ApprovalDate = approvalDate;\n        Comments = comments;\n    }\n\n    protected override IEnumerable&lt;object&gt; GetEqualityComponents()\n    {\n        yield return ApproverId;\n        yield return ApprovalDate;\n    }\n}\n</code></pre></p>"},{"location":"system/architecture/patterns/domain-driven-design/#domain-events","title":"Domain Events","text":"<p>Represent something significant that happened in the domain.</p> <p>Characteristics: - Past tense naming (something happened) - Immutable - Contain relevant data - Published after successful state change - Can trigger side effects in other aggregates/services</p> <p>Example: <pre><code>public class InvoiceCreatedEvent : DomainEvent\n{\n    public Guid InvoiceId { get; }\n    public Guid CustomerId { get; }\n    public string InvoiceNumber { get; }\n    public decimal Amount { get; }\n    public DateTime DueDate { get; }\n    public DateTime CreatedAt { get; }\n\n    public InvoiceCreatedEvent(\n        Guid invoiceId, \n        Guid customerId, \n        string invoiceNumber, \n        decimal amount, \n        DateTime dueDate)\n    {\n        InvoiceId = invoiceId;\n        CustomerId = customerId;\n        InvoiceNumber = invoiceNumber;\n        Amount = amount;\n        DueDate = dueDate;\n        CreatedAt = DateTime.UtcNow;\n    }\n}\n\n// Base class for domain events\npublic abstract class DomainEvent\n{\n    public Guid EventId { get; } = Guid.NewGuid();\n    public DateTime OccurredAt { get; } = DateTime.UtcNow;\n}\n</code></pre></p>"},{"location":"system/architecture/patterns/domain-driven-design/#repositories","title":"Repositories","text":"<p>Provide collection-like interface for accessing aggregates.</p> <p>Characteristics: - One repository per aggregate root - Abstracts persistence details - Returns fully-formed aggregates - Maintains aggregate boundaries</p> <p>Example: <pre><code>public interface IInvoiceRepository\n{\n    Task&lt;Invoice?&gt; GetByIdAsync(Guid id, CancellationToken cancellationToken = default);\n    Task&lt;Invoice?&gt; GetByNumberAsync(string invoiceNumber, CancellationToken cancellationToken = default);\n    Task&lt;List&lt;Invoice&gt;&gt; GetPendingInvoicesAsync(CancellationToken cancellationToken = default);\n    Task AddAsync(Invoice invoice, CancellationToken cancellationToken = default);\n    Task UpdateAsync(Invoice invoice, CancellationToken cancellationToken = default);\n    Task DeleteAsync(Guid id, CancellationToken cancellationToken = default);\n}\n\n// Implementation\npublic class InvoiceRepository : IInvoiceRepository\n{\n    private readonly SalesDbContext _context;\n\n    public InvoiceRepository(SalesDbContext context)\n    {\n        _context = context;\n    }\n\n    public async Task&lt;Invoice?&gt; GetByIdAsync(Guid id, CancellationToken cancellationToken = default)\n    {\n        // Load entire aggregate (root + children)\n        return await _context.Invoices\n            .Include(i =&gt; i.LineItems)\n            .Include(i =&gt; i.Payments)\n            .FirstOrDefaultAsync(i =&gt; i.Id == id, cancellationToken);\n    }\n\n    public async Task AddAsync(Invoice invoice, CancellationToken cancellationToken = default)\n    {\n        await _context.Invoices.AddAsync(invoice, cancellationToken);\n        await _context.SaveChangesAsync(cancellationToken);\n\n        // Publish domain events after successful save\n        await PublishDomainEventsAsync(invoice, cancellationToken);\n    }\n\n    private async Task PublishDomainEventsAsync(Invoice invoice, CancellationToken cancellationToken)\n    {\n        var events = invoice.GetDomainEvents();\n        foreach (var @event in events)\n        {\n            await _eventPublisher.PublishAsync(@event, cancellationToken);\n        }\n        invoice.ClearDomainEvents();\n    }\n}\n</code></pre></p>"},{"location":"system/architecture/patterns/domain-driven-design/#domain-services","title":"Domain Services","text":"<p>Operations that don't naturally belong to an entity or value object.</p> <p>When to use: - Operation involves multiple aggregates - Complex calculation or algorithm - External system integration - Stateless behavior</p> <p>Example: <pre><code>public interface IInvoiceNumberGenerator\n{\n    Task&lt;string&gt; GenerateNextNumberAsync(Guid organizationId, CancellationToken cancellationToken);\n}\n\npublic class InvoiceNumberGenerator : IInvoiceNumberGenerator\n{\n    private readonly ISalesDbContext _context;\n\n    public async Task&lt;string&gt; GenerateNextNumberAsync(Guid organizationId, CancellationToken cancellationToken)\n    {\n        var lastInvoice = await _context.Invoices\n            .Where(i =&gt; i.OrganizationId == organizationId)\n            .OrderByDescending(i =&gt; i.CreatedAt)\n            .FirstOrDefaultAsync(cancellationToken);\n\n        var year = DateTime.UtcNow.Year;\n        var month = DateTime.UtcNow.Month;\n\n        if (lastInvoice == null)\n        {\n            return $\"INV-{year}{month:D2}-0001\";\n        }\n\n        // Parse last number and increment\n        var parts = lastInvoice.InvoiceNumber.Split('-');\n        var sequence = int.Parse(parts[2]) + 1;\n\n        return $\"INV-{year}{month:D2}-{sequence:D4}\";\n    }\n}\n\npublic interface ILateFeeCalculator\n{\n    Money CalculateLateFee(Invoice invoice, DateTime currentDate);\n}\n\npublic class LateFeeCalculator : ILateFeeCalculator\n{\n    private const decimal FeePercentage = 0.02m; // 2% per month\n    private const int GracePeriodDays = 3;\n\n    public Money CalculateLateFee(Invoice invoice, DateTime currentDate)\n    {\n        if (invoice.IsPaid || currentDate &lt;= invoice.DueDate.AddDays(GracePeriodDays))\n        {\n            return new Money(0, \"USD\");\n        }\n\n        var daysOverdue = (currentDate - invoice.DueDate).Days - GracePeriodDays;\n        var monthsOverdue = Math.Ceiling(daysOverdue / 30.0);\n\n        var lateFee = invoice.Amount * FeePercentage * (decimal)monthsOverdue;\n        return new Money(lateFee, \"USD\");\n    }\n}\n</code></pre></p>"},{"location":"system/architecture/patterns/domain-driven-design/#layered-architecture","title":"Layered Architecture","text":"<p>Dhanman follows a clean architecture pattern aligned with DDD:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Presentation Layer              \u2502\n\u2502      (API Controllers, SignalR)         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        Application Layer                \u2502\n\u2502  (Commands, Queries, Handlers, DTOs)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          Domain Layer                   \u2502\n\u2502 (Entities, Value Objects, Aggregates,   \u2502\n\u2502  Domain Events, Domain Services)        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2193\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       Infrastructure Layer              \u2502\n\u2502 (Repositories, EF Core, RabbitMQ,       \u2502\n\u2502  External Services)                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"system/architecture/patterns/domain-driven-design/#layer-responsibilities","title":"Layer Responsibilities","text":"<p>1. Domain Layer (Core) - Contains business logic - No dependencies on other layers - Defines interfaces for repositories - Pure C# with no framework dependencies</p> <p>2. Application Layer - Orchestrates domain objects - Implements CQRS handlers - Defines application services - Maps between domain and DTOs - Depends only on Domain layer</p> <p>3. Infrastructure Layer - Implements repository interfaces - Database access via EF Core - Messaging infrastructure (RabbitMQ) - External API integrations - Depends on Domain and Application layers</p> <p>4. Presentation Layer (API) - HTTP endpoints - Request/Response models - Authentication/Authorization - Depends on Application layer</p>"},{"location":"system/architecture/patterns/domain-driven-design/#tactical-patterns-in-practice","title":"Tactical Patterns in Practice","text":""},{"location":"system/architecture/patterns/domain-driven-design/#example-creating-an-invoice","title":"Example: Creating an Invoice","text":"<p>1. API Endpoint (Presentation) <pre><code>[ApiController]\n[Route(\"api/[controller]\")]\npublic class InvoicesController : ControllerBase\n{\n    private readonly IMediator _mediator;\n\n    [HttpPost]\n    public async Task&lt;IActionResult&gt; CreateInvoice([FromBody] CreateInvoiceRequest request)\n    {\n        var command = new CreateInvoiceCommand\n        {\n            CustomerId = request.CustomerId,\n            LineItems = request.LineItems,\n            DueDate = request.DueDate\n        };\n\n        var result = await _mediator.Send(command);\n\n        if (result.IsSuccess)\n            return CreatedAtAction(nameof(GetInvoice), new { id = result.Value }, result.Value);\n\n        return BadRequest(result.Error);\n    }\n}\n</code></pre></p> <p>2. Command Handler (Application) <pre><code>public class CreateInvoiceCommandHandler : IRequestHandler&lt;CreateInvoiceCommand, Result&lt;Guid&gt;&gt;\n{\n    private readonly IInvoiceRepository _invoiceRepository;\n    private readonly IInvoiceNumberGenerator _numberGenerator;\n    private readonly ICustomerRepository _customerRepository;\n\n    public async Task&lt;Result&lt;Guid&gt;&gt; Handle(CreateInvoiceCommand request, CancellationToken cancellationToken)\n    {\n        // Validate customer exists\n        var customer = await _customerRepository.GetByIdAsync(request.CustomerId, cancellationToken);\n        if (customer == null)\n            return Result&lt;Guid&gt;.Failure(\"Customer not found\");\n\n        // Generate invoice number (Domain Service)\n        var invoiceNumber = await _numberGenerator.GenerateNextNumberAsync(\n            customer.OrganizationId, \n            cancellationToken\n        );\n\n        // Create aggregate using factory method\n        var invoice = Invoice.Create(\n            customer.Id,\n            invoiceNumber,\n            request.DueDate\n        );\n\n        // Add line items\n        foreach (var item in request.LineItems)\n        {\n            var result = invoice.AddLineItem(item.Description, item.Quantity, item.UnitPrice);\n            if (result.IsFailure)\n                return Result&lt;Guid&gt;.Failure(result.Error);\n        }\n\n        // Persist aggregate\n        await _invoiceRepository.AddAsync(invoice, cancellationToken);\n\n        // Domain events automatically published by repository\n        return Result&lt;Guid&gt;.Success(invoice.Id);\n    }\n}\n</code></pre></p> <p>3. Domain Model (Domain) <pre><code>public class Invoice : AggregateRoot&lt;Guid&gt;\n{\n    // Domain logic as shown earlier\n    public static Invoice Create(Guid customerId, string invoiceNumber, DateTime dueDate)\n    {\n        var invoice = new Invoice\n        {\n            Id = Guid.NewGuid(),\n            CustomerId = customerId,\n            InvoiceNumber = invoiceNumber,\n            DueDate = dueDate,\n            Status = InvoiceStatus.Draft,\n            CreatedAt = DateTime.UtcNow\n        };\n\n        invoice.AddDomainEvent(new InvoiceCreatedEvent(\n            invoice.Id,\n            customerId,\n            invoiceNumber,\n            0m, // Amount calculated when line items added\n            dueDate\n        ));\n\n        return invoice;\n    }\n}\n</code></pre></p> <p>4. Repository Implementation (Infrastructure) <pre><code>public class InvoiceRepository : IInvoiceRepository\n{\n    private readonly SalesDbContext _context;\n    private readonly IEventPublisher _eventPublisher;\n\n    public async Task AddAsync(Invoice invoice, CancellationToken cancellationToken = default)\n    {\n        await _context.Invoices.AddAsync(invoice, cancellationToken);\n        await _context.SaveChangesAsync(cancellationToken);\n\n        // Publish domain events\n        var events = invoice.GetDomainEvents();\n        foreach (var @event in events)\n        {\n            await _eventPublisher.PublishAsync(@event, cancellationToken);\n        }\n        invoice.ClearDomainEvents();\n    }\n}\n</code></pre></p>"},{"location":"system/architecture/patterns/domain-driven-design/#advantages-in-dhanman","title":"Advantages in Dhanman","text":""},{"location":"system/architecture/patterns/domain-driven-design/#1-business-logic-centralization","title":"1. Business Logic Centralization","text":"<p>All business rules in domain layer, easy to locate and modify</p>"},{"location":"system/architecture/patterns/domain-driven-design/#2-testability","title":"2. Testability","text":"<p>Domain logic tested independently without infrastructure concerns</p>"},{"location":"system/architecture/patterns/domain-driven-design/#3-flexibility","title":"3. Flexibility","text":"<p>Swap implementations (e.g., change database) without affecting business logic</p>"},{"location":"system/architecture/patterns/domain-driven-design/#4-scalability","title":"4. Scalability","text":"<p>Clear boundaries enable service decomposition</p>"},{"location":"system/architecture/patterns/domain-driven-design/#5-maintainability","title":"5. Maintainability","text":"<p>Ubiquitous language reduces misunderstandings</p>"},{"location":"system/architecture/patterns/domain-driven-design/#6-evolution","title":"6. Evolution","text":"<p>Domain model evolves with business needs</p>"},{"location":"system/architecture/patterns/domain-driven-design/#best-practices","title":"Best Practices","text":""},{"location":"system/architecture/patterns/domain-driven-design/#dos","title":"Do's \u2705","text":"<ul> <li>Keep aggregates small and focused</li> <li>Enforce invariants in aggregate roots</li> <li>Use factories for complex object creation</li> <li>Make value objects immutable</li> <li>Publish domain events after state changes</li> <li>Use repositories only for aggregate roots</li> <li>Keep domain layer free of infrastructure concerns</li> <li>Use ubiquitous language consistently</li> </ul>"},{"location":"system/architecture/patterns/domain-driven-design/#donts","title":"Don'ts \u274c","text":"<ul> <li>Don't expose aggregate internals</li> <li>Don't navigate from one aggregate to another directly</li> <li>Don't create \"god\" aggregates with too many responsibilities</li> <li>Don't put business logic in application layer</li> <li>Don't use domain entities in API responses (use DTOs)</li> <li>Don't forget transaction boundaries</li> <li>Don't over-engineer with unnecessary abstractions</li> </ul>"},{"location":"system/architecture/patterns/domain-driven-design/#related-documentation","title":"Related Documentation","text":"<ul> <li>CQRS Pattern \u2014 Separating reads and writes</li> <li>Event Sourcing \u2014 Event-driven architecture</li> </ul>"},{"location":"system/architecture/patterns/domain-driven-design/#summary","title":"Summary","text":"<p>Domain-Driven Design in Dhanman provides: - Clear domain model aligned with business - Rich behavior in domain entities - Strong aggregate boundaries - Event-driven communication - Testable and maintainable codebase - Foundation for microservices architecture</p> <p>Each microservice implements DDD tactical patterns consistently, ensuring a robust and business-aligned architecture.</p>"},{"location":"system/architecture/patterns/event-sourcing/","title":"Dhanman Microservices Messaging Architecture","text":""},{"location":"system/architecture/patterns/event-sourcing/#overview","title":"Overview","text":"<p>Dhanman uses RabbitMQ as the primary message broker to enable asynchronous, event-driven communication between microservices. The messaging infrastructure is built on top of B2aTech.CrossCuttingConcern library with patterns inspired by MassTransit for reliable, scalable inter-service communication.</p> <p>This architecture enables: - Loose coupling between services - Asynchronous processing for better responsiveness - Event-driven workflows across bounded contexts - Scalability through distributed message processing - Resilience with automatic retries and dead-letter handling</p>"},{"location":"system/architecture/patterns/event-sourcing/#1-messaging-architecture-overview","title":"1. Messaging Architecture Overview","text":""},{"location":"system/architecture/patterns/event-sourcing/#key-concepts","title":"Key Concepts","text":""},{"location":"system/architecture/patterns/event-sourcing/#exchange","title":"Exchange","text":"<p>The entry point for messages in RabbitMQ. Routes messages to queues based on exchange type and routing keys.</p> <p>Exchange Types: - Fanout: Broadcasts messages to all bound queues (used for events) - Direct: Routes to specific queues based on routing keys (used for commands) - Topic: Routes based on routing key patterns (future use) - Headers: Routes based on message headers (not currently used)</p>"},{"location":"system/architecture/patterns/event-sourcing/#queue","title":"Queue","text":"<p>Holds messages until consumed by a service. Each microservice has dedicated queues for commands and events.</p> <p>Queue Properties: - Durable: Survives broker restarts - Auto-delete: Removed when no consumers - Exclusive: Used by single connection only - TTL: Time-to-live for messages</p>"},{"location":"system/architecture/patterns/event-sourcing/#routing-key","title":"Routing Key","text":"<p>String used by exchanges to determine message routing. Format: <code>{service}.{message-type}.{action}</code></p> <p>Examples: - <code>sales.command.create-invoice</code> - <code>sales.event.invoice-created</code> - <code>common.command.send-notification</code></p>"},{"location":"system/architecture/patterns/event-sourcing/#publisher","title":"Publisher","text":"<p>Service that sends messages to exchanges. Uses <code>IEventPublisher</code> or <code>ICommandPublisher</code> interfaces.</p>"},{"location":"system/architecture/patterns/event-sourcing/#consumer","title":"Consumer","text":"<p>Service that receives and processes messages from queues. Implements <code>IMessageHandler&lt;T&gt;</code> interface.</p>"},{"location":"system/architecture/patterns/event-sourcing/#masstransit-inspired-patterns","title":"MassTransit-Inspired Patterns","text":"<p>While Dhanman uses a custom implementation built on RabbitMQ.Client, it adopts proven patterns from MassTransit:</p> <ol> <li>Message Conventions: Clear separation of commands, events, and queries</li> <li>Retry Policies: Exponential backoff for transient failures</li> <li>Circuit Breaker: Prevent cascade failures</li> <li>Outbox Pattern: Ensure exactly-once delivery</li> <li>Saga Pattern: Long-running distributed transactions</li> <li>Consumer Configuration: Concurrent message processing with prefetch limits</li> </ol>"},{"location":"system/architecture/patterns/event-sourcing/#2-our-exchanges","title":"2. Our Exchanges","text":"<p>We have two main exchanges configured:</p> Exchange Name Type Purpose dhanman.events Fanout Broadcast event messages to all subscribed queues dhanman.commands Direct Route commands to specific service queues based on routing keys"},{"location":"system/architecture/patterns/event-sourcing/#3-queues","title":"3. Queues","text":"<p>Each microservice has dedicated queues to consume commands and events:</p> Microservice Command Queue Event Queue Sales sales.commands sales.events Purchase purchase.commands purchase.events Common common.commands common.events Community community.commands community.events Payroll payroll.commands payroll.events Inventory inventory.commands inventory.events"},{"location":"system/architecture/patterns/event-sourcing/#4-types-of-messages","title":"4. Types of Messages","text":"<ul> <li> <p>Events:   Represent something that has happened (e.g., <code>UserCreatedEvent</code>, <code>InvoiceCreatedEvent</code>). Published typically with fanout exchange to notify all interested services.</p> </li> <li> <p>Commands:   Represent instructions for something to be done (e.g., <code>CreateInvoiceCommand</code>). Routed with direct exchange using routing keys targeting specific service queues.</p> </li> </ul>"},{"location":"system/architecture/patterns/event-sourcing/#5-publishers-consumers","title":"5. Publishers &amp; Consumers","text":""},{"location":"system/architecture/patterns/event-sourcing/#publishers","title":"Publishers","text":"<ul> <li> <p><code>IEventPublisher</code> (in B2aTech.CrossCuttingConcern):   Publishes events to <code>dhanman.events</code> fanout exchange using contracts from Dhanman.Shared.Contracts.</p> </li> <li> <p><code>ICommandPublisher</code> (in B2aTech.CrossCuttingConcern):   Publishes commands to <code>dhanman.commands</code> direct exchange with routing keys.</p> </li> </ul>"},{"location":"system/architecture/patterns/event-sourcing/#consumers","title":"Consumers","text":"<ul> <li> <p><code>IEventConsumer</code> (in B2aTech.CrossCuttingConcern):   Consumes from event queues subscribed to the fanout exchange.</p> </li> <li> <p><code>ICommandConsumer</code> (in B2aTech.CrossCuttingConcern):   Consumes from command queues directly routed by the command exchange.</p> </li> </ul>"},{"location":"system/architecture/patterns/event-sourcing/#6-common-service-role","title":"6. Common Service Role","text":"<p>The Common microservice primarily consumes events like:</p> <ul> <li><code>InvoiceCreatedEvent</code> </li> <li><code>PaymentMadeEvent</code> </li> <li><code>PaymentReceivedEvent</code> </li> <li><code>BillCreatedEvent</code> </li> <li><code>SalaryPostedEvent</code> </li> <li><code>SalaryCreatedEvent</code> </li> </ul> <p>which originate in Sales, Purchase, Payroll, etc. Common processes these to update ledger entries and maintain core accounting records.</p>"},{"location":"system/architecture/patterns/event-sourcing/#7-what-has-been-done","title":"7. What Has Been Done","text":"<ul> <li>RabbitMQ instances deployed with Docker for QA and Production.</li> <li>Exchanges and queues declared programmatically at startup for idempotency.</li> <li>Messaging infrastructure abstracted in B2aTech.CrossCuttingConcern reusable package.</li> <li>Shared contracts for events and commands defined in Dhanman.Shared.Contracts.</li> <li>Each microservice (Sales, Purchase, Common, etc.) has a background hosted service that listens to its respective queues.</li> <li>Basic event and command handlers implemented (e.g., <code>UserCreatedEventHandler</code>).</li> <li>Dependency injection and service registration set up for messaging components.</li> </ul>"},{"location":"system/architecture/patterns/event-sourcing/#8-developer-responsibilities-going-forward","title":"8. Developer Responsibilities Going Forward","text":""},{"location":"system/architecture/patterns/event-sourcing/#defining-new-eventscommands","title":"Defining New Events/Commands","text":"<ul> <li>Add DTOs to Dhanman.Shared.Contracts for new messages.</li> </ul>"},{"location":"system/architecture/patterns/event-sourcing/#publishing-messages","title":"Publishing Messages","text":"<ul> <li>Use <code>IEventPublisher</code> or <code>ICommandPublisher</code> in your microservice (e.g., Sales) to publish messages upon domain events or actions.</li> </ul>"},{"location":"system/architecture/patterns/event-sourcing/#consuming-messages","title":"Consuming Messages","text":"<ul> <li>Implement <code>IMessageHandler&lt;T&gt;</code> for relevant events/commands in consuming microservices (e.g., Common listens to Sales events).</li> </ul>"},{"location":"system/architecture/patterns/event-sourcing/#queue-exchange-management","title":"Queue &amp; Exchange Management","text":"<ul> <li>Declare any new queues or bindings in <code>RabbitMqInitializer</code> or ensure they are declared via consumers\u2019 startup code.</li> </ul>"},{"location":"system/architecture/patterns/event-sourcing/#hosted-service-registration","title":"Hosted Service Registration","text":"<ul> <li>Register <code>RabbitMqListenerHostedService</code> in your microservice\u2019s <code>Program.cs</code> to start consuming messages.</li> </ul>"},{"location":"system/architecture/patterns/event-sourcing/#handle-idempotency","title":"Handle Idempotency","text":"<ul> <li>Make your handlers resilient to repeated or duplicate messages.</li> </ul>"},{"location":"system/architecture/patterns/event-sourcing/#9-useful-rabbitmq-management-tips","title":"9. Useful RabbitMQ Management Tips","text":"<ul> <li>Use the RabbitMQ Management UI (rabbitmq.dhanman.com) to monitor queues, exchanges, message rates.</li> <li>View ready/unacknowledged message counts to monitor health.</li> <li>Inspect logs and dead-letter queues for errors.</li> </ul>"},{"location":"system/architecture/patterns/event-sourcing/#summary","title":"Summary","text":"<p>This messaging architecture, built on B2aTech.CrossCuttingConcern and Dhanman.Shared.Contracts, establishes a consistent, scalable foundation for inter-service communication across the Dhanman ecosystem. Developers extending any microservice should align with these patterns to ensure reliability and maintainability.</p>"},{"location":"system/architecture/patterns/event-sourcing/#architecture-diagram","title":"Architecture Diagram","text":""},{"location":"system/architecture/patterns/resilience/","title":"Resilience and Fault Tolerance Patterns","text":""},{"location":"system/architecture/patterns/resilience/#overview","title":"Overview","text":"<p>Dhanman's microservices architecture implements comprehensive resilience patterns to ensure system reliability, fault tolerance, and graceful degradation under failure conditions. This document outlines the strategies and patterns used to build a robust, self-healing distributed system.</p>"},{"location":"system/architecture/patterns/resilience/#core-resilience-patterns","title":"Core Resilience Patterns","text":""},{"location":"system/architecture/patterns/resilience/#1-retry-pattern","title":"1. Retry Pattern","text":"<p>Automatically retry failed operations with exponential backoff.</p> <p>Use Cases: - Transient network failures - Temporary database connection issues - External API timeouts - Message broker connection drops</p> <p>Implementation:</p> <pre><code>public class RetryPolicyConfiguration\n{\n    public static IAsyncPolicy&lt;HttpResponseMessage&gt; GetRetryPolicy()\n    {\n        return HttpPolicyExtensions\n            .HandleTransientHttpError() // 5xx, 408, network failures\n            .OrResult(msg =&gt; msg.StatusCode == System.Net.HttpStatusCode.TooManyRequests)\n            .WaitAndRetryAsync(\n                retryCount: 3,\n                sleepDurationProvider: retryAttempt =&gt; \n                    TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)), // Exponential backoff\n                onRetry: (outcome, timespan, retryCount, context) =&gt;\n                {\n                    _logger.LogWarning(\n                        \"Retry {RetryCount} after {Delay}ms due to {Reason}\",\n                        retryCount,\n                        timespan.TotalMilliseconds,\n                        outcome.Exception?.Message ?? outcome.Result.StatusCode.ToString()\n                    );\n                }\n            );\n    }\n}\n\n// Usage in HTTP client\nservices.AddHttpClient&lt;IExternalApiClient, ExternalApiClient&gt;()\n    .AddPolicyHandler(RetryPolicyConfiguration.GetRetryPolicy());\n</code></pre> <p>RabbitMQ Message Retry:</p> <pre><code>public class RabbitMqConsumer\n{\n    private readonly IConnection _connection;\n    private readonly ILogger&lt;RabbitMqConsumer&gt; _logger;\n\n    public async Task&lt;bool&gt; ProcessMessageWithRetryAsync&lt;T&gt;(\n        T message, \n        Func&lt;T, CancellationToken, Task&gt; handler,\n        CancellationToken cancellationToken)\n    {\n        var maxRetries = 3;\n        var retryDelays = new[] { 1000, 5000, 15000 }; // 1s, 5s, 15s\n\n        for (int attempt = 0; attempt &lt;= maxRetries; attempt++)\n        {\n            try\n            {\n                await handler(message, cancellationToken);\n                return true;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogWarning(\n                    ex,\n                    \"Message processing failed (attempt {Attempt}/{MaxRetries})\",\n                    attempt + 1,\n                    maxRetries + 1\n                );\n\n                if (attempt &lt; maxRetries)\n                {\n                    await Task.Delay(retryDelays[attempt], cancellationToken);\n                }\n                else\n                {\n                    // Move to dead-letter queue after all retries exhausted\n                    await MoveToDeadLetterQueueAsync(message);\n                    return false;\n                }\n            }\n        }\n\n        return false;\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#2-circuit-breaker-pattern","title":"2. Circuit Breaker Pattern","text":"<p>Prevent cascade failures by stopping calls to failing services.</p> <p>States: - Closed: Normal operation, requests pass through - Open: Failure threshold exceeded, requests fail immediately - Half-Open: Testing if service recovered</p> <p>Implementation:</p> <pre><code>public class CircuitBreakerConfiguration\n{\n    public static IAsyncPolicy&lt;HttpResponseMessage&gt; GetCircuitBreakerPolicy()\n    {\n        return HttpPolicyExtensions\n            .HandleTransientHttpError()\n            .CircuitBreakerAsync(\n                handledEventsAllowedBeforeBreaking: 5, // Open after 5 failures\n                durationOfBreak: TimeSpan.FromSeconds(30), // Stay open for 30s\n                onBreak: (outcome, duration) =&gt;\n                {\n                    _logger.LogError(\n                        \"Circuit breaker opened for {Duration}s due to {Reason}\",\n                        duration.TotalSeconds,\n                        outcome.Exception?.Message ?? outcome.Result.StatusCode.ToString()\n                    );\n                },\n                onReset: () =&gt;\n                {\n                    _logger.LogInformation(\"Circuit breaker reset - service recovered\");\n                },\n                onHalfOpen: () =&gt;\n                {\n                    _logger.LogInformation(\"Circuit breaker half-open - testing service\");\n                }\n            );\n    }\n}\n\n// Combined with retry policy\nservices.AddHttpClient&lt;IPaymentGatewayClient, PaymentGatewayClient&gt;()\n    .AddPolicyHandler(RetryPolicyConfiguration.GetRetryPolicy())\n    .AddPolicyHandler(CircuitBreakerConfiguration.GetCircuitBreakerPolicy());\n</code></pre> <p>Circuit Breaker with Polly:</p> <pre><code>public class ResilientPaymentService\n{\n    private readonly IPaymentGatewayClient _paymentGateway;\n    private readonly IAsyncPolicy&lt;PaymentResult&gt; _policy;\n\n    public ResilientPaymentService(IPaymentGatewayClient paymentGateway)\n    {\n        _paymentGateway = paymentGateway;\n\n        var retryPolicy = Policy&lt;PaymentResult&gt;\n            .Handle&lt;HttpRequestException&gt;()\n            .Or&lt;TimeoutException&gt;()\n            .WaitAndRetryAsync(3, retryAttempt =&gt; TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)));\n\n        var circuitBreakerPolicy = Policy&lt;PaymentResult&gt;\n            .Handle&lt;HttpRequestException&gt;()\n            .CircuitBreakerAsync(\n                handledEventsAllowedBeforeBreaking: 5,\n                durationOfBreak: TimeSpan.FromMinutes(1)\n            );\n\n        _policy = Policy.WrapAsync(retryPolicy, circuitBreakerPolicy);\n    }\n\n    public async Task&lt;PaymentResult&gt; ProcessPaymentAsync(PaymentRequest request)\n    {\n        return await _policy.ExecuteAsync(async () =&gt;\n        {\n            return await _paymentGateway.ProcessAsync(request);\n        });\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#3-bulkhead-pattern","title":"3. Bulkhead Pattern","text":"<p>Isolate resources to prevent total system failure.</p> <p>Implementation:</p> <pre><code>public class BulkheadConfiguration\n{\n    public static IAsyncPolicy GetBulkheadPolicy(int maxParallelization, int maxQueuedActions)\n    {\n        return Policy.BulkheadAsync(\n            maxParallelization: maxParallelization,\n            maxQueuingActions: maxQueuedActions,\n            onBulkheadRejectedAsync: context =&gt;\n            {\n                _logger.LogWarning(\n                    \"Bulkhead rejected execution - all {MaxParallelization} slots in use\",\n                    maxParallelization\n                );\n                return Task.CompletedTask;\n            }\n        );\n    }\n}\n\n// Separate thread pools for different operations\nservices.AddHttpClient(\"CriticalOperations\")\n    .AddPolicyHandler(BulkheadConfiguration.GetBulkheadPolicy(10, 20));\n\nservices.AddHttpClient(\"NonCriticalOperations\")\n    .AddPolicyHandler(BulkheadConfiguration.GetBulkheadPolicy(5, 10));\n</code></pre> <p>Database Connection Pooling:</p> <pre><code>{\n  \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Host=localhost;Database=dhanman;Username=user;Password=pass;Maximum Pool Size=100;Minimum Pool Size=10;Connection Idle Lifetime=300\"\n  }\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#4-timeout-pattern","title":"4. Timeout Pattern","text":"<p>Prevent indefinite waiting for responses.</p> <p>Implementation:</p> <pre><code>public class TimeoutConfiguration\n{\n    public static IAsyncPolicy GetTimeoutPolicy(TimeSpan timeout)\n    {\n        return Policy.TimeoutAsync(\n            timeout,\n            TimeoutStrategy.Optimistic,\n            onTimeoutAsync: (context, timespan, task) =&gt;\n            {\n                _logger.LogWarning(\n                    \"Operation timed out after {Timeout}ms\",\n                    timespan.TotalMilliseconds\n                );\n                return Task.CompletedTask;\n            }\n        );\n    }\n}\n\n// HTTP client with timeout\nservices.AddHttpClient&lt;IReportGeneratorClient&gt;(\"ReportGenerator\")\n    .AddPolicyHandler(TimeoutConfiguration.GetTimeoutPolicy(TimeSpan.FromMinutes(5)))\n    .AddPolicyHandler(RetryPolicyConfiguration.GetRetryPolicy());\n</code></pre> <p>Database Query Timeout:</p> <pre><code>public class InvoiceRepository : IInvoiceRepository\n{\n    private readonly ApplicationDbContext _context;\n\n    public async Task&lt;List&lt;Invoice&gt;&gt; GetOverdueInvoicesAsync(CancellationToken cancellationToken)\n    {\n        // Set command timeout to 30 seconds\n        _context.Database.SetCommandTimeout(30);\n\n        return await _context.Invoices\n            .Where(i =&gt; i.DueDate &lt; DateTime.UtcNow &amp;&amp; !i.IsPaid)\n            .ToListAsync(cancellationToken);\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#5-fallback-pattern","title":"5. Fallback Pattern","text":"<p>Provide alternative behavior when primary fails.</p> <p>Implementation:</p> <pre><code>public class FallbackConfiguration\n{\n    public static IAsyncPolicy&lt;T&gt; GetFallbackPolicy&lt;T&gt;(T fallbackValue)\n    {\n        return Policy&lt;T&gt;\n            .Handle&lt;Exception&gt;()\n            .FallbackAsync(\n                fallbackValue,\n                onFallbackAsync: (exception, context) =&gt;\n                {\n                    _logger.LogWarning(\n                        exception.Exception,\n                        \"Fallback triggered due to error\"\n                    );\n                    return Task.CompletedTask;\n                }\n            );\n    }\n}\n\n// Example: Currency conversion with fallback\npublic class CurrencyConverter\n{\n    private readonly IExchangeRateApi _externalApi;\n    private readonly ICacheService _cache;\n\n    public async Task&lt;decimal&gt; ConvertAsync(decimal amount, string from, string to)\n    {\n        var policy = Policy&lt;decimal&gt;\n            .Handle&lt;HttpRequestException&gt;()\n            .FallbackAsync(\n                fallbackValue: await GetCachedRateAsync(from, to) ?? 1.0m,\n                onFallbackAsync: async (exception, context) =&gt;\n                {\n                    _logger.LogWarning(\"Using cached exchange rate due to API failure\");\n                }\n            );\n\n        return await policy.ExecuteAsync(async () =&gt;\n        {\n            var rate = await _externalApi.GetExchangeRateAsync(from, to);\n            await CacheRateAsync(from, to, rate);\n            return amount * rate;\n        });\n    }\n}\n\n// Feature degradation example\npublic class NotificationService\n{\n    private readonly IEmailService _emailService;\n    private readonly ISmsService _smsService;\n\n    public async Task SendNotificationAsync(string userId, string message)\n    {\n        var policy = Policy\n            .Handle&lt;Exception&gt;()\n            .FallbackAsync(\n                fallbackAction: async (cancellationToken) =&gt;\n                {\n                    // Fallback to SMS if email fails\n                    await _smsService.SendAsync(userId, message, cancellationToken);\n                },\n                onFallbackAsync: async (exception) =&gt;\n                {\n                    _logger.LogWarning(\"Email failed, falling back to SMS\");\n                }\n            );\n\n        await policy.ExecuteAsync(async () =&gt;\n        {\n            await _emailService.SendAsync(userId, message);\n        });\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#distributed-system-patterns","title":"Distributed System Patterns","text":""},{"location":"system/architecture/patterns/resilience/#6-health-checks","title":"6. Health Checks","text":"<p>Monitor service health and dependencies.</p> <p>Implementation:</p> <pre><code>// Program.cs\nbuilder.Services.AddHealthChecks()\n    .AddNpgSql(\n        builder.Configuration.GetConnectionString(\"DefaultConnection\"),\n        name: \"database\",\n        timeout: TimeSpan.FromSeconds(3),\n        tags: new[] { \"db\", \"postgres\" }\n    )\n    .AddRabbitMQ(\n        rabbitConnectionString: builder.Configuration.GetConnectionString(\"RabbitMQ\"),\n        name: \"rabbitmq\",\n        timeout: TimeSpan.FromSeconds(3),\n        tags: new[] { \"messaging\" }\n    )\n    .AddUrlGroup(\n        new Uri(\"https://api.external-service.com/health\"),\n        name: \"external-api\",\n        timeout: TimeSpan.FromSeconds(5),\n        tags: new[] { \"external\" }\n    )\n    .AddCheck&lt;CustomHealthCheck&gt;(\"custom-check\");\n\napp.MapHealthChecks(\"/health\", new HealthCheckOptions\n{\n    ResponseWriter = async (context, report) =&gt;\n    {\n        context.Response.ContentType = \"application/json\";\n        var result = JsonSerializer.Serialize(new\n        {\n            status = report.Status.ToString(),\n            checks = report.Entries.Select(e =&gt; new\n            {\n                name = e.Key,\n                status = e.Value.Status.ToString(),\n                description = e.Value.Description,\n                duration = e.Value.Duration.TotalMilliseconds\n            }),\n            totalDuration = report.TotalDuration.TotalMilliseconds\n        });\n        await context.Response.WriteAsync(result);\n    }\n});\n\n// Liveness probe (basic check)\napp.MapHealthChecks(\"/health/live\", new HealthCheckOptions\n{\n    Predicate = _ =&gt; false // No checks, just returns 200 if app running\n});\n\n// Readiness probe (full check)\napp.MapHealthChecks(\"/health/ready\", new HealthCheckOptions\n{\n    Predicate = check =&gt; check.Tags.Contains(\"ready\")\n});\n</code></pre> <p>Custom Health Check:</p> <pre><code>public class DatabaseHealthCheck : IHealthCheck\n{\n    private readonly IApplicationDbContext _context;\n\n    public async Task&lt;HealthCheckResult&gt; CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken = default)\n    {\n        try\n        {\n            // Simple query to verify connection\n            await _context.Database.ExecuteSqlRawAsync(\n                \"SELECT 1\",\n                cancellationToken\n            );\n\n            return HealthCheckResult.Healthy(\"Database connection is healthy\");\n        }\n        catch (Exception ex)\n        {\n            return HealthCheckResult.Unhealthy(\n                \"Database connection failed\",\n                ex\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#7-idempotency","title":"7. Idempotency","text":"<p>Ensure operations can be safely retried.</p> <p>Implementation:</p> <pre><code>public class IdempotentCommandHandler : IRequestHandler&lt;CreateInvoiceCommand, Result&lt;Guid&gt;&gt;\n{\n    private readonly IApplicationDbContext _context;\n    private readonly IIdempotencyService _idempotencyService;\n\n    public async Task&lt;Result&lt;Guid&gt;&gt; Handle(\n        CreateInvoiceCommand request,\n        CancellationToken cancellationToken)\n    {\n        // Check if command already processed\n        var idempotencyKey = request.IdempotencyKey;\n        var existingResult = await _idempotencyService.GetResultAsync&lt;Guid&gt;(idempotencyKey);\n\n        if (existingResult != null)\n        {\n            _logger.LogInformation(\n                \"Command already processed with key {IdempotencyKey}\",\n                idempotencyKey\n            );\n            return Result&lt;Guid&gt;.Success(existingResult.Value);\n        }\n\n        // Process command\n        var invoice = Invoice.Create(request.CustomerId, request.Amount);\n        await _context.Invoices.AddAsync(invoice, cancellationToken);\n        await _context.SaveChangesAsync(cancellationToken);\n\n        // Store result for future requests\n        await _idempotencyService.SaveResultAsync(\n            idempotencyKey,\n            invoice.Id,\n            TimeSpan.FromHours(24)\n        );\n\n        return Result&lt;Guid&gt;.Success(invoice.Id);\n    }\n}\n\n// Idempotency service\npublic class IdempotencyService : IIdempotencyService\n{\n    private readonly IDistributedCache _cache;\n\n    public async Task&lt;T?&gt; GetResultAsync&lt;T&gt;(string key)\n    {\n        var cachedValue = await _cache.GetStringAsync(key);\n        if (cachedValue == null)\n            return default;\n\n        return JsonSerializer.Deserialize&lt;T&gt;(cachedValue);\n    }\n\n    public async Task SaveResultAsync&lt;T&gt;(string key, T result, TimeSpan expiration)\n    {\n        var serialized = JsonSerializer.Serialize(result);\n        await _cache.SetStringAsync(\n            key,\n            serialized,\n            new DistributedCacheEntryOptions\n            {\n                AbsoluteExpirationRelativeToNow = expiration\n            }\n        );\n    }\n}\n</code></pre> <p>API Idempotency Header:</p> <pre><code>[HttpPost]\npublic async Task&lt;IActionResult&gt; CreateInvoice(\n    [FromBody] CreateInvoiceRequest request,\n    [FromHeader(Name = \"Idempotency-Key\")] string? idempotencyKey)\n{\n    if (string.IsNullOrEmpty(idempotencyKey))\n    {\n        return BadRequest(\"Idempotency-Key header is required\");\n    }\n\n    var command = new CreateInvoiceCommand\n    {\n        IdempotencyKey = idempotencyKey,\n        CustomerId = request.CustomerId,\n        Amount = request.Amount\n    };\n\n    var result = await _mediator.Send(command);\n    return result.IsSuccess ? Ok(result.Value) : BadRequest(result.Error);\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#8-dead-letter-queue-dlq","title":"8. Dead Letter Queue (DLQ)","text":"<p>Handle messages that cannot be processed.</p> <p>Implementation:</p> <pre><code>public class RabbitMqConfiguration\n{\n    public static void ConfigureQueuesWithDLQ(IModel channel, string queueName)\n    {\n        var dlqName = $\"{queueName}.dlq\";\n        var dlxName = $\"{queueName}.dlx\";\n\n        // Declare dead-letter exchange\n        channel.ExchangeDeclare(\n            exchange: dlxName,\n            type: ExchangeType.Direct,\n            durable: true\n        );\n\n        // Declare dead-letter queue\n        channel.QueueDeclare(\n            queue: dlqName,\n            durable: true,\n            exclusive: false,\n            autoDelete: false,\n            arguments: null\n        );\n\n        // Bind DLQ to DLX\n        channel.QueueBind(\n            queue: dlqName,\n            exchange: dlxName,\n            routingKey: queueName\n        );\n\n        // Declare main queue with DLX configuration\n        var arguments = new Dictionary&lt;string, object&gt;\n        {\n            { \"x-dead-letter-exchange\", dlxName },\n            { \"x-dead-letter-routing-key\", queueName },\n            { \"x-message-ttl\", 86400000 } // 24 hours\n        };\n\n        channel.QueueDeclare(\n            queue: queueName,\n            durable: true,\n            exclusive: false,\n            autoDelete: false,\n            arguments: arguments\n        );\n    }\n}\n\n// DLQ monitoring and reprocessing\npublic class DeadLetterQueueService\n{\n    private readonly IModel _channel;\n    private readonly ILogger&lt;DeadLetterQueueService&gt; _logger;\n\n    public async Task&lt;List&lt;DeadLetterMessage&gt;&gt; GetDeadLetterMessagesAsync(string queueName)\n    {\n        var dlqName = $\"{queueName}.dlq\";\n        var messages = new List&lt;DeadLetterMessage&gt;();\n\n        var messageCount = _channel.MessageCount(dlqName);\n\n        for (int i = 0; i &lt; Math.Min(messageCount, 100); i++)\n        {\n            var result = _channel.BasicGet(dlqName, false);\n            if (result != null)\n            {\n                messages.Add(new DeadLetterMessage\n                {\n                    DeliveryTag = result.DeliveryTag,\n                    Body = Encoding.UTF8.GetString(result.Body.ToArray()),\n                    Headers = result.BasicProperties.Headers,\n                    Timestamp = result.BasicProperties.Timestamp.UnixTime\n                });\n            }\n        }\n\n        return messages;\n    }\n\n    public async Task ReprocessMessageAsync(string queueName, ulong deliveryTag)\n    {\n        var dlqName = $\"{queueName}.dlq\";\n\n        // Get message from DLQ\n        var result = _channel.BasicGet(dlqName, false);\n        if (result == null)\n        {\n            throw new InvalidOperationException(\"Message not found\");\n        }\n\n        // Publish to original queue\n        _channel.BasicPublish(\n            exchange: \"\",\n            routingKey: queueName,\n            basicProperties: result.BasicProperties,\n            body: result.Body\n        );\n\n        // Acknowledge removal from DLQ\n        _channel.BasicAck(result.DeliveryTag, false);\n\n        _logger.LogInformation(\n            \"Message reprocessed from DLQ {DLQ} to {Queue}\",\n            dlqName,\n            queueName\n        );\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#data-resilience","title":"Data Resilience","text":""},{"location":"system/architecture/patterns/resilience/#9-database-transaction-management","title":"9. Database Transaction Management","text":"<p>Ensure data consistency with proper transaction handling.</p> <p>Implementation:</p> <pre><code>public class TransactionalCommandHandler : IRequestHandler&lt;CreateInvoiceCommand, Result&lt;Guid&gt;&gt;\n{\n    private readonly IApplicationDbContext _context;\n\n    public async Task&lt;Result&lt;Guid&gt;&gt; Handle(\n        CreateInvoiceCommand request,\n        CancellationToken cancellationToken)\n    {\n        using var transaction = await _context.Database.BeginTransactionAsync(cancellationToken);\n\n        try\n        {\n            // Create invoice\n            var invoice = Invoice.Create(request.CustomerId, request.Amount);\n            await _context.Invoices.AddAsync(invoice, cancellationToken);\n            await _context.SaveChangesAsync(cancellationToken);\n\n            // Create ledger entries\n            var debitEntry = LedgerEntry.CreateDebit(invoice.Id, invoice.Amount);\n            var creditEntry = LedgerEntry.CreateCredit(invoice.Id, invoice.Amount);\n\n            await _context.LedgerEntries.AddRangeAsync(\n                new[] { debitEntry, creditEntry },\n                cancellationToken\n            );\n            await _context.SaveChangesAsync(cancellationToken);\n\n            // Commit transaction\n            await transaction.CommitAsync(cancellationToken);\n\n            return Result&lt;Guid&gt;.Success(invoice.Id);\n        }\n        catch (Exception ex)\n        {\n            await transaction.RollbackAsync(cancellationToken);\n            _logger.LogError(ex, \"Transaction failed, rolling back\");\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#10-saga-pattern","title":"10. Saga Pattern","text":"<p>Manage distributed transactions across services.</p> <p>Implementation:</p> <pre><code>public class InvoicePaymentSaga\n{\n    private readonly IEventPublisher _eventPublisher;\n    private readonly ICommandPublisher _commandPublisher;\n    private readonly ISagaRepository _sagaRepository;\n\n    public async Task HandleInvoiceCreatedEvent(InvoiceCreatedEvent @event)\n    {\n        // Step 1: Create saga instance\n        var saga = new InvoicePaymentSagaData\n        {\n            SagaId = Guid.NewGuid(),\n            InvoiceId = @event.InvoiceId,\n            CustomerId = @event.CustomerId,\n            Amount = @event.Amount,\n            State = SagaState.Started\n        };\n        await _sagaRepository.SaveAsync(saga);\n\n        try\n        {\n            // Step 2: Update ledger in Common service\n            await _commandPublisher.PublishAsync(new UpdateLedgerCommand\n            {\n                InvoiceId = @event.InvoiceId,\n                Amount = @event.Amount\n            });\n\n            saga.State = SagaState.LedgerUpdated;\n            await _sagaRepository.SaveAsync(saga);\n\n            // Step 3: Send notification\n            await _commandPublisher.PublishAsync(new SendNotificationCommand\n            {\n                CustomerId = @event.CustomerId,\n                Type = \"InvoiceCreated\",\n                InvoiceId = @event.InvoiceId\n            });\n\n            saga.State = SagaState.Completed;\n            await _sagaRepository.SaveAsync(saga);\n        }\n        catch (Exception ex)\n        {\n            // Compensating actions\n            await CompensateAsync(saga);\n        }\n    }\n\n    private async Task CompensateAsync(InvoicePaymentSagaData saga)\n    {\n        _logger.LogWarning(\"Compensating saga {SagaId}\", saga.SagaId);\n\n        if (saga.State &gt;= SagaState.LedgerUpdated)\n        {\n            // Reverse ledger entries\n            await _commandPublisher.PublishAsync(new ReverseLedgerCommand\n            {\n                InvoiceId = saga.InvoiceId\n            });\n        }\n\n        saga.State = SagaState.Compensated;\n        await _sagaRepository.SaveAsync(saga);\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"system/architecture/patterns/resilience/#11-distributed-tracing","title":"11. Distributed Tracing","text":"<p>Track requests across services.</p> <p>Implementation:</p> <pre><code>// Program.cs\nbuilder.Services.AddOpenTelemetry()\n    .WithTracing(tracing =&gt;\n    {\n        tracing\n            .AddAspNetCoreInstrumentation()\n            .AddHttpClientInstrumentation()\n            .AddNpgsql()\n            .AddSource(\"Dhanman.Sales\");\n    });\n\n// Custom tracing\npublic class InvoiceService\n{\n    private readonly ActivitySource _activitySource = new(\"Dhanman.Sales\");\n\n    public async Task&lt;Invoice&gt; CreateInvoiceAsync(CreateInvoiceRequest request)\n    {\n        using var activity = _activitySource.StartActivity(\"CreateInvoice\");\n\n        activity?.SetTag(\"invoice.customer_id\", request.CustomerId);\n        activity?.SetTag(\"invoice.amount\", request.Amount);\n\n        try\n        {\n            var invoice = await ProcessInvoiceAsync(request);\n            activity?.SetTag(\"invoice.id\", invoice.Id);\n            activity?.SetStatus(ActivityStatusCode.Ok);\n            return invoice;\n        }\n        catch (Exception ex)\n        {\n            activity?.SetStatus(ActivityStatusCode.Error, ex.Message);\n            activity?.RecordException(ex);\n            throw;\n        }\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#12-correlation-ids","title":"12. Correlation IDs","text":"<p>Track related operations across services.</p> <p>Implementation:</p> <pre><code>public class CorrelationIdMiddleware\n{\n    private readonly RequestDelegate _next;\n    private const string CorrelationIdHeader = \"X-Correlation-Id\";\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var correlationId = GetCorrelationId(context);\n        context.Items[\"CorrelationId\"] = correlationId;\n        context.Response.Headers.Add(CorrelationIdHeader, correlationId);\n\n        using (LogContext.PushProperty(\"CorrelationId\", correlationId))\n        {\n            await _next(context);\n        }\n    }\n\n    private string GetCorrelationId(HttpContext context)\n    {\n        if (context.Request.Headers.TryGetValue(CorrelationIdHeader, out var correlationId))\n        {\n            return correlationId.ToString();\n        }\n\n        return Guid.NewGuid().ToString();\n    }\n}\n\n// Usage in HTTP clients\npublic class CorrelationIdDelegatingHandler : DelegatingHandler\n{\n    private readonly IHttpContextAccessor _httpContextAccessor;\n\n    protected override async Task&lt;HttpResponseMessage&gt; SendAsync(\n        HttpRequestMessage request,\n        CancellationToken cancellationToken)\n    {\n        var correlationId = _httpContextAccessor.HttpContext?.Items[\"CorrelationId\"]?.ToString();\n\n        if (!string.IsNullOrEmpty(correlationId))\n        {\n            request.Headers.Add(\"X-Correlation-Id\", correlationId);\n        }\n\n        return await base.SendAsync(request, cancellationToken);\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#best-practices","title":"Best Practices","text":""},{"location":"system/architecture/patterns/resilience/#dos","title":"Do's \u2705","text":"<ul> <li>Implement retry with exponential backoff</li> <li>Use circuit breakers for external dependencies</li> <li>Set appropriate timeouts for all operations</li> <li>Monitor health checks continuously</li> <li>Log all retry attempts and failures</li> <li>Implement idempotency for all state-changing operations</li> <li>Use bulkheads to isolate critical resources</li> <li>Handle partial failures gracefully</li> <li>Implement proper error handling and logging</li> <li>Test failure scenarios regularly (chaos engineering)</li> </ul>"},{"location":"system/architecture/patterns/resilience/#donts","title":"Don'ts \u274c","text":"<ul> <li>Don't retry indefinitely without backoff</li> <li>Don't ignore timeout configurations</li> <li>Don't skip health check implementations</li> <li>Don't let circuit breakers stay open forever</li> <li>Don't forget to implement fallback strategies</li> <li>Don't ignore dead-letter queues</li> <li>Don't cascade failures across services</li> <li>Don't skip distributed tracing</li> <li>Don't ignore correlation IDs in logging</li> </ul>"},{"location":"system/architecture/patterns/resilience/#testing-resilience","title":"Testing Resilience","text":""},{"location":"system/architecture/patterns/resilience/#chaos-engineering","title":"Chaos Engineering","text":"<pre><code>public class ChaosMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly Random _random = new();\n    private readonly ChaosConfiguration _config;\n\n    public async Task InvokeAsync(HttpContext context)\n    {\n        if (_config.IsEnabled &amp;&amp; ShouldInjectFailure())\n        {\n            context.Response.StatusCode = 500;\n            await context.Response.WriteAsync(\"Chaos: Simulated failure\");\n            return;\n        }\n\n        await _next(context);\n    }\n\n    private bool ShouldInjectFailure()\n    {\n        return _random.NextDouble() &lt; _config.FailureRate; // e.g., 0.1 = 10%\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/resilience/#summary","title":"Summary","text":"<p>Dhanman's resilience patterns provide: - Fault tolerance through retry and circuit breaker patterns - Resource isolation via bulkhead pattern - Graceful degradation with fallback strategies - System observability through health checks and tracing - Data consistency with transactions and saga patterns - Operational reliability through idempotency and DLQ</p> <p>These patterns work together to create a robust, self-healing distributed system that maintains availability and consistency even under failure conditions.</p>"},{"location":"system/architecture/patterns/scheduled-jobs/","title":"Scheduled Jobs with Hangfire","text":""},{"location":"system/architecture/patterns/scheduled-jobs/#overview","title":"Overview","text":"<p>Hangfire is the background job processing framework used in Dhanman to handle scheduled tasks, recurring jobs, and delayed operations. It provides reliable, persistent, and distributed background job processing for the microservices architecture.</p>"},{"location":"system/architecture/patterns/scheduled-jobs/#why-hangfire","title":"Why Hangfire?","text":""},{"location":"system/architecture/patterns/scheduled-jobs/#key-benefits","title":"Key Benefits","text":"<ul> <li>Persistent Storage: Jobs stored in PostgreSQL, survive application restarts</li> <li>Automatic Retries: Failed jobs automatically retried with exponential backoff</li> <li>Dashboard: Built-in monitoring UI for job status and performance</li> <li>Distributed: Multiple servers can process jobs from the same queue</li> <li>Fire-and-Forget: Async operations that don't block user requests</li> <li>Recurring Jobs: CRON-based scheduling for periodic tasks</li> <li>Delayed Jobs: Execute tasks after a specified delay</li> </ul>"},{"location":"system/architecture/patterns/scheduled-jobs/#architecture","title":"Architecture","text":""},{"location":"system/architecture/patterns/scheduled-jobs/#job-storage","title":"Job Storage","text":"<p>Hangfire uses PostgreSQL as its job storage backend, with dedicated schema per microservice:</p> <pre><code>prod-dhanman-common\n\u251c\u2500\u2500 hangfire.job\n\u251c\u2500\u2500 hangfire.state\n\u251c\u2500\u2500 hangfire.counter\n\u251c\u2500\u2500 hangfire.jobparameter\n\u251c\u2500\u2500 hangfire.jobqueue\n\u251c\u2500\u2500 hangfire.hash\n\u251c\u2500\u2500 hangfire.list\n\u251c\u2500\u2500 hangfire.set\n\u2514\u2500\u2500 hangfire.server\n</code></pre>"},{"location":"system/architecture/patterns/scheduled-jobs/#job-types-in-dhanman","title":"Job Types in Dhanman","text":"Job Type Use Case Example Fire-and-Forget One-time background task Send welcome email after registration Delayed Execute after a delay Send reminder 24 hours before due date Recurring Scheduled periodic tasks Generate monthly financial reports Continuations Sequential job chains Process invoice \u2192 Update ledger \u2192 Send notification Batch Jobs Process multiple items Bulk invoice generation for all residents"},{"location":"system/architecture/patterns/scheduled-jobs/#configuration","title":"Configuration","text":""},{"location":"system/architecture/patterns/scheduled-jobs/#dependency-injection-setup","title":"Dependency Injection Setup","text":"<p>Program.cs: <pre><code>using Hangfire;\nusing Hangfire.PostgreSql;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add Hangfire services\nbuilder.Services.AddHangfire(configuration =&gt; configuration\n    .SetDataCompatibilityLevel(CompatibilityLevel.Version_180)\n    .UseSimpleAssemblyNameTypeSerializer()\n    .UseRecommendedSerializerSettings()\n    .UsePostgreSqlStorage(options =&gt;\n        options.UseNpgsqlConnection(builder.Configuration.GetConnectionString(\"HangfireDb\")))\n);\n\n// Add Hangfire server\nbuilder.Services.AddHangfireServer(options =&gt;\n{\n    options.WorkerCount = Environment.ProcessorCount * 5;\n    options.Queues = new[] { \"critical\", \"default\", \"low-priority\" };\n    options.ServerName = $\"{Environment.MachineName}-{Guid.NewGuid()}\";\n});\n\nvar app = builder.Build();\n\n// Configure Hangfire Dashboard\napp.UseHangfireDashboard(\"/hangfire\", new DashboardOptions\n{\n    Authorization = new[] { new HangfireAuthorizationFilter() },\n    DashboardTitle = \"Dhanman Jobs Dashboard\",\n    StatsPollingInterval = 2000\n});\n\napp.Run();\n</code></pre></p>"},{"location":"system/architecture/patterns/scheduled-jobs/#connection-string","title":"Connection String","text":"<p>appsettings.json: <pre><code>{\n  \"ConnectionStrings\": {\n    \"HangfireDb\": \"Host=localhost;Port=5432;Database=prod-dhanman-common;Username=postgres;Password=***;Include Error Detail=true\"\n  },\n  \"Hangfire\": {\n    \"WorkerCount\": 10,\n    \"Queues\": [\"critical\", \"default\", \"low-priority\"],\n    \"JobExpirationCheckInterval\": \"00:30:00\",\n    \"CountersAggregateInterval\": \"00:05:00\"\n  }\n}\n</code></pre></p>"},{"location":"system/architecture/patterns/scheduled-jobs/#job-implementation","title":"Job Implementation","text":""},{"location":"system/architecture/patterns/scheduled-jobs/#1-fire-and-forget-jobs","title":"1. Fire-and-Forget Jobs","text":"<p>Immediate background execution without waiting for result:</p> <pre><code>public class EmailService\n{\n    private readonly IBackgroundJobClient _backgroundJobs;\n    private readonly IEmailSender _emailSender;\n\n    public EmailService(IBackgroundJobClient backgroundJobs, IEmailSender emailSender)\n    {\n        _backgroundJobs = backgroundJobs;\n        _emailSender = emailSender;\n    }\n\n    public void SendWelcomeEmail(string userId, string email)\n    {\n        // Queue job and return immediately\n        _backgroundJobs.Enqueue(() =&gt; \n            SendWelcomeEmailAsync(userId, email, CancellationToken.None));\n    }\n\n    public async Task SendWelcomeEmailAsync(string userId, string email, CancellationToken cancellationToken)\n    {\n        var template = await _emailSender.GetTemplateAsync(\"welcome\", cancellationToken);\n        await _emailSender.SendAsync(email, \"Welcome to Dhanman\", template, cancellationToken);\n    }\n}\n</code></pre> <p>Usage in Controller: <pre><code>[HttpPost(\"register\")]\npublic async Task&lt;IActionResult&gt; Register([FromBody] RegisterRequest request)\n{\n    var user = await _userService.CreateUserAsync(request);\n\n    // Fire-and-forget: doesn't block response\n    _emailService.SendWelcomeEmail(user.Id, user.Email);\n\n    return Ok(new { userId = user.Id });\n}\n</code></pre></p>"},{"location":"system/architecture/patterns/scheduled-jobs/#2-delayed-jobs","title":"2. Delayed Jobs","text":"<p>Execute job after a specified time delay:</p> <pre><code>public class ReminderService\n{\n    private readonly IBackgroundJobClient _backgroundJobs;\n\n    public void ScheduleInvoiceReminder(Guid invoiceId, DateTime dueDate)\n    {\n        // Send reminder 24 hours before due date\n        var reminderTime = dueDate.AddHours(-24) - DateTime.UtcNow;\n\n        _backgroundJobs.Schedule(() =&gt; \n            SendInvoiceReminder(invoiceId, CancellationToken.None),\n            reminderTime);\n    }\n\n    public async Task SendInvoiceReminder(Guid invoiceId, CancellationToken cancellationToken)\n    {\n        var invoice = await _invoiceRepository.GetByIdAsync(invoiceId, cancellationToken);\n        if (invoice.IsPaid) return; // Skip if already paid\n\n        await _notificationService.SendAsync(\n            invoice.CustomerId,\n            \"Invoice Due Tomorrow\",\n            $\"Your invoice #{invoice.Number} is due tomorrow. Amount: {invoice.Amount:C}\",\n            cancellationToken\n        );\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/scheduled-jobs/#3-recurring-jobs","title":"3. Recurring Jobs","text":"<p>CRON-based periodic execution:</p> <pre><code>public class RecurringJobsConfiguration\n{\n    public static void ConfigureRecurringJobs()\n    {\n        // Daily report generation at 2 AM\n        RecurringJob.AddOrUpdate&lt;ReportService&gt;(\n            \"generate-daily-reports\",\n            service =&gt; service.GenerateDailyReports(CancellationToken.None),\n            Cron.Daily(2)\n        );\n\n        // Monthly invoice generation on 1st of each month at 6 AM\n        RecurringJob.AddOrUpdate&lt;InvoiceService&gt;(\n            \"generate-monthly-invoices\",\n            service =&gt; service.GenerateMonthlyInvoices(CancellationToken.None),\n            Cron.Monthly(1, 6)\n        );\n\n        // Check for overdue invoices every hour\n        RecurringJob.AddOrUpdate&lt;InvoiceService&gt;(\n            \"check-overdue-invoices\",\n            service =&gt; service.CheckOverdueInvoices(CancellationToken.None),\n            Cron.Hourly()\n        );\n\n        // Cleanup old logs every Sunday at midnight\n        RecurringJob.AddOrUpdate&lt;MaintenanceService&gt;(\n            \"cleanup-old-logs\",\n            service =&gt; service.CleanupOldLogs(CancellationToken.None),\n            Cron.Weekly(DayOfWeek.Sunday, 0)\n        );\n\n        // Database backup every 6 hours\n        RecurringJob.AddOrUpdate&lt;BackupService&gt;(\n            \"database-backup\",\n            service =&gt; service.BackupDatabase(CancellationToken.None),\n            \"0 */6 * * *\" // CRON: Every 6 hours\n        );\n    }\n}\n\npublic class ReportService\n{\n    private readonly IReportGenerator _reportGenerator;\n    private readonly IEmailSender _emailSender;\n    private readonly ILogger&lt;ReportService&gt; _logger;\n\n    public async Task GenerateDailyReports(CancellationToken cancellationToken)\n    {\n        _logger.LogInformation(\"Starting daily report generation\");\n\n        try\n        {\n            var reports = await _reportGenerator.GenerateAsync(\n                DateTime.UtcNow.Date.AddDays(-1),\n                cancellationToken\n            );\n\n            foreach (var report in reports)\n            {\n                await _emailSender.SendReportAsync(report, cancellationToken);\n            }\n\n            _logger.LogInformation(\"Daily reports generated successfully\");\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(ex, \"Error generating daily reports\");\n            throw; // Hangfire will retry automatically\n        }\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/scheduled-jobs/#4-continuation-jobs","title":"4. Continuation Jobs","text":"<p>Chain jobs to execute sequentially:</p> <pre><code>public class InvoiceProcessingService\n{\n    private readonly IBackgroundJobClient _backgroundJobs;\n\n    public void ProcessInvoiceWorkflow(Guid invoiceId)\n    {\n        // Step 1: Create invoice\n        var createJobId = _backgroundJobs.Enqueue(() =&gt; \n            CreateInvoice(invoiceId, CancellationToken.None));\n\n        // Step 2: Update ledger (after invoice created)\n        var ledgerJobId = _backgroundJobs.ContinueJobWith(createJobId, () =&gt;\n            UpdateLedger(invoiceId, CancellationToken.None));\n\n        // Step 3: Send notification (after ledger updated)\n        _backgroundJobs.ContinueJobWith(ledgerJobId, () =&gt;\n            SendInvoiceNotification(invoiceId, CancellationToken.None));\n    }\n\n    public async Task CreateInvoice(Guid invoiceId, CancellationToken cancellationToken)\n    {\n        // Create invoice logic\n    }\n\n    public async Task UpdateLedger(Guid invoiceId, CancellationToken cancellationToken)\n    {\n        // Update ledger entries\n    }\n\n    public async Task SendInvoiceNotification(Guid invoiceId, CancellationToken cancellationToken)\n    {\n        // Send email/SMS notification\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/scheduled-jobs/#5-batch-jobs","title":"5. Batch Jobs","text":"<p>Process multiple items with progress tracking:</p> <pre><code>public class BulkInvoiceService\n{\n    private readonly IBackgroundJobClient _backgroundJobs;\n\n    public string GenerateBulkInvoices(List&lt;Guid&gt; residentIds)\n    {\n        var batchId = BatchJob.StartNew(batch =&gt;\n        {\n            foreach (var residentId in residentIds)\n            {\n                batch.Enqueue(() =&gt; GenerateInvoiceForResident(residentId, CancellationToken.None));\n            }\n        });\n\n        // Continuation: Send summary email when all invoices are generated\n        BatchJob.ContinueBatchWith(batchId, () =&gt;\n            SendBulkGenerationSummary(batchId, CancellationToken.None));\n\n        return batchId;\n    }\n\n    public async Task GenerateInvoiceForResident(Guid residentId, CancellationToken cancellationToken)\n    {\n        // Generate individual invoice\n    }\n\n    public async Task SendBulkGenerationSummary(string batchId, CancellationToken cancellationToken)\n    {\n        // Send summary of bulk operation\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/scheduled-jobs/#common-scheduled-jobs-in-dhanman","title":"Common Scheduled Jobs in Dhanman","text":""},{"location":"system/architecture/patterns/scheduled-jobs/#common-service","title":"Common Service","text":"Job Name Schedule Purpose <code>sync-auth0-users</code> Every 6 hours Sync user data from Auth0 <code>cleanup-expired-tokens</code> Daily at 3 AM Remove expired refresh tokens <code>generate-system-health-report</code> Daily at 8 AM System health metrics report"},{"location":"system/architecture/patterns/scheduled-jobs/#sales-service","title":"Sales Service","text":"Job Name Schedule Purpose <code>generate-monthly-invoices</code> 1st of month, 6 AM Auto-generate recurring invoices <code>send-payment-reminders</code> Daily at 10 AM Remind customers of due payments <code>check-overdue-invoices</code> Hourly Mark invoices as overdue <code>calculate-late-fees</code> Daily at midnight Apply late fees to overdue invoices"},{"location":"system/architecture/patterns/scheduled-jobs/#purchase-service","title":"Purchase Service","text":"Job Name Schedule Purpose <code>send-po-approvals</code> Every 2 hours Notify pending PO approvals <code>check-grn-matching</code> Daily at 9 AM Match GRNs with POs <code>vendor-payment-reminders</code> Weekly on Monday Remind of vendor payment schedules"},{"location":"system/architecture/patterns/scheduled-jobs/#payroll-service","title":"Payroll Service","text":"Job Name Schedule Purpose <code>process-monthly-salaries</code> Last day of month, 11 PM Calculate and process salaries <code>generate-payslips</code> 1st of month, 12 AM Generate PDF payslips <code>statutory-compliance-report</code> Monthly, 2nd at 6 AM Generate compliance reports <code>attendance-summary</code> Daily at 6 PM Calculate daily attendance"},{"location":"system/architecture/patterns/scheduled-jobs/#community-service","title":"Community Service","text":"Job Name Schedule Purpose <code>send-event-reminders</code> Daily at 8 AM Remind residents of upcoming events <code>expire-visitor-passes</code> Every 30 minutes Expire one-time visitor passes <code>maintenance-request-escalation</code> Every 4 hours Escalate pending maintenance requests"},{"location":"system/architecture/patterns/scheduled-jobs/#inventory-service","title":"Inventory Service","text":"Job Name Schedule Purpose <code>check-low-stock-alerts</code> Daily at 9 AM Alert for items below reorder level <code>generate-stock-report</code> Weekly on Friday, 5 PM Weekly inventory report <code>expire-items-check</code> Daily at midnight Mark expired inventory items"},{"location":"system/architecture/patterns/scheduled-jobs/#error-handling-and-retries","title":"Error Handling and Retries","text":""},{"location":"system/architecture/patterns/scheduled-jobs/#automatic-retry-policy","title":"Automatic Retry Policy","text":"<pre><code>public class JobConfiguration\n{\n    public static void ConfigureJobFilters()\n    {\n        GlobalJobFilters.Filters.Add(new AutomaticRetryAttribute\n        {\n            Attempts = 3, // Retry up to 3 times\n            DelaysInSeconds = new[] { 60, 300, 900 }, // 1 min, 5 min, 15 min\n            OnAttemptsExceeded = AttemptsExceededAction.Delete\n        });\n\n        GlobalJobFilters.Filters.Add(new JobLoggerAttribute());\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/scheduled-jobs/#custom-error-handling","title":"Custom Error Handling","text":"<pre><code>public class JobLoggerAttribute : JobFilterAttribute, IServerFilter\n{\n    private readonly ILogger&lt;JobLoggerAttribute&gt; _logger;\n\n    public void OnPerforming(PerformingContext filterContext)\n    {\n        _logger.LogInformation(\n            \"Starting job: {JobType}.{Method}\",\n            filterContext.BackgroundJob.Job.Type.Name,\n            filterContext.BackgroundJob.Job.Method.Name\n        );\n    }\n\n    public void OnPerformed(PerformedContext filterContext)\n    {\n        if (filterContext.Exception != null)\n        {\n            _logger.LogError(\n                filterContext.Exception,\n                \"Job failed: {JobType}.{Method}\",\n                filterContext.BackgroundJob.Job.Type.Name,\n                filterContext.BackgroundJob.Job.Method.Name\n            );\n        }\n        else\n        {\n            _logger.LogInformation(\n                \"Job completed: {JobType}.{Method}\",\n                filterContext.BackgroundJob.Job.Type.Name,\n                filterContext.BackgroundJob.Job.Method.Name\n            );\n        }\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/scheduled-jobs/#monitoring-and-dashboard","title":"Monitoring and Dashboard","text":""},{"location":"system/architecture/patterns/scheduled-jobs/#accessing-hangfire-dashboard","title":"Accessing Hangfire Dashboard","text":"<p>URLs by Environment: - Production: <code>https://common.dhanman.com/hangfire</code> - QA: <code>https://qa.common.dhanman.com/hangfire</code></p>"},{"location":"system/architecture/patterns/scheduled-jobs/#dashboard-features","title":"Dashboard Features","text":"<ol> <li>Jobs Overview: Real-time statistics on jobs</li> <li>Succeeded jobs</li> <li>Failed jobs</li> <li>Processing jobs</li> <li>Scheduled jobs</li> <li> <p>Recurring jobs</p> </li> <li> <p>Servers: Monitor Hangfire server instances</p> </li> <li>Active workers</li> <li>Server heartbeat</li> <li> <p>Queue processing status</p> </li> <li> <p>Recurring Jobs: Manage scheduled jobs</p> </li> <li>Trigger jobs manually</li> <li>View next execution time</li> <li>Enable/disable jobs</li> <li> <p>View execution history</p> </li> <li> <p>Retries: Track failed jobs</p> </li> <li>View error details</li> <li>Manually retry jobs</li> <li>Delete failed jobs</li> </ol>"},{"location":"system/architecture/patterns/scheduled-jobs/#dashboard-security","title":"Dashboard Security","text":"<pre><code>public class HangfireAuthorizationFilter : IDashboardAuthorizationFilter\n{\n    public bool Authorize(DashboardContext context)\n    {\n        var httpContext = context.GetHttpContext();\n\n        // Allow only authenticated users with Admin role\n        return httpContext.User.Identity?.IsAuthenticated == true\n            &amp;&amp; httpContext.User.IsInRole(\"Admin\");\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/scheduled-jobs/#performance-optimization","title":"Performance Optimization","text":""},{"location":"system/architecture/patterns/scheduled-jobs/#queue-prioritization","title":"Queue Prioritization","text":"<p>Jobs can be assigned to different queues based on priority:</p> <pre><code>// Critical jobs (e.g., payment processing)\n_backgroundJobs.Enqueue&lt;PaymentService&gt;(\n    x =&gt; x.ProcessPayment(paymentId, CancellationToken.None),\n    queue: \"critical\"\n);\n\n// Default priority jobs\n_backgroundJobs.Enqueue&lt;NotificationService&gt;(\n    x =&gt; x.SendNotification(userId, message, CancellationToken.None)\n);\n\n// Low priority jobs (e.g., analytics)\n_backgroundJobs.Enqueue&lt;AnalyticsService&gt;(\n    x =&gt; x.UpdateAnalytics(CancellationToken.None),\n    queue: \"low-priority\"\n);\n</code></pre>"},{"location":"system/architecture/patterns/scheduled-jobs/#worker-configuration","title":"Worker Configuration","text":"<pre><code>builder.Services.AddHangfireServer(options =&gt;\n{\n    // Allocate more workers for critical queue\n    options.Queues = new[] { \"critical\", \"critical\", \"default\", \"low-priority\" };\n    options.WorkerCount = Environment.ProcessorCount * 5;\n\n    // Polling intervals\n    options.SchedulePollingInterval = TimeSpan.FromSeconds(15);\n    options.ServerCheckInterval = TimeSpan.FromMinutes(1);\n    options.HeartbeatInterval = TimeSpan.FromSeconds(30);\n});\n</code></pre>"},{"location":"system/architecture/patterns/scheduled-jobs/#best-practices","title":"Best Practices","text":""},{"location":"system/architecture/patterns/scheduled-jobs/#dos","title":"Do's \u2705","text":"<ul> <li>Use meaningful job names for recurring jobs</li> <li>Implement proper cancellation token support</li> <li>Log job start, completion, and errors</li> <li>Use appropriate queue prioritization</li> <li>Handle idempotency (jobs may retry)</li> <li>Keep job methods small and focused</li> <li>Use batches for bulk operations</li> <li>Monitor job execution time</li> </ul>"},{"location":"system/architecture/patterns/scheduled-jobs/#donts","title":"Don'ts \u274c","text":"<ul> <li>Don't pass large objects as job parameters (use IDs)</li> <li>Don't use non-serializable parameters</li> <li>Don't rely on static state or DI scope</li> <li>Don't create infinite retry loops</li> <li>Don't skip error handling</li> <li>Don't schedule too many jobs simultaneously</li> <li>Don't ignore job performance metrics</li> </ul>"},{"location":"system/architecture/patterns/scheduled-jobs/#integration-with-other-components","title":"Integration with Other Components","text":""},{"location":"system/architecture/patterns/scheduled-jobs/#with-rabbitmq-events","title":"With RabbitMQ Events","text":"<p>Hangfire jobs can be triggered by RabbitMQ events:</p> <pre><code>public class InvoiceCreatedEventHandler : IMessageHandler&lt;InvoiceCreatedEvent&gt;\n{\n    private readonly IBackgroundJobClient _backgroundJobs;\n\n    public async Task HandleAsync(InvoiceCreatedEvent @event, CancellationToken cancellationToken)\n    {\n        // Schedule reminder for due date\n        _backgroundJobs.Schedule&lt;ReminderService&gt;(\n            x =&gt; x.SendInvoiceReminder(@event.InvoiceId, cancellationToken),\n            @event.DueDate.AddDays(-1)\n        );\n\n        // Fire-and-forget: Send creation notification\n        _backgroundJobs.Enqueue&lt;NotificationService&gt;(\n            x =&gt; x.SendInvoiceCreatedNotification(@event.InvoiceId, cancellationToken)\n        );\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/scheduled-jobs/#with-cqrs-commands","title":"With CQRS Commands","text":"<p>Commands can trigger background jobs:</p> <pre><code>public class ApproveInvoiceCommandHandler : IRequestHandler&lt;ApproveInvoiceCommand, Result&gt;\n{\n    private readonly IBackgroundJobClient _backgroundJobs;\n\n    public async Task&lt;Result&gt; Handle(ApproveInvoiceCommand request, CancellationToken cancellationToken)\n    {\n        // Approve invoice immediately\n        var invoice = await _repository.GetByIdAsync(request.InvoiceId);\n        invoice.Approve(request.ApprovedBy);\n        await _repository.SaveAsync(invoice);\n\n        // Queue background job to update related systems\n        _backgroundJobs.Enqueue(() =&gt; UpdateRelatedSystems(request.InvoiceId, cancellationToken));\n\n        return Result.Success();\n    }\n}\n</code></pre>"},{"location":"system/architecture/patterns/scheduled-jobs/#troubleshooting","title":"Troubleshooting","text":""},{"location":"system/architecture/patterns/scheduled-jobs/#common-issues","title":"Common Issues","text":"<p>1. Jobs Not Processing - Check Hangfire server is running - Verify database connection - Check worker count &gt; 0 - Review server logs</p> <p>2. Jobs Failing Repeatedly - Check error logs in dashboard - Verify job parameters are serializable - Check database connectivity - Review retry configuration</p> <p>3. Performance Issues - Increase worker count - Optimize job execution time - Use appropriate queue prioritization - Check database performance</p> <p>4. Dashboard Not Accessible - Verify authorization filter - Check route configuration - Ensure user has required permissions</p>"},{"location":"system/architecture/patterns/scheduled-jobs/#migration-from-legacy-systems","title":"Migration from Legacy Systems","text":"<p>If migrating from other scheduling systems:</p> Legacy System Migration Strategy Cron Jobs Convert to Hangfire RecurringJob with same schedule Windows Scheduler Wrap task logic in Hangfire job method Quartz.NET Map Quartz triggers to Hangfire job types Manual Background Tasks Convert to fire-and-forget jobs"},{"location":"system/architecture/patterns/scheduled-jobs/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>[ ] Job priority queue optimization</li> <li>[ ] Advanced retry strategies per job type</li> <li>[ ] Job execution SLA monitoring</li> <li>[ ] Integration with Grafana for metrics</li> <li>[ ] Job execution time predictions</li> <li>[ ] Automatic job cleanup policies</li> <li>[ ] Job dependency graph visualization</li> </ul>"},{"location":"system/architecture/patterns/scheduled-jobs/#related-documentation","title":"Related Documentation","text":"<ul> <li>Event Sourcing \u2014 Event-driven architecture</li> <li>CQRS Pattern \u2014 Command/Query separation</li> <li>Monitoring \u2014 System observability</li> </ul>"},{"location":"system/architecture/patterns/scheduled-jobs/#summary","title":"Summary","text":"<p>Hangfire provides Dhanman with: - Reliable background job processing - Flexible scheduling options - Built-in monitoring and retry logic - Scalable distributed execution - Easy integration with existing architecture</p> <p>All microservices use Hangfire consistently for scheduled tasks, ensuring reliable and observable background operations across the entire system.</p>"},{"location":"system/development/","title":"\u2699\ufe0f Development","text":"<p>This section provides developer-focused documentation for contributing to Dhanman\u2019s backend and frontend codebases. It covers standards, patterns, and setup instructions.</p>"},{"location":"system/development/#contents","title":"\ud83d\udcd8 Contents","text":""},{"location":"system/development/#getting-started","title":"Getting Started","text":"<ul> <li>Local Setup \u2014 Steps to clone, configure, and run the full stack locally.</li> </ul>"},{"location":"system/development/#project-structure","title":"Project Structure","text":"<ul> <li>Repository Conventions</li> <li>Creating New Projects</li> </ul>"},{"location":"system/development/#standards","title":"Standards","text":"<ul> <li>Backend Coding Standards</li> <li>Frontend Clean Code Principles</li> <li>Code Review Checklist</li> <li>Git Workflow</li> </ul>"},{"location":"system/development/#api-contracts","title":"API Contracts","text":"<ul> <li>Service Contracts</li> <li>Event Schemas</li> </ul>"},{"location":"system/development/#entity-management","title":"Entity Management","text":"<ul> <li>Create Entity Task</li> </ul>"},{"location":"system/development/#testing","title":"Testing","text":"<ul> <li>Troubleshooting</li> <li>Test ID Strategy</li> </ul> <p>\ud83e\udde9 Related Tools: See DbTula Extract Commands for schema analysis and database comparison.</p>"},{"location":"system/development/DbTula-Extract-Commands/","title":"B2A.DbTula CLI \u2013 DB Objects Extractor","text":"<p>This section provides ready-to-use, single-line commands to extract functions, procedures, views, triggers, and tables from each service\u2019s PostgreSQL database into its respective Persistence project folder.</p>"},{"location":"system/development/DbTula-Extract-Commands/#generic-command","title":"\ud83d\udd39 Generic Command","text":"<p>Copy:</p> <pre><code>B2A.DbTula.Cli --extract --extract-type postgres --extract-conn \"Server=db.qa.dhanman.com;Port=5432;Database=&lt;DB_NAME&gt;;User Id=dhanmanqa;Password=&lt;DB_PASSWORD&gt;;\" --objects functions,procedures,views,triggers,tables --outputDir \"src/&lt;ServiceName&gt;.Persistence/DBObjects\" --overwrite\n</code></pre>"},{"location":"system/development/DbTula-Extract-Commands/#service-wise-commands-qa","title":"\ud83d\udd39 Service-wise Commands (QA)","text":""},{"location":"system/development/DbTula-Extract-Commands/#1-common-service","title":"1) Common Service","text":"<p>Copy:</p> <pre><code>B2A.DbTula.Cli --extract --extract-type postgres --extract-conn \"Server=db.qa.dhanman.com;Port=5432;Database=qa-dhanman-common;User Id=dhanmanqa;Password=&lt;DB_PASSWORD&gt;;\" --objects functions,procedures,views,triggers,tables --outputDir \"src/Dhanman.Common.Persistence/DBObjects\" --overwrite\n</code></pre>"},{"location":"system/development/DbTula-Extract-Commands/#2-community-service","title":"2) Community Service","text":"<p>Copy:</p> <pre><code>B2A.DbTula.Cli --extract --extract-type postgres --extract-conn \"Server=db.qa.dhanman.com;Port=5432;Database=qa-dhanman-community;User Id=dhanmanqa;Password=&lt;DB_PASSWORD&gt;;\" --objects functions,procedures,views,triggers,tables --outputDir \"src/Dhanman.Community.Persistence/DBObjects\" --overwrite\n</code></pre>"},{"location":"system/development/DbTula-Extract-Commands/#3-inventory-service","title":"3) Inventory Service","text":"<p>Copy:</p> <pre><code>B2A.DbTula.Cli --extract --extract-type postgres --extract-conn \"Server=db.qa.dhanman.com;Port=5432;Database=qa-dhanman-inventory;User Id=dhanmanqa;Password=&lt;DB_PASSWORD&gt;;\" --objects functions,procedures,views,triggers,tables --outputDir \"src/Dhanman.Inventory.Persistence/DBObjects\" --overwrite\n</code></pre>"},{"location":"system/development/DbTula-Extract-Commands/#4-payroll-service","title":"4) Payroll Service","text":"<p>Copy:</p> <pre><code>B2A.DbTula.Cli --extract --extract-type postgres --extract-conn \"Server=db.qa.dhanman.com;Port=5432;Database=qa-dhanman-payroll;User Id=dhanmanqa;Password=&lt;DB_PASSWORD&gt;;\" --objects functions,procedures,views,triggers,tables --outputDir \"src/Dhanman.Payroll.Persistence/DBObjects\" --overwrite\n</code></pre>"},{"location":"system/development/DbTula-Extract-Commands/#5-purchase-service","title":"5) Purchase Service","text":"<p>Copy:</p> <pre><code>B2A.DbTula.Cli --extract --extract-type postgres --extract-conn \"Server=db.qa.dhanman.com;Port=5432;Database=qa-dhanman-purchase;User Id=dhanmanqa;Password=&lt;DB_PASSWORD&gt;;\" --objects functions,procedures,views,triggers,tables --outputDir \"src/Dhanman.Purchase.Persistence/DBObjects\" --overwrite\n</code></pre>"},{"location":"system/development/DbTula-Extract-Commands/#6-sales-service","title":"6) Sales Service","text":"<p>Copy:</p> <pre><code>B2A.DbTula.Cli --extract --extract-type postgres --extract-conn \"Server=db.qa.dhanman.com;Port=5432;Database=qa-dhanman-sales;User Id=dhanmanqa;Password=&lt;DB_PASSWORD&gt;;\" --objects functions,procedures,views,triggers,tables --outputDir \"src/Dhanman.Sales.Persistence/DBObjects\" --overwrite\n</code></pre>"},{"location":"system/development/DbTula-Extract-Commands/#7-document-service","title":"7) Document Service","text":"<p>Copy:</p> <pre><code>B2A.DbTula.Cli --extract --extract-type postgres --extract-conn \"Server=db.qa.dhanman.com;Port=5432;Database=qa-dhanman-document;User Id=dhanmanqa;Password=&lt;DB_PASSWORD&gt;;\" --objects functions,procedures,views,triggers,tables --outputDir \"src/Dhanman.Document.Persistence/DBObjects\" --overwrite\n</code></pre>"},{"location":"system/development/DbTula-Extract-Commands/#notes","title":"\ud83d\udca1 Notes","text":"<ul> <li>Replace <code>&lt;DB_PASSWORD&gt;</code> with the actual QA password.</li> <li>All commands are single line and copy-ready (GitHub will show a copy icon per block).</li> <li>Output target: <code>src/&lt;ServiceName&gt;.Persistence/DBObjects</code>.</li> <li>For Prod, change server/port/db to your Prod connection values and adjust <code>&lt;ServiceName&gt;</code> if needed.</li> </ul>"},{"location":"system/development/getting-started/","title":"Getting Started","text":""},{"location":"system/development/getting-started/#urls","title":"URLs","text":"<p>https://portal.azure.com/#home</p> <p>bvsahasrabuddhe@outlook.com</p> <p>Dholya2480!</p>"},{"location":"system/development/getting-started/#required-softwares","title":"Required Softwares","text":"<ul> <li>Visual Studio 2022</li> <li>.NET 7.0 Runtime</li> <li>VS Code</li> <li>pgAdmin 4</li> <li>Plugin</li> </ul>"},{"location":"system/development/getting-started/#repositories","title":"Repositories","text":"<ul> <li>b2a-frameworkhttps://github.com/b2atech/b2a-framework</li> <li>dhanman-api-gatewayhttps://github.com/b2atech/dhanman-api-gateway</li> <li>dhanman-webapphttps://github.com/b2atech/dhanman-webapp</li> <li>dhanman-commonhttps://github.com/b2atech/dhanman-common</li> <li>dhanman-saleshttps://github.com/b2atech/dhanman-sales</li> <li>dhanman-purchasehttps://github.com/b2atech/dhanman-purchase</li> <li>dhanman-documentshttps://github.com/b2atech/dhanman-documents</li> <li>dhanman-moneyhttps://github.com/b2atech/dhanman-money</li> </ul>"},{"location":"system/development/getting-started/#how-to-use-plant-uml-on-vs-code","title":"How to use Plant UML on VS Code","text":"<ul> <li>Plant UML Plugin  </li> <li>JDK JDK</li> </ul>"},{"location":"system/development/api-internal/event-schemas/","title":"Dhanman OVH Server Service Management","text":""},{"location":"system/development/api-internal/event-schemas/#summary-checklist-of-useful-commands","title":"\ud83d\udcdd Summary checklist of useful commands","text":"Action Command Example Check status <code>sudo systemctl status &lt;service&gt;</code> Start <code>sudo systemctl start &lt;service&gt;</code> Stop <code>sudo systemctl stop &lt;service&gt;</code> Restart <code>sudo systemctl restart &lt;service&gt;</code> Enable at boot <code>sudo systemctl enable &lt;service&gt;</code> Disable at boot <code>sudo systemctl disable &lt;service&gt;</code> View logs (follow) <code>sudo journalctl -u &lt;service&gt; -f</code> List active <code>systemctl list-units --type=service \\| grep dhanman</code> List all <code>systemctl list-unit-files --type=service \\| grep dhanman</code>"},{"location":"system/development/api-internal/event-schemas/#service-names","title":"\ud83d\udd39 Service Names","text":""},{"location":"system/development/api-internal/event-schemas/#prod-services","title":"Prod Services","text":"<ul> <li><code>dhanman-common-prod.service</code></li> <li><code>dhanman-community-prod.service</code></li> <li><code>dhanman-document-prod.service</code></li> <li><code>dhanman-inventory-prod.service</code></li> <li><code>dhanman-payroll-prod.service</code></li> <li><code>dhanman-purchase-prod.service</code></li> <li><code>dhanman-sales-prod.service</code></li> </ul>"},{"location":"system/development/api-internal/event-schemas/#qa-services","title":"QA Services","text":"<ul> <li><code>dhanman-common-qa.service</code></li> <li><code>dhanman-community-qa.service</code></li> <li><code>dhanman-document-qa.service</code></li> <li><code>dhanman-inventory-qa.service</code></li> <li><code>dhanman-payroll-qa.service</code></li> <li><code>dhanman-purchase-qa.service</code></li> <li><code>dhanman-sales-qa.service</code></li> </ul>"},{"location":"system/development/api-internal/event-schemas/#test-services","title":"Test Services","text":"<ul> <li><code>dhanman-common-test.service</code></li> <li><code>dhanman-community-test.service</code></li> <li><code>dhanman-document-test.service</code></li> <li><code>dhanman-inventory-test.service</code></li> <li><code>dhanman-payroll-test.service</code></li> <li><code>dhanman-purchase-test.service</code></li> <li><code>dhanman-sales-test.service</code></li> </ul>"},{"location":"system/development/api-internal/event-schemas/#manage-all-services","title":"\ud83d\udd39 Manage all services","text":""},{"location":"system/development/api-internal/event-schemas/#list-all-services-matching-dhanman","title":"\u2705 List all services matching \"dhanman\"","text":"<p>Copy:</p> <pre><code>systemctl list-units --type=service | grep dhanman\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#list-all-services-including-inactive","title":"\u2705 List all services including inactive","text":"<p>Copy:</p> <pre><code>systemctl list-unit-files --type=service | grep dhanman\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#check-status","title":"\ud83d\udd0d Check status","text":""},{"location":"system/development/api-internal/event-schemas/#check-status-all-qa-services","title":"\ud83d\udd0d Check status all QA services","text":"<p>Copy:</p> <pre><code>sudo systemctl status dhanman-common-qa.service\nsudo systemctl status dhanman-community-qa.service\nsudo systemctl status dhanman-document-qa.service\nsudo systemctl status dhanman-inventory-qa.service\nsudo systemctl status dhanman-payroll-qa.service\nsudo systemctl status dhanman-purchase-qa.service\nsudo systemctl status dhanman-sales-qa.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#check-status-all-prod-services","title":"\ud83d\udd0d Check status all PROD services","text":"<p>Copy:</p> <pre><code>sudo systemctl status dhanman-common-prod.service\nsudo systemctl status dhanman-community-prod.service\nsudo systemctl status dhanman-document-prod.service\nsudo systemctl status dhanman-inventory-prod.service\nsudo systemctl status dhanman-payroll-prod.service\nsudo systemctl status dhanman-purchase-prod.service\nsudo systemctl status dhanman-sales-prod.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#check-status-all-test-services","title":"\ud83d\udd0d Check status all TEST services","text":"<p>Copy:</p> <pre><code>sudo systemctl status dhanman-common-test.service\nsudo systemctl status dhanman-community-test.service\nsudo systemctl status dhanman-document-test.service\nsudo systemctl status dhanman-inventory-test.service\nsudo systemctl status dhanman-payroll-test.service\nsudo systemctl status dhanman-purchase-test.service\nsudo systemctl status dhanman-sales-test.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#start-services","title":"\u25b6\ufe0f Start services","text":""},{"location":"system/development/api-internal/event-schemas/#start-all-qa-services","title":"\u25b6\ufe0f Start all QA services","text":"<p>Copy:</p> <pre><code>sudo systemctl start dhanman-common-qa.service\nsudo systemctl start dhanman-community-qa.service\nsudo systemctl start dhanman-document-qa.service\nsudo systemctl start dhanman-inventory-qa.service\nsudo systemctl start dhanman-payroll-qa.service\nsudo systemctl start dhanman-purchase-qa.service\nsudo systemctl start dhanman-sales-qa.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#start-all-prod-services","title":"\u25b6\ufe0f Start all PROD services","text":"<p>Copy:</p> <pre><code>sudo systemctl start dhanman-common-prod.service\nsudo systemctl start dhanman-community-prod.service\nsudo systemctl start dhanman-document-prod.service\nsudo systemctl start dhanman-inventory-prod.service\nsudo systemctl start dhanman-payroll-prod.service\nsudo systemctl start dhanman-purchase-prod.service\nsudo systemctl start dhanman-sales-prod.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#start-all-test-services","title":"\u25b6\ufe0f Start all TEST services","text":"<p>Copy:</p> <pre><code>sudo systemctl start dhanman-common-test.service\nsudo systemctl start dhanman-community-test.service\nsudo systemctl start dhanman-document-test.service\nsudo systemctl start dhanman-inventory-test.service\nsudo systemctl start dhanman-payroll-test.service\nsudo systemctl start dhanman-purchase-test.service\nsudo systemctl start dhanman-sales-test.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#stop-services","title":"\ud83d\udd34 Stop services","text":""},{"location":"system/development/api-internal/event-schemas/#stop-all-qa-services","title":"\ud83d\udd34 Stop all QA services","text":"<p>Copy:</p> <pre><code>sudo systemctl stop dhanman-common-qa.service\nsudo systemctl stop dhanman-community-qa.service\nsudo systemctl stop dhanman-document-qa.service\nsudo systemctl stop dhanman-inventory-qa.service\nsudo systemctl stop dhanman-payroll-qa.service\nsudo systemctl stop dhanman-purchase-qa.service\nsudo systemctl stop dhanman-sales-qa.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#stop-all-prod-services","title":"\ud83d\udd34 Stop all PROD services","text":"<p>Copy:</p> <pre><code>sudo systemctl stop dhanman-common-prod.service\nsudo systemctl stop dhanman-community-prod.service\nsudo systemctl stop dhanman-document-prod.service\nsudo systemctl stop dhanman-inventory-prod.service\nsudo systemctl stop dhanman-payroll-prod.service\nsudo systemctl stop dhanman-purchase-prod.service\nsudo systemctl stop dhanman-sales-prod.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#stop-all-test-services","title":"\ud83d\udd34 Stop all TEST services","text":"<p>Copy:</p> <pre><code>sudo systemctl stop dhanman-common-test.service\nsudo systemctl stop dhanman-community-test.service\nsudo systemctl stop dhanman-document-test.service\nsudo systemctl stop dhanman-inventory-test.service\nsudo systemctl stop dhanman-payroll-test.service\nsudo systemctl stop dhanman-purchase-test.service\nsudo systemctl stop dhanman-sales-test.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#restart-services","title":"\ud83d\udd04 Restart services","text":""},{"location":"system/development/api-internal/event-schemas/#restart-all-qa-services","title":"\ud83d\udd04 Restart all QA services","text":"<p>Copy:</p> <pre><code>sudo systemctl restart dhanman-common-qa.service\nsudo systemctl restart dhanman-community-qa.service\nsudo systemctl restart dhanman-document-qa.service\nsudo systemctl restart dhanman-inventory-qa.service\nsudo systemctl restart dhanman-payroll-qa.service\nsudo systemctl restart dhanman-purchase-qa.service\nsudo systemctl restart dhanman-sales-qa.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#restart-all-prod-services","title":"\ud83d\udd04 Restart all PROD services","text":"<p>Copy:</p> <pre><code>sudo systemctl restart dhanman-common-prod.service\nsudo systemctl restart dhanman-community-prod.service\nsudo systemctl restart dhanman-document-prod.service\nsudo systemctl restart dhanman-inventory-prod.service\nsudo systemctl restart dhanman-payroll-prod.service\nsudo systemctl restart dhanman-purchase-prod.service\nsudo systemctl restart dhanman-sales-prod.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#restart-all-test-services","title":"\ud83d\udd04 Restart all TEST services","text":"<p>Copy:</p> <pre><code>sudo systemctl restart dhanman-common-test.service\nsudo systemctl restart dhanman-community-test.service\nsudo systemctl restart dhanman-document-test.service\nsudo systemctl restart dhanman-inventory-test.service\nsudo systemctl restart dhanman-payroll-test.service\nsudo systemctl restart dhanman-purchase-test.service\nsudo systemctl restart dhanman-sales-test.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#enable-services-at-boot","title":"\u2699\ufe0f Enable services at boot","text":""},{"location":"system/development/api-internal/event-schemas/#enable-all-qa-services","title":"\u2699\ufe0f Enable all QA services","text":"<p>Copy:</p> <pre><code>sudo systemctl enable dhanman-common-qa.service\nsudo systemctl enable dhanman-community-qa.service\nsudo systemctl enable dhanman-document-qa.service\nsudo systemctl enable dhanman-inventory-qa.service\nsudo systemctl enable dhanman-payroll-qa.service\nsudo systemctl enable dhanman-purchase-qa.service\nsudo systemctl enable dhanman-sales-qa.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#enable-all-prod-services","title":"\u2699\ufe0f Enable all PROD services","text":"<p>Copy:</p> <pre><code>sudo systemctl enable dhanman-common-prod.service\nsudo systemctl enable dhanman-community-prod.service\nsudo systemctl enable dhanman-document-prod.service\nsudo systemctl enable dhanman-inventory-prod.service\nsudo systemctl enable dhanman-payroll-prod.service\nsudo systemctl enable dhanman-purchase-prod.service\nsudo systemctl enable dhanman-sales-prod.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#enable-all-test-services","title":"\u2699\ufe0f Enable all TEST services","text":"<p>Copy:</p> <pre><code>sudo systemctl enable dhanman-common-test.service\nsudo systemctl enable dhanman-community-test.service\nsudo systemctl enable dhanman-document-test.service\nsudo systemctl enable dhanman-inventory-test.service\nsudo systemctl enable dhanman-payroll-test.service\nsudo systemctl enable dhanman-purchase-test.service\nsudo systemctl enable dhanman-sales-test.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#disable-services-at-boot","title":"\ud83d\udd12 Disable services at boot","text":""},{"location":"system/development/api-internal/event-schemas/#disable-all-qa-services","title":"\ud83d\udd12 Disable all QA services","text":"<p>Copy:</p> <pre><code>sudo systemctl disable dhanman-common-qa.service\nsudo systemctl disable dhanman-community-qa.service\nsudo systemctl disable dhanman-document-qa.service\nsudo systemctl disable dhanman-inventory-qa.service\nsudo systemctl disable dhanman-payroll-qa.service\nsudo systemctl disable dhanman-purchase-qa.service\nsudo systemctl disable dhanman-sales-qa.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#disable-all-prod-services","title":"\ud83d\udd12 Disable all PROD services","text":"<p>Copy:</p> <pre><code>sudo systemctl disable dhanman-common-prod.service\nsudo systemctl disable dhanman-community-prod.service\nsudo systemctl disable dhanman-document-prod.service\nsudo systemctl disable dhanman-inventory-prod.service\nsudo systemctl disable dhanman-payroll-prod.service\nsudo systemctl disable dhanman-purchase-prod.service\nsudo systemctl disable dhanman-sales-prod.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#disable-all-test-services","title":"\ud83d\udd12 Disable all TEST services","text":"<p>Copy:</p> <pre><code>sudo systemctl disable dhanman-common-test.service\nsudo systemctl disable dhanman-community-test.service\nsudo systemctl disable dhanman-document-test.service\nsudo systemctl disable dhanman-inventory-test.service\nsudo systemctl disable dhanman-payroll-test.service\nsudo systemctl disable dhanman-purchase-test.service\nsudo systemctl disable dhanman-sales-test.service\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#view-logs","title":"\ud83d\udcdc View logs","text":""},{"location":"system/development/api-internal/event-schemas/#view-logs-all-qa-services","title":"\ud83d\udcdc View logs all QA services","text":"<p>Copy:</p> <pre><code>sudo journalctl -u dhanman-common-qa.service -f\nsudo journalctl -u dhanman-community-qa.service -f\nsudo journalctl -u dhanman-document-qa.service -f\nsudo journalctl -u dhanman-inventory-qa.service -f\nsudo journalctl -u dhanman-payroll-qa.service -f\nsudo journalctl -u dhanman-purchase-qa.service -f\nsudo journalctl -u dhanman-sales-qa.service -f\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#view-logs-all-prod-services","title":"\ud83d\udcdc View logs all PROD services","text":"<p>Copy:</p> <pre><code>sudo journalctl -u dhanman-common-prod.service -f\nsudo journalctl -u dhanman-community-prod.service -f\nsudo journalctl -u dhanman-document-prod.service -f\nsudo journalctl -u dhanman-inventory-prod.service -f\nsudo journalctl -u dhanman-payroll-prod.service -f\nsudo journalctl -u dhanman-purchase-prod.service -f\nsudo journalctl -u dhanman-sales-prod.service -f\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#view-logs-all-test-services","title":"\ud83d\udcdc View logs all TEST services","text":"<p>Copy:</p> <pre><code>sudo journalctl -u dhanman-common-test.service -f\nsudo journalctl -u dhanman-community-test.service -f\nsudo journalctl -u dhanman-document-test.service -f\nsudo journalctl -u dhanman-inventory-test.service -f\nsudo journalctl -u dhanman-payroll-test.service -f\nsudo journalctl -u dhanman-purchase-test.service -f\nsudo journalctl -u dhanman-sales-test.service -f\n</code></pre>"},{"location":"system/development/api-internal/event-schemas/#rabbitmq-docker-debugging-status-check","title":"\ud83d\udc07 RabbitMQ Docker Debugging &amp; Status Check","text":""},{"location":"system/development/api-internal/event-schemas/#1-list-all-running-containers","title":"\ud83d\udd0d 1. List all running containers","text":"<pre><code>docker ps\n</code></pre> <p>Shows all running containers, including RabbitMQ if active.</p>"},{"location":"system/development/api-internal/event-schemas/#2-check-all-containers-even-stopped-ones","title":"\ud83d\uded1 2. Check all containers (even stopped ones)","text":"<pre><code>docker ps -a\n</code></pre> <p>Lists all containers including stopped RabbitMQ ones. Useful if the container has exited or crashed.</p>"},{"location":"system/development/api-internal/event-schemas/#3-start-rabbitmq-containers-if-stopped","title":"\ud83d\udc33 3. Start RabbitMQ containers (if stopped)","text":"<pre><code>docker start rabbitmq-prod\ndocker start rabbitmq-qa\n</code></pre> <p>Restarts your RabbitMQ production and QA containers if they're not running.</p>"},{"location":"system/development/api-internal/event-schemas/#4-check-rabbitmq-container-status-from-host","title":"\ud83d\udcca 4. Check RabbitMQ container status (from host)","text":"<pre><code>docker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n</code></pre> <p>Displays a clean table of container names, their status (<code>Up</code>, <code>Exited</code>, etc.), and port mappings.</p>"},{"location":"system/development/api-internal/event-schemas/#5-access-rabbitmq-management-ui-in-browser","title":"\ud83e\udde0 5. Access RabbitMQ Management UI in browser","text":"<ul> <li>Prod: http://your-server-ip:15672</li> <li>QA: http://your-server-ip:15673</li> </ul> <p>\ud83d\udcdd Default login:</p> <pre><code>Username: guest\nPassword: guest\n</code></pre> <p>Note: <code>guest</code> user only works from localhost by default.</p>"},{"location":"system/development/api-internal/event-schemas/#6-inspect-internal-rabbitmq-node-status","title":"\ud83e\uddea 6. Inspect internal RabbitMQ node status","text":"<pre><code>docker exec -it rabbitmq-prod rabbitmqctl status\ndocker exec -it rabbitmq-qa rabbitmqctl status\n</code></pre> <p>Executes RabbitMQ CLI command inside the container to show node health, running apps, memory usage, etc.</p>"},{"location":"system/development/api-internal/event-schemas/#7-list-queues-inside-rabbitmq-node-optional","title":"\ud83d\udce6 7. List queues inside RabbitMQ node (optional)","text":"<pre><code>docker exec -it rabbitmq-prod rabbitmqctl list_queues\ndocker exec -it rabbitmq-qa rabbitmqctl list_queues\n</code></pre> <p>Displays all queues and their message counts.</p>"},{"location":"system/development/api-internal/event-schemas/#8-set-containers-to-auto-restart-on-system-reboot","title":"\ud83d\udd01 8. Set containers to auto-restart on system reboot","text":"<pre><code>docker update --restart unless-stopped rabbitmq-prod\ndocker update --restart unless-stopped rabbitmq-qa\n</code></pre> <p>Ensures RabbitMQ containers auto-start after a server reboot or Docker service restart.</p>"},{"location":"system/development/api-internal/event-schemas/#9-optional-create-a-non-guest-user-for-remote-login","title":"\ud83d\udd10 9. (Optional) Create a non-guest user for remote login","text":"<pre><code>docker exec -it rabbitmq-prod rabbitmqctl add_user admin strongpassword\ndocker exec -it rabbitmq-prod rabbitmqctl set_user_tags admin administrator\ndocker exec -it rabbitmq-prod rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n</code></pre> <p><code>guest</code> cannot log in remotely \u2014 use this to create a new admin user for secure remote access.</p>"},{"location":"system/development/api-internal/service-contracts/","title":"Service Contracts","text":"<p>sudo systemctl restart dhanman-common-qa.service sudo systemctl restart dhanman-payroll-qa.service</p> <p>login to server  ssh root@ sudo -u postgres psql"},{"location":"system/development/entity-management/create-entity-task/","title":"Create Entity Task","text":""},{"location":"system/development/entity-management/create-entity-task/#create-folder","title":"Create folder","text":"<ul> <li>C:\\Users\\DELL\\source\\repos\\dhanman-timesheet\\src\\Core\\Dhanman.TimeSheet.Domain\\Entities\\Tasks </li> </ul>"},{"location":"system/development/entity-management/create-entity-task/#create-class","title":"Create class","text":"<ul> <li>C:\\Users\\DELL\\source\\repos\\dhanman-timesheet\\src\\Core\\Dhanman.TimeSheet.Domain\\Entities\\Tasks\\Task.cs</li> </ul> <p>You can copy code for above class </p> <p>```using B2aTech.CrossCuttingConcern.Core.Abstractions; using B2aTech.CrossCuttingConcern.Core.Primitives;</p> <p>namespace Dhanman.TimeSheet.Domain.Entities.Tasks;</p> <p>public class Task : Entity, IAuditableEntity, ISoftDeletableEntity {</p> <pre><code>#region Properties\npublic Guid ProjectId { get; set; }\npublic Guid ParentTaskId { get; set; }\npublic string Name { get; set; }\npublic int PlannedHours { get; set; }\npublic DateTime CreatedOnUtc { get; }\npublic DateTime? ModifiedOnUtc { get; set; }\npublic DateTime? DeletedOnUtc { get; }\npublic bool IsDeleted { get; set; }\npublic Guid CreatedBy { get; set; }\npublic Guid? ModifiedBy { get; set; }\n#endregion\n\n#region Constructor\npublic Task(Guid id, Guid projectId, Guid parentTaskId, string name, int plannedHours, DateTime createdOnUtc, Guid createdBy)\n{\n    Id = id;\n    ProjectId = projectId;\n    ParentTaskId = parentTaskId;\n    Name = name;\n    PlannedHours = plannedHours;\n    CreatedOnUtc = createdOnUtc;\n    CreatedBy = createdBy;\n}\n#endregion\n</code></pre> <p>} ```</p>"},{"location":"system/development/entity-management/create-entity-task/#create-repository","title":"Create repository","text":"<p>C:\\Users\\DELL\\source\\repos\\dhanman-sales\\src\\Core\\Dhanman.Sales.Domain\\Abstractions\\IInvoiceWorkflowRepository.cs</p> <p>C:\\Users\\DELL\\source\\repos\\dhanman-sales\\src\\Infrastructure\\Dhanman.Sales.Persistence\\Repositories\\InvoiceWorkflowRepository.cs</p> <p>If primary key is integer then do some changes in following files (For our project - sales, purchase, inventory already added) C:\\Users\\DELL\\source\\repos\\dhanman-sales\\src\\Core\\Dhanman.Sales.Application\\Abstractions\\Data\\IApplicationDbContext.cs GetBydIdIntAsync C:\\Users\\DELL\\source\\repos\\dhanman-sales\\src\\Infrastructure\\Dhanman.Sales.Persistence\\ApplicationDbContext.cs</p> <p>C:\\Users\\DELL\\source\\repos\\dhanman-sales\\src\\Infrastructure\\Dhanman.Sales.Persistence\\DependencyInjection.cs add List line</p>"},{"location":"system/development/project-structure/create-new-project/","title":"Create New Project","text":"<p>1) First create template in folder named .template.config as </p> <p></p> <p></p> <p>template.json {     \"author\": \"Bhalchandra\",     \"classifications\": [         \"Web\"     ],     \"description\": \"Dhanman Application\",     \"name\": \"Dhanman Clean Architecture\",      \"identity\": \"MyProject.StarterWeb\",     \"tags\":{         \"language\": \"C#\"     },     \"shortName\": \"DhanmanCleanArch\",     \"sourceName\": \"Dhanman.Sales\",     \"preferNameDirectory\": \"true\" }</p> <p>2) For create template   C:\\Users\\DELL\\source\\repos\\dhanman-sales&gt;dotnet new --install ./</p> <p>3) For uninstall template  C:\\Users\\DELL\\source\\repos\\dhanman-sales&gt;dotnet new uninstall C:\\Users\\DELL\\source\\repos\\dhanman-sale</p> <p>4) For create project C:\\Users\\DELL\\source\\repos&gt;dotnet new DhanmanCleanArch -o Dhanman.Timesheet</p> <p>5) Remove unnecessary\u00a0code</p> <p>6) Some main important setting in two files 7) dotnet new --list</p>"},{"location":"system/development/project-structure/repository-conventions/","title":"Repository Conventions","text":"<ul> <li>Each service: Dhanman.{Module}.Api</li> <li>Root folders: Application, Domain, Infrastructure</li> <li>Testing: Tests/{Module}.IntegrationTests \"@</li> </ul>"},{"location":"system/development/project-structure/repository-conventions/#-operations-","title":"--- OPERATIONS ---","text":"<p>New-MarkdownFile \"system\\operations\\deployment\\production-deployment.md\" @\"</p>"},{"location":"system/development/project-structure/repository-conventions/#production-deployment","title":"Production Deployment","text":"<ol> <li>SSH into production (51.79.156.217)</li> <li>Pull latest images and restart containers:    <code>\bash    docker compose pull &amp;&amp; docker compose up -d</code></li> <li>NGINX reverse proxies with SSL via Let's Encrypt.</li> </ol>"},{"location":"system/development/standards/","title":"standards Overview","text":"<p>Auto-generated placeholder index.</p>"},{"location":"system/development/standards/cc_principle_backend/","title":"Clean code principle - c","text":""},{"location":"system/development/standards/cc_principle_backend/#1-naming-matters","title":"1. Naming Matters","text":"<p>A good name allows code to be used by many developers. The name shoul reflect what it does and give context. Use Camel case notation for variables i.e., first letter of first word of variable will be lower case and followed other words will be upper case. Use Pascal case notation for Methods and Classes i.e., first letters of words should be Upper case</p>"},{"location":"system/development/standards/cc_principle_backend/#meanfull-name","title":"Meanfull name","text":"<p>Bad: <pre><code>int p;\n</code></pre></p> <p>Good: <pre><code>int prices;\n</code></pre></p>"},{"location":"system/development/standards/cc_principle_backend/#naming-classes","title":"Naming Classes","text":"<p>Bad:</p> <pre><code>Common\nMyFunctions\nUtility\nWebsiteBL\n</code></pre> <p>Good: <pre><code>User\nAccount\nProductRepository\n</code></pre></p>"},{"location":"system/development/standards/cc_principle_backend/#naming-methods","title":"Naming Methods","text":"<p>Bad: <pre><code>Started\nComplete\nDoIt\nPage_Load\n</code></pre></p> <p>Good: <pre><code>SendEmail\nExportExcel\nIsValidAccount\nGetAcccount\n</code></pre></p>"},{"location":"system/development/standards/cc_principle_backend/#naming-booleans","title":"Naming Booleans","text":"<p>Bad: <pre><code>open\nactive\nlogin\n</code></pre></p> <p>Good: <pre><code>isOpen\nisActive\nloggedIn\n</code></pre></p>"},{"location":"system/development/standards/cc_principle_backend/#2-formatting","title":"2. Formatting","text":"<p>Code should be readability. For examples, indent style is space and tab in project Bad <pre><code>using System;\nnamespace ConsoleApp2\n{ \n    internal class Program\n    {static void Main(string[] args)\n        {\n     Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n</code></pre></p> <p>Good Visual Studio has a built-in feature to format your code perfectly, by simply Press CTRL + K and CTRL + D</p> <pre><code>using System;\nnamespace ConsoleApp2\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n</code></pre> <p>or by selecting Analyze and code cleanup -&gt; run code cleanup Code style options and code cleanup - Visual Studio (Windows) Applies to: Visual Studio Visual Studio for Mac Visual Studio Code You can define code style settings per-project by\u2026 learn.microsoft.com or by EditorConfig <pre><code>root = true[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true# C# files\n[*.cs]\nindent_size = 4\n# New line preferences\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_within_query_expression_clauses = true# Code files\n[*.{cs,csx,vb,vbx}]\nindent_size = 4# Indentation preferences\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = one_less_than_current# avoid this. unless absolutely necessary\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_event = false:suggestion# only use var when it's obvious what the variable type is\n# csharp_style_var_for_built_in_types = false:none\n# csharp_style_var_when_type_is_apparent = false:none\n# csharp_style_var_elsewhere = false:suggestion# use language keywords instead of BCL types\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion# name all constant fields using PascalCase\ndotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields\ndotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_styledotnet_naming_symbols.constant_fields.applicable_kinds = field\ndotnet_naming_symbols.constant_fields.required_modifiers = constdotnet_naming_style.pascal_case_style.capitalization = pascal_case# static fields should have s_ prefix\ndotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion\ndotnet_naming_rule.static_fields_should_have_prefix.symbols = static_fields\ndotnet_naming_rule.static_fields_should_have_prefix.style = static_prefix_styledotnet_naming_symbols.static_fields.applicable_kinds = field\ndotnet_naming_symbols.static_fields.required_modifiers = staticdotnet_naming_style.static_prefix_style.required_prefix = s_\ndotnet_naming_style.static_prefix_style.capitalization = camel_case# internal and private fields should be _camelCase\ndotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion\ndotnet_naming_rule.camel_case_for_private_internal_fields.symbols = private_internal_fields\ndotnet_naming_rule.camel_case_for_private_internal_fields.style = camel_case_underscore_styledotnet_naming_symbols.private_internal_fields.applicable_kinds = field\ndotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internaldotnet_naming_style.camel_case_underscore_style.required_prefix = _\ndotnet_naming_style.camel_case_underscore_style.capitalization = camel_case# Code style defaults\ndotnet_sort_system_directives_first = true\ncsharp_preserve_single_line_blocks = true\ncsharp_preserve_single_line_statements = false# Expression-level preferences\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion# Expression-bodied members\ncsharp_style_expression_bodied_methods = false:none\ncsharp_style_expression_bodied_constructors = false:none\ncsharp_style_expression_bodied_operators = false:none\ncsharp_style_expression_bodied_properties = true:none\ncsharp_style_expression_bodied_indexers = true:none\ncsharp_style_expression_bodied_accessors = true:none# Pattern matching\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion# Null checking preferences\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion# Space preferences\ncsharp_space_after_cast = false\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_after_comma = true\ncsharp_space_after_dot = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_after_semicolon_in_for_statement = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = do_not_ignore\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_before_comma = false\ncsharp_space_before_dot = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_between_square_brackets = false[*.{asm,inc}]\nindent_size = 8# Xml project files\n[*.{csproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]\nindent_size = 2# Xml config files\n[*.{props,targets,config,nuspec}]\nindent_size = 2[CMakeLists.txt]\nindent_size = 2[*.cmd]\nindent_size = 2\n</code></pre></p>"},{"location":"system/development/standards/cc_principle_backend/#3-commenting","title":"3. Commenting","text":"<p>Make proper comment where it is required. Don\u2019t make zommie comment in code</p> <pre><code>using System;\nnamespace ConsoleApp2\n{\n    internal class Program\n    {\n        /// &lt;summary&gt;\n        /// This is Main method to write console \n        /// &lt;/summary&gt;\n        /// &lt;param name=\"args\"&gt;&lt;/param&gt;\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n</code></pre>"},{"location":"system/development/standards/cc_principle_backend/#4-reuse-code","title":"4. Reuse Code","text":"<p>Don\u2019t copy-paste function through multiple classes. Rather make a shared library project and reference it in each of required projects. This way, we build reusable code.</p>"},{"location":"system/development/standards/cc_principle_backend/#5-keep-class-size-small","title":"5. Keep Class Size Small","text":"<p>According to single responsibitlity (one of SOLID priciple), make segregate classes to small blocks which has a single responsiblility functions only. This helps us to achieve loosely coupled code.</p>"},{"location":"system/development/standards/cc_principle_backend/#6-avoid-magic-stringsnumbers","title":"6. Avoid Magic Strings/Numbers","text":"<p>Magic string/number meaning do not use hardcoded strings or values in our application. This will difficult to track strings. Bad: <pre><code>if(userRole == \"Admin\")\n{\n   //logic here\n}\n</code></pre> Good:</p> <pre><code>const string ADMIN_ROLE = \"Admin\"\nif(userRole == ADMIN_ROLE )\n{\n   //logic here\n}\n</code></pre>"},{"location":"system/development/standards/cc_principle_backend/#7-use-asyncawait","title":"7. Use Async/Await","text":"<p>Asynchronous Programming helps improve the overall efficiency while dealing with functions that can take some time to finish computing. During such function executions, the complete application may seem to be frozen to the end-user. This results in bad user experience. In such cases, we use async methods to free the main thread Read more here.</p>"},{"location":"system/development/standards/cc_principle_backend/#8-dont-use-throw-ex-in-the-catch-block","title":"8. Don\u2019t use \u2018throw ex\u2019 in the catch block","text":"<p>Don\u2019t use \u2018throw ex\u2019 exception in catching block, this will lose stack trace data. Instead use \u2018throw\u2019, this will store the stack trace as well, which is kind of helps for diagnostics purposes. And also don\u2019t ignore caught errors <pre><code>public void SomeMethod()\n{\n   try\n   {\n       DoSomething();\n   }\n   catch\n   {\n\n   }\n}\n</code></pre> Incase of WebAPI, use exception handle middleware</p>"},{"location":"system/development/standards/cc_principle_backend/#9-avoid-long-if-condition","title":"9. Avoid long if condition","text":"<p>Long IF/ELSE or long SWITCH (long conditional statement) with polymorphism. This is also called RIP design pattern. RIP means Replace If with Polymorphism design pattern Read more here.</p> <p>Use Ternary Operator if it is for only one else condition <pre><code>public string GetValue(int value)\n{\n   return value == 10 ? \"Value is 10\" : \"Value is not 10\";\n}\n</code></pre></p>"},{"location":"system/development/standards/cc_principle_backend/#10-use-null-coalescing-operator","title":"10. Use Null Coalescing Operator","text":"<p>For null checks you can use null checks. ?? operator is known as Null Coalescing Operator in C#. Read more here.</p> <pre><code>public Student SomeMethod(Student student)\n{\n   return student ?? new Student() { Name = \"Mukesh Murugan\" };\n}\n</code></pre>"},{"location":"system/development/standards/cc_principle_backend/#11prefer-string-interpolation","title":"11.Prefer String Interpolation","text":"<p>Bad: <pre><code>public string SomeMethod(Student student)\n{\n   return \"Student Name is \" + student.Name + \". Age is \" + student.Age;\n}\n</code></pre> Good: <pre><code>public string SomeMethod(Student student)\n{\n   return $\"Student Name is {student.Name}. Age is {student.Age}\";\n}\n</code></pre></p>"},{"location":"system/development/standards/cc_principle_backend/#12-avoid-too-many-parameters","title":"12. Avoid too many parameters","text":"<p>If you want to send more then 3 parameter inputs to any mthoed, then wrap it object then pass Bad: <pre><code>public Student SomeMethod(string name, string city, int age, string section, DateTime dateOfBirth)\n{\n   return new Student()\n   {\n       Age = age,\n       Name = name,\n       //Other parameters too\n   };\n}\n</code></pre> Good: <pre><code>public Student SomeMethod(Student student)\n{\n   return student;\n}\n</code></pre></p>"},{"location":"system/development/standards/cc_principle_backend/#13-use-design-patterns","title":"13. Use Design Patterns","text":"<p>Design Pattern is a way to solve a localised problem. Design pattern are basically patterns that can provide a resuable solution while architecting solutions.</p>"},{"location":"system/development/standards/cc_principle_backend/#14-project-structure","title":"14. Project structure","text":"<p>In order to favor scalability and loosely couple the solutions, we split them up to various layers like Application, Domain, Infrastructure, and so on. One the best example to use is DDD approach (with Clean Architecture) Here are a few other advantages as well. 1. Reusability \u2014 If you want to use the same Project for another solution, you could do so. 2. Improved Security 3. Higly Maintainable 4. Scalable 5. Inversion of controls, etc</p>"},{"location":"system/development/standards/cc_principle_backend/#15-use-expression-bodied-methods","title":"15. Use Expression Bodied Methods","text":"<p>Such methods are used in scenarios where the method body is much smaller than even the method definition itself</p> <p><pre><code>public string Message() =&gt; \"Hello World!\";\n</code></pre> Read more about Expression Bodied Methods here.</p>"},{"location":"system/development/standards/clean%20code%20principle%20-%20front%20end/","title":"Clean code principle - c","text":""},{"location":"system/development/standards/clean%20code%20principle%20-%20front%20end/#1-use-default-import-to-import-react","title":"1. Use Default import to import React","text":"<p>Don't  <pre><code>import * as React from \"react\";\n</code></pre></p> <p>Do  <pre><code>import React, {useContext, useState} from \"react\";\n</code></pre></p> <p>Note: Use this option by adding in configure the tsconfig.json file as seen below: <pre><code>{\n    \"compilerOptions\":\n    {\n        \"esModuleInterop\": true\n    }\n}\n</code></pre></p>"},{"location":"system/development/standards/clean%20code%20principle%20-%20front%20end/#2-dont-use-constructor-for-class-components","title":"2. Don\u2019t use constructor for class components","text":"<pre><code>// Don't do\ntype State = {count: number}\ntype Props = {}\n\n\nclass Counter extends Component&lt;Props, State&gt; {\n    constructor(props:Props){\n    super(props);\n    this.state = {count: 0}\n    }\n}\n\n\n// Do\ntype State = {count: number}\ntype Props = {}\n\n\nclass Counter extends Component&lt;Props, State&gt; {\n    state = {count: 0}\n}\n</code></pre>"},{"location":"system/development/standards/clean%20code%20principle%20-%20front%20end/#3-dont-use-public-accessor-within-classes","title":"3. Don\u2019t use public accessor within classes","text":"<p>Don't <pre><code>import { Component } from \"react\"\n\nclass Friends extends Component {\n    public fetchFriends () {}\n    public render () {\n        return // jsx blob\n    }\n}\n</code></pre> Do <pre><code>import { Component } from \"react\"\n\nclass Friends extends Component {\n    fetchFriends () {}\n    render () {\n    return // jsx blob\n    }\n}\n</code></pre></p>"},{"location":"system/development/standards/clean%20code%20principle%20-%20front%20end/#4-dont-use-private-accessor-within-component-class","title":"4. Don\u2019t use private accessor within Component class","text":"<p>Don't <pre><code>import {Component} from \"react\"\n\nclass Friends extends Component {\n  private fetchProfileByID () {}\n\n  render () {\n    return // jsx blob\n  }\n}\n</code></pre></p> <p>Do <pre><code>import {Component} from \"react\"class Friends extends Component {\n  _fetchProfileByID () {}\n\n  render () {\n    return // jsx blob\n  }\n}\n</code></pre></p> <ol> <li>Don\u2019t use enum <pre><code>// Don't do this\nenum Response {\n  Successful,\n  Failed,\n  Pending\n}\n\nfunction fetchData (status: Response): void =&gt; {\n    // some code.\n}\n\n// Do this\ntype Response = Sucessful | Failed | Pending\n\nfunction fetchData (status: Response): void =&gt; {\n    // some code.\n}\n</code></pre></li> </ol>"},{"location":"system/development/standards/clean%20code%20principle%20-%20front%20end/#6-dont-use-method-declaration-within-interfacetype-alias","title":"6. Don\u2019t use method declaration within interface/type alias","text":"<pre><code>// Don't do\ninterface Counter {\n  start(count:number) : string\n  reset(): void\n}\n\n// Do\ninterface Counter {\n  start: (count:number) =&gt; string\n  reset: () =&gt; string\n}\n</code></pre>"},{"location":"system/development/standards/clean%20code%20principle%20-%20front%20end/#7-move-unrelated-code-into-a-separate-component","title":"7. Move unrelated code into a separate component","text":""},{"location":"system/development/standards/clean%20code%20principle%20-%20front%20end/#8-create-separate-files-for-each-component","title":"8. Create separate files for each component","text":""},{"location":"system/development/standards/clean%20code%20principle%20-%20front%20end/#9-format-your-code","title":"9. Format your code","text":""},{"location":"system/development/standards/code-review-checklist/","title":"c# review checklist","text":""},{"location":"system/development/standards/code-review-checklist/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>[ ] List item</li> </ul>"},{"location":"system/development/standards/code-review-checklist/#source-code-file","title":"Source code file","text":"<ul> <li>[ ] Sort all the using statements (Organize Using)</li> <li>[ ] Check if the code is structured in regions</li> <li>[ ] Does the code work?</li> <li>[ ] Don\u2019t just ignore warnings</li> <li>[ ] Check for SOLID, DRY, KISS principle opprtunities</li> <li>[ ] Any dependency injection is missing?</li> <li>[ ] Use interfaces wherever needed to maintain decoupling.</li> <li>[ ] Code Consistency e.g. int or Int32</li> <li>[ ] Do care for Null all the times        var first = person?.FirstName;</li> <li>[ ] Dead code, remove commented, unreachable code</li> <li>[ ] Use constants and readonly wherever applicable.</li> <li>[ ] Avoid type casting and type conversions as much as possible</li> <li>[ ] Override ToString (from Object class) method for the types which you want to provide with custom information.</li> <li>[ ] Large function alert (more than 20-30 lines)</li> <li>[ ] More parameters to a function (more than 3-4 params)</li> <li>[ ] One file shall not be more than 250-300 lines</li> <li>[ ] Check if we have logged all required infromation</li> <li>[ ] Declare access specifiers explicitly (private, public, protected, internal, protected internal)</li> <li>[ ] Use C# new language features, for example, use nameof operator to get the property/method names instead of hard coding it</li> <li>[ ] Avoid nested for/foreach loops</li> <li>[ ] Usage of \u2018out' and 'ref' keywords be avoided as recommended by Microsoft </li> <li> <p>[ ] Use PLINQ wherever applicable, as it makes parallel operation within LINQ query and improves the performance</p> <p>https://docs.microsoft.com/en-us/dotnet/standard/parallel-programming/introduction-to-plinq - [ ] Avoid nested for/foreach loops - [ ]  if (IsNullOrWhiteSpace(lastName))     throw new ArgumentException(message: \u201cCannot be blank\u201d, paramName: nameof(lastName));</p> </li> <li> <p>[ ] if (IsNullOrWhiteSpace(lastName))</p> </li> </ul>"},{"location":"system/development/standards/code-review-checklist/#performance","title":"Performance","text":"<ul> <li>[ ] Does it have a paged service endpoint?</li> <li>[ ] Are we using foreach.parallel....</li> <li>[ ] Are there local concurrency issues?</li> </ul>"},{"location":"system/development/standards/code-review-checklist/#unit-test-cases","title":"Unit Test cases","text":""},{"location":"system/development/standards/coding-standards-backend/","title":"Clean code principle - c","text":""},{"location":"system/development/standards/coding-standards-backend/#1-naming-matters","title":"1. Naming Matters","text":"<p>A good name allows code to be used by many developers. The name shoul reflect what it does and give context. Use Camel case notation for variables i.e., first letter of first word of variable will be lower case and followed other words will be upper case. Use Pascal case notation for Methods and Classes i.e., first letters of words should be Upper case</p>"},{"location":"system/development/standards/coding-standards-backend/#meanfull-name","title":"Meanfull name","text":"<p>Bad: <pre><code>int p;\n</code></pre></p> <p>Good: <pre><code>int prices;\n</code></pre></p>"},{"location":"system/development/standards/coding-standards-backend/#naming-classes","title":"Naming Classes","text":"<p>Bad:</p> <pre><code>Common\nMyFunctions\nUtility\nWebsiteBL\n</code></pre> <p>Good: <pre><code>User\nAccount\nProductRepository\n</code></pre></p>"},{"location":"system/development/standards/coding-standards-backend/#naming-methods","title":"Naming Methods","text":"<p>Bad: <pre><code>Started\nComplete\nDoIt\nPage_Load\n</code></pre></p> <p>Good: <pre><code>SendEmail\nExportExcel\nIsValidAccount\nGetAcccount\n</code></pre></p>"},{"location":"system/development/standards/coding-standards-backend/#naming-booleans","title":"Naming Booleans","text":"<p>Bad: <pre><code>open\nactive\nlogin\n</code></pre></p> <p>Good: <pre><code>isOpen\nisActive\nloggedIn\n</code></pre></p>"},{"location":"system/development/standards/coding-standards-backend/#2-formatting","title":"2. Formatting","text":"<p>Code should be readability. For examples, indent style is space and tab in project Bad <pre><code>using System;\nnamespace ConsoleApp2\n{ \n    internal class Program\n    {static void Main(string[] args)\n        {\n     Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n</code></pre></p> <p>Good Visual Studio has a built-in feature to format your code perfectly, by simply Press CTRL + K and CTRL + D</p> <pre><code>using System;\nnamespace ConsoleApp2\n{\n    internal class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n</code></pre> <p>or by selecting Analyze and code cleanup -&gt; run code cleanup Code style options and code cleanup - Visual Studio (Windows) Applies to: Visual Studio Visual Studio for Mac Visual Studio Code You can define code style settings per-project by\u2026 learn.microsoft.com or by EditorConfig <pre><code>root = true[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true# C# files\n[*.cs]\nindent_size = 4\n# New line preferences\ncsharp_new_line_before_open_brace = all\ncsharp_new_line_before_else = true\ncsharp_new_line_before_catch = true\ncsharp_new_line_before_finally = true\ncsharp_new_line_before_members_in_object_initializers = true\ncsharp_new_line_before_members_in_anonymous_types = true\ncsharp_new_line_within_query_expression_clauses = true# Code files\n[*.{cs,csx,vb,vbx}]\nindent_size = 4# Indentation preferences\ncsharp_indent_block_contents = true\ncsharp_indent_braces = false\ncsharp_indent_case_contents = true\ncsharp_indent_switch_labels = true\ncsharp_indent_labels = one_less_than_current# avoid this. unless absolutely necessary\ndotnet_style_qualification_for_field = false:suggestion\ndotnet_style_qualification_for_property = false:suggestion\ndotnet_style_qualification_for_method = false:suggestion\ndotnet_style_qualification_for_event = false:suggestion# only use var when it's obvious what the variable type is\n# csharp_style_var_for_built_in_types = false:none\n# csharp_style_var_when_type_is_apparent = false:none\n# csharp_style_var_elsewhere = false:suggestion# use language keywords instead of BCL types\ndotnet_style_predefined_type_for_locals_parameters_members = true:suggestion\ndotnet_style_predefined_type_for_member_access = true:suggestion# name all constant fields using PascalCase\ndotnet_naming_rule.constant_fields_should_be_pascal_case.severity = suggestion\ndotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields\ndotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_styledotnet_naming_symbols.constant_fields.applicable_kinds = field\ndotnet_naming_symbols.constant_fields.required_modifiers = constdotnet_naming_style.pascal_case_style.capitalization = pascal_case# static fields should have s_ prefix\ndotnet_naming_rule.static_fields_should_have_prefix.severity = suggestion\ndotnet_naming_rule.static_fields_should_have_prefix.symbols = static_fields\ndotnet_naming_rule.static_fields_should_have_prefix.style = static_prefix_styledotnet_naming_symbols.static_fields.applicable_kinds = field\ndotnet_naming_symbols.static_fields.required_modifiers = staticdotnet_naming_style.static_prefix_style.required_prefix = s_\ndotnet_naming_style.static_prefix_style.capitalization = camel_case# internal and private fields should be _camelCase\ndotnet_naming_rule.camel_case_for_private_internal_fields.severity = suggestion\ndotnet_naming_rule.camel_case_for_private_internal_fields.symbols = private_internal_fields\ndotnet_naming_rule.camel_case_for_private_internal_fields.style = camel_case_underscore_styledotnet_naming_symbols.private_internal_fields.applicable_kinds = field\ndotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internaldotnet_naming_style.camel_case_underscore_style.required_prefix = _\ndotnet_naming_style.camel_case_underscore_style.capitalization = camel_case# Code style defaults\ndotnet_sort_system_directives_first = true\ncsharp_preserve_single_line_blocks = true\ncsharp_preserve_single_line_statements = false# Expression-level preferences\ndotnet_style_object_initializer = true:suggestion\ndotnet_style_collection_initializer = true:suggestion\ndotnet_style_explicit_tuple_names = true:suggestion\ndotnet_style_coalesce_expression = true:suggestion\ndotnet_style_null_propagation = true:suggestion# Expression-bodied members\ncsharp_style_expression_bodied_methods = false:none\ncsharp_style_expression_bodied_constructors = false:none\ncsharp_style_expression_bodied_operators = false:none\ncsharp_style_expression_bodied_properties = true:none\ncsharp_style_expression_bodied_indexers = true:none\ncsharp_style_expression_bodied_accessors = true:none# Pattern matching\ncsharp_style_pattern_matching_over_is_with_cast_check = true:suggestion\ncsharp_style_pattern_matching_over_as_with_null_check = true:suggestion\ncsharp_style_inlined_variable_declaration = true:suggestion# Null checking preferences\ncsharp_style_throw_expression = true:suggestion\ncsharp_style_conditional_delegate_call = true:suggestion# Space preferences\ncsharp_space_after_cast = false\ncsharp_space_after_colon_in_inheritance_clause = true\ncsharp_space_after_comma = true\ncsharp_space_after_dot = false\ncsharp_space_after_keywords_in_control_flow_statements = true\ncsharp_space_after_semicolon_in_for_statement = true\ncsharp_space_around_binary_operators = before_and_after\ncsharp_space_around_declaration_statements = do_not_ignore\ncsharp_space_before_colon_in_inheritance_clause = true\ncsharp_space_before_comma = false\ncsharp_space_before_dot = false\ncsharp_space_before_open_square_brackets = false\ncsharp_space_before_semicolon_in_for_statement = false\ncsharp_space_between_empty_square_brackets = false\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\ncsharp_space_between_method_call_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\ncsharp_space_between_parentheses = false\ncsharp_space_between_square_brackets = false[*.{asm,inc}]\nindent_size = 8# Xml project files\n[*.{csproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]\nindent_size = 2# Xml config files\n[*.{props,targets,config,nuspec}]\nindent_size = 2[CMakeLists.txt]\nindent_size = 2[*.cmd]\nindent_size = 2\n</code></pre></p>"},{"location":"system/development/standards/coding-standards-backend/#3-commenting","title":"3. Commenting","text":"<p>Make proper comment where it is required. Don\u2019t make zommie comment in code</p> <pre><code>using System;\nnamespace ConsoleApp2\n{\n    internal class Program\n    {\n        /// &lt;summary&gt;\n        /// This is Main method to write console \n        /// &lt;/summary&gt;\n        /// &lt;param name=\"args\"&gt;&lt;/param&gt;\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n</code></pre>"},{"location":"system/development/standards/coding-standards-backend/#4-reuse-code","title":"4. Reuse Code","text":"<p>Don\u2019t copy-paste function through multiple classes. Rather make a shared library project and reference it in each of required projects. This way, we build reusable code.</p>"},{"location":"system/development/standards/coding-standards-backend/#5-keep-class-size-small","title":"5. Keep Class Size Small","text":"<p>According to single responsibitlity (one of SOLID priciple), make segregate classes to small blocks which has a single responsiblility functions only. This helps us to achieve loosely coupled code.</p>"},{"location":"system/development/standards/coding-standards-backend/#6-avoid-magic-stringsnumbers","title":"6. Avoid Magic Strings/Numbers","text":"<p>Magic string/number meaning do not use hardcoded strings or values in our application. This will difficult to track strings. Bad: <pre><code>if(userRole == \"Admin\")\n{\n   //logic here\n}\n</code></pre> Good:</p> <pre><code>const string ADMIN_ROLE = \"Admin\"\nif(userRole == ADMIN_ROLE )\n{\n   //logic here\n}\n</code></pre>"},{"location":"system/development/standards/coding-standards-backend/#7-use-asyncawait","title":"7. Use Async/Await","text":"<p>Asynchronous Programming helps improve the overall efficiency while dealing with functions that can take some time to finish computing. During such function executions, the complete application may seem to be frozen to the end-user. This results in bad user experience. In such cases, we use async methods to free the main thread Read more here.</p>"},{"location":"system/development/standards/coding-standards-backend/#8-dont-use-throw-ex-in-the-catch-block","title":"8. Don\u2019t use \u2018throw ex\u2019 in the catch block","text":"<p>Don\u2019t use \u2018throw ex\u2019 exception in catching block, this will lose stack trace data. Instead use \u2018throw\u2019, this will store the stack trace as well, which is kind of helps for diagnostics purposes. And also don\u2019t ignore caught errors <pre><code>public void SomeMethod()\n{\n   try\n   {\n       DoSomething();\n   }\n   catch\n   {\n\n   }\n}\n</code></pre> Incase of WebAPI, use exception handle middleware</p>"},{"location":"system/development/standards/coding-standards-backend/#9-avoid-long-if-condition","title":"9. Avoid long if condition","text":"<p>Long IF/ELSE or long SWITCH (long conditional statement) with polymorphism. This is also called RIP design pattern. RIP means Replace If with Polymorphism design pattern Read more here.</p> <p>Use Ternary Operator if it is for only one else condition <pre><code>public string GetValue(int value)\n{\n   return value == 10 ? \"Value is 10\" : \"Value is not 10\";\n}\n</code></pre></p>"},{"location":"system/development/standards/coding-standards-backend/#10-use-null-coalescing-operator","title":"10. Use Null Coalescing Operator","text":"<p>For null checks you can use null checks. ?? operator is known as Null Coalescing Operator in C#. Read more here.</p> <pre><code>public Student SomeMethod(Student student)\n{\n   return student ?? new Student() { Name = \"Mukesh Murugan\" };\n}\n</code></pre>"},{"location":"system/development/standards/coding-standards-backend/#11prefer-string-interpolation","title":"11.Prefer String Interpolation","text":"<p>Bad: <pre><code>public string SomeMethod(Student student)\n{\n   return \"Student Name is \" + student.Name + \". Age is \" + student.Age;\n}\n</code></pre> Good: <pre><code>public string SomeMethod(Student student)\n{\n   return $\"Student Name is {student.Name}. Age is {student.Age}\";\n}\n</code></pre></p>"},{"location":"system/development/standards/coding-standards-backend/#12-avoid-too-many-parameters","title":"12. Avoid too many parameters","text":"<p>If you want to send more then 3 parameter inputs to any mthoed, then wrap it object then pass Bad: <pre><code>public Student SomeMethod(string name, string city, int age, string section, DateTime dateOfBirth)\n{\n   return new Student()\n   {\n       Age = age,\n       Name = name,\n       //Other parameters too\n   };\n}\n</code></pre> Good: <pre><code>public Student SomeMethod(Student student)\n{\n   return student;\n}\n</code></pre></p>"},{"location":"system/development/standards/coding-standards-backend/#13-use-design-patterns","title":"13. Use Design Patterns","text":"<p>Design Pattern is a way to solve a localised problem. Design pattern are basically patterns that can provide a resuable solution while architecting solutions.</p>"},{"location":"system/development/standards/coding-standards-backend/#14-project-structure","title":"14. Project structure","text":"<p>In order to favor scalability and loosely couple the solutions, we split them up to various layers like Application, Domain, Infrastructure, and so on. One the best example to use is DDD approach (with Clean Architecture) Here are a few other advantages as well. 1. Reusability \u2014 If you want to use the same Project for another solution, you could do so. 2. Improved Security 3. Higly Maintainable 4. Scalable 5. Inversion of controls, etc</p>"},{"location":"system/development/standards/coding-standards-backend/#15-use-expression-bodied-methods","title":"15. Use Expression Bodied Methods","text":"<p>Such methods are used in scenarios where the method body is much smaller than even the method definition itself</p> <p><pre><code>public string Message() =&gt; \"Hello World!\";\n</code></pre> Read more about Expression Bodied Methods here.</p>"},{"location":"system/development/standards/coding-standards-frontend/","title":"Clean code principle - c","text":""},{"location":"system/development/standards/coding-standards-frontend/#1-use-default-import-to-import-react","title":"1. Use Default import to import React","text":"<p>Don't  <pre><code>import * as React from \"react\";\n</code></pre></p> <p>Do  <pre><code>import React, {useContext, useState} from \"react\";\n</code></pre></p> <p>Note: Use this option by adding in configure the tsconfig.json file as seen below: <pre><code>{\n    \"compilerOptions\":\n    {\n        \"esModuleInterop\": true\n    }\n}\n</code></pre></p>"},{"location":"system/development/standards/coding-standards-frontend/#2-dont-use-constructor-for-class-components","title":"2. Don\u2019t use constructor for class components","text":"<pre><code>// Don't do\ntype State = {count: number}\ntype Props = {}\n\n\nclass Counter extends Component&lt;Props, State&gt; {\n    constructor(props:Props){\n    super(props);\n    this.state = {count: 0}\n    }\n}\n\n\n// Do\ntype State = {count: number}\ntype Props = {}\n\n\nclass Counter extends Component&lt;Props, State&gt; {\n    state = {count: 0}\n}\n</code></pre>"},{"location":"system/development/standards/coding-standards-frontend/#3-dont-use-public-accessor-within-classes","title":"3. Don\u2019t use public accessor within classes","text":"<p>Don't <pre><code>import { Component } from \"react\"\n\nclass Friends extends Component {\n    public fetchFriends () {}\n    public render () {\n        return // jsx blob\n    }\n}\n</code></pre> Do <pre><code>import { Component } from \"react\"\n\nclass Friends extends Component {\n    fetchFriends () {}\n    render () {\n    return // jsx blob\n    }\n}\n</code></pre></p>"},{"location":"system/development/standards/coding-standards-frontend/#4-dont-use-private-accessor-within-component-class","title":"4. Don\u2019t use private accessor within Component class","text":"<p>Don't <pre><code>import {Component} from \"react\"\n\nclass Friends extends Component {\n  private fetchProfileByID () {}\n\n  render () {\n    return // jsx blob\n  }\n}\n</code></pre></p> <p>Do <pre><code>import {Component} from \"react\"class Friends extends Component {\n  _fetchProfileByID () {}\n\n  render () {\n    return // jsx blob\n  }\n}\n</code></pre></p> <ol> <li>Don\u2019t use enum <pre><code>// Don't do this\nenum Response {\n  Successful,\n  Failed,\n  Pending\n}\n\nfunction fetchData (status: Response): void =&gt; {\n    // some code.\n}\n\n// Do this\ntype Response = Sucessful | Failed | Pending\n\nfunction fetchData (status: Response): void =&gt; {\n    // some code.\n}\n</code></pre></li> </ol>"},{"location":"system/development/standards/coding-standards-frontend/#6-dont-use-method-declaration-within-interfacetype-alias","title":"6. Don\u2019t use method declaration within interface/type alias","text":"<pre><code>// Don't do\ninterface Counter {\n  start(count:number) : string\n  reset(): void\n}\n\n// Do\ninterface Counter {\n  start: (count:number) =&gt; string\n  reset: () =&gt; string\n}\n</code></pre>"},{"location":"system/development/standards/coding-standards-frontend/#7-move-unrelated-code-into-a-separate-component","title":"7. Move unrelated code into a separate component","text":""},{"location":"system/development/standards/coding-standards-frontend/#8-create-separate-files-for-each-component","title":"8. Create separate files for each component","text":""},{"location":"system/development/standards/coding-standards-frontend/#9-format-your-code","title":"9. Format your code","text":""},{"location":"system/development/standards/git-workflow/","title":"Best practice on git commit messages","text":"<p>Detial description find this link</p> <p>Use conventional commit to Git message</p>"},{"location":"system/development/standards/git-workflow/#type-of-commit","title":"Type of commit","text":"<p>a. feat: The new feature you\u2019re adding to a particular application b. fix: A bug fix c. build: Changes that affect build system or dependencies d. ci: Changes to CI configuration e. style: Feature and updates related to styling f. refactor: Refactoring a specific section of the codebase g. test: Everything related to testing h. docs: Everything related to documentation i. chore: Regular code maintenance j. perf: Changes that improves performance</p>"},{"location":"system/development/standards/git-workflow/#few-examples","title":"Few examples:","text":"<ul> <li>feat: added customer integration module</li> <li>refactor!: removed exception handler library now you can observe ! to make attention that this might have breaking change</li> <li>Revert commits: If you want to revert previous commit, then it should begin with revert: followed by header of reverted commit. Refer for more detail here</li> </ul>"},{"location":"system/development/standards/git-workflow/#micro-commit","title":"Micro commit","text":"<p>A micro commit is a tiny commit. Instead of completing full task and commiting in one go. Better to commit on regular basis. Like if renaming variable, or code formating, or any small changes in your code. This will help you in case if you need to revert any changes from git history</p>"},{"location":"system/development/testing/testid-strategy/","title":"Test ID Strategy for dhanman-app","text":"<p>This document outlines the conventions and best practices for using <code>data-testid</code> attributes in the dhanman-app React application to support reliable E2E testing with Playwright.</p>"},{"location":"system/development/testing/testid-strategy/#overview","title":"Overview","text":"<p>The <code>data-testid</code> attribute is used to provide stable, semantic selectors for automated testing. Unlike CSS classes or element types that might change due to styling or refactoring, <code>data-testid</code> attributes are specifically intended for testing and remain stable across UI changes.</p>"},{"location":"system/development/testing/testid-strategy/#naming-conventions","title":"Naming Conventions","text":""},{"location":"system/development/testing/testid-strategy/#format","title":"Format","text":"<p>Use kebab-case for all test IDs: <pre><code>data-testid=\"auth0-login-button\"\ndata-testid=\"invoice-create-form\"\ndata-testid=\"bill-status-badge\"\n</code></pre></p>"},{"location":"system/development/testing/testid-strategy/#component-based-naming","title":"Component-Based Naming","text":"<p>Structure test IDs to reflect the component hierarchy and purpose:</p> <pre><code>[feature]-[component]-[element]\n</code></pre> <p>Examples: - <code>auth0-login-button</code> - Auth0 login button - <code>invoice-create-form</code> - Invoice creation form - <code>bill-list-table</code> - Bills listing table - <code>payment-approve-modal</code> - Payment approval modal - <code>ledger-export-button</code> - Ledger export functionality</p>"},{"location":"system/development/testing/testid-strategy/#specific-naming-patterns","title":"Specific Naming Patterns","text":""},{"location":"system/development/testing/testid-strategy/#forms","title":"Forms","text":"<ul> <li><code>{feature}-{action}-form</code> - Main form container</li> <li><code>{feature}-{field}-input</code> - Input fields</li> <li><code>{feature}-{action}-submit</code> - Submit buttons</li> <li><code>{feature}-{action}-cancel</code> - Cancel buttons</li> </ul> <p>Examples: <pre><code>&lt;form data-testid=\"invoice-create-form\"&gt;\n  &lt;input data-testid=\"invoice-amount-input\" /&gt;\n  &lt;input data-testid=\"invoice-description-input\" /&gt;\n  &lt;button data-testid=\"invoice-create-submit\"&gt;Create Invoice&lt;/button&gt;\n  &lt;button data-testid=\"invoice-create-cancel\"&gt;Cancel&lt;/button&gt;\n&lt;/form&gt;\n</code></pre></p>"},{"location":"system/development/testing/testid-strategy/#lists-and-tables","title":"Lists and Tables","text":"<ul> <li><code>{feature}-list-container</code> - List wrapper</li> <li><code>{feature}-list-item</code> - Individual list items</li> <li><code>{feature}-table-row</code> - Table rows</li> <li><code>{feature}-{action}-button</code> - Action buttons within lists</li> </ul> <p>Examples: <pre><code>&lt;div data-testid=\"bill-list-container\"&gt;\n  &lt;div data-testid=\"bill-list-item\"&gt;\n    &lt;button data-testid=\"bill-view-button\"&gt;View&lt;/button&gt;\n    &lt;button data-testid=\"bill-edit-button\"&gt;Edit&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre></p>"},{"location":"system/development/testing/testid-strategy/#navigation-and-ui-elements","title":"Navigation and UI Elements","text":"<ul> <li><code>{section}-nav-link</code> - Navigation links</li> <li><code>{feature}-status-badge</code> - Status indicators</li> <li><code>{feature}-filter-{type}</code> - Filter controls</li> <li><code>{feature}-search-input</code> - Search inputs</li> </ul> <p>Examples: <pre><code>&lt;nav&gt;\n  &lt;a data-testid=\"bills-nav-link\"&gt;Bills&lt;/a&gt;\n  &lt;a data-testid=\"invoices-nav-link\"&gt;Invoices&lt;/a&gt;\n  &lt;a data-testid=\"payments-nav-link\"&gt;Payments&lt;/a&gt;\n&lt;/nav&gt;\n\n&lt;span data-testid=\"bill-status-badge\"&gt;Approved&lt;/span&gt;\n&lt;input data-testid=\"invoice-search-input\" placeholder=\"Search invoices...\" /&gt;\n</code></pre></p>"},{"location":"system/development/testing/testid-strategy/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"system/development/testing/testid-strategy/#1-add-to-interactive-elements","title":"1. Add to Interactive Elements","text":"<p>Prioritize adding <code>data-testid</code> to elements that users interact with: - Buttons - Form inputs - Links - Dropdowns - Modals - Tables</p>"},{"location":"system/development/testing/testid-strategy/#2-use-semantic-ids","title":"2. Use Semantic IDs","text":"<p>Make test IDs descriptive of the element's purpose, not its appearance: <pre><code>// Good\n&lt;button data-testid=\"invoice-approve-button\"&gt;Approve&lt;/button&gt;\n\n// Avoid\n&lt;button data-testid=\"green-button\"&gt;Approve&lt;/button&gt;\n</code></pre></p>"},{"location":"system/development/testing/testid-strategy/#3-maintain-consistency","title":"3. Maintain Consistency","text":"<p>Use consistent patterns across similar components: <pre><code>// All approval buttons follow the same pattern\n&lt;button data-testid=\"invoice-approve-button\"&gt;Approve Invoice&lt;/button&gt;\n&lt;button data-testid=\"bill-approve-button\"&gt;Approve Bill&lt;/button&gt;\n&lt;button data-testid=\"payment-approve-button\"&gt;Approve Payment&lt;/button&gt;\n</code></pre></p>"},{"location":"system/development/testing/testid-strategy/#4-dynamic-test-ids","title":"4. Dynamic Test IDs","text":"<p>For dynamic content (like lists), include unique identifiers: <pre><code>{bills.map(bill =&gt; (\n  &lt;div key={bill.id} data-testid={`bill-item-${bill.id}`}&gt;\n    &lt;button data-testid={`bill-edit-button-${bill.id}`}&gt;Edit&lt;/button&gt;\n    &lt;button data-testid={`bill-delete-button-${bill.id}`}&gt;Delete&lt;/button&gt;\n  &lt;/div&gt;\n))}\n</code></pre></p>"},{"location":"system/development/testing/testid-strategy/#best-practices","title":"Best Practices","text":""},{"location":"system/development/testing/testid-strategy/#1-keep-test-ids-stable","title":"1. Keep Test IDs Stable","text":"<ul> <li>Don't include dynamic values that change frequently (like timestamps)</li> <li>Don't use auto-generated IDs unless they're deterministic</li> <li>Prefer business logic identifiers over technical ones</li> </ul>"},{"location":"system/development/testing/testid-strategy/#2-document-complex-components","title":"2. Document Complex Components","text":"<p>For complex components with multiple interactive elements, document the test ID structure:</p> <pre><code>/**\n * Invoice Form Component Test IDs:\n * - invoice-create-form: Main form container\n * - invoice-amount-input: Amount input field\n * - invoice-date-picker: Date picker component\n * - invoice-vendor-select: Vendor dropdown\n * - invoice-create-submit: Form submission button\n * - invoice-create-cancel: Cancel button\n */\n</code></pre>"},{"location":"system/development/testing/testid-strategy/#3-avoid-over-testing","title":"3. Avoid Over-Testing","text":"<p>Don't add test IDs to every element - focus on: - User interaction points - Critical business logic elements - Elements that are hard to select otherwise</p>"},{"location":"system/development/testing/testid-strategy/#4-coordinate-with-tests","title":"4. Coordinate with Tests","text":"<p>Ensure test IDs are added before writing the corresponding E2E tests, and keep the test file documentation in sync with component changes.</p>"},{"location":"system/development/testing/testid-strategy/#current-test-coverage","title":"Current Test Coverage","text":""},{"location":"system/development/testing/testid-strategy/#implemented","title":"Implemented","text":"<ul> <li>Auth0 Login Button (<code>auth0-login-button</code>) - Login page authentication</li> </ul>"},{"location":"system/development/testing/testid-strategy/#planned-extensions","title":"Planned Extensions","text":"<p>Future areas for test ID implementation: - Bill creation and management forms - Invoice workflow and approval processes - Payment processing interfaces - Ledger and reporting features - User management and settings - Dashboard and analytics components</p>"},{"location":"system/development/testing/testid-strategy/#testing-integration","title":"Testing Integration","text":""},{"location":"system/development/testing/testid-strategy/#playwright-usage","title":"Playwright Usage","text":"<pre><code>// Using test IDs in Playwright tests\nawait page.getByTestId('auth0-login-button').click();\nawait page.getByTestId('invoice-create-form').waitFor();\nawait page.getByTestId('bill-amount-input').fill('100.00');\n</code></pre>"},{"location":"system/development/testing/testid-strategy/#test-organization","title":"Test Organization","text":"<p>Organize tests to match the test ID naming structure: <pre><code>e2e/\n\u251c\u2500\u2500 auth/\n\u2502   \u2514\u2500\u2500 login.spec.ts\n\u251c\u2500\u2500 bills/\n\u2502   \u251c\u2500\u2500 create.spec.ts\n\u2502   \u2514\u2500\u2500 approve.spec.ts\n\u251c\u2500\u2500 invoices/\n\u2502   \u251c\u2500\u2500 create.spec.ts\n\u2502   \u2514\u2500\u2500 workflow.spec.ts\n\u2514\u2500\u2500 payments/\n    \u2514\u2500\u2500 process.spec.ts\n</code></pre></p>"},{"location":"system/development/testing/testid-strategy/#maintenance","title":"Maintenance","text":""},{"location":"system/development/testing/testid-strategy/#regular-review","title":"Regular Review","text":"<ul> <li>Review test IDs during code reviews</li> <li>Update this document when adding new patterns</li> <li>Ensure test IDs remain consistent across feature additions</li> <li>Remove obsolete test IDs when refactoring components</li> </ul>"},{"location":"system/development/testing/testid-strategy/#versioning","title":"Versioning","text":"<p>When making breaking changes to test IDs: 1. Update this document with the new patterns 2. Update corresponding tests 3. Consider backward compatibility for gradual migration</p> <p>Note: This strategy document should be updated as the testing infrastructure grows and new patterns emerge. All team members should follow these conventions to maintain consistency across the application.</p>"},{"location":"system/development/testing/troubleshooting/","title":"Troubleshooting","text":""},{"location":"system/development/testing/troubleshooting/#additional-debugging-troubleshooting-examples","title":"\ud83d\udee0\ufe0f Additional Debugging &amp; Troubleshooting Examples","text":"<p>Troubleshooting Sequence: Follow this logical progression from basic system checks to advanced debugging techniques.</p>"},{"location":"system/development/testing/troubleshooting/#set-docker-containers-to-auto-restart-unless-stopped-manually","title":"\ufffd Set Docker containers to auto-restart (unless stopped manually)","text":"<p>Configure containers for resilience after debugging.</p> <pre><code>docker update --restart=unless-stopped dc2e017a761c   # Set Grafana to auto-restart\ndocker update --restart=unless-stopped 25f887b8c4b4   # Set Loki to auto-restart\ndocker update --restart=unless-stopped 490ec2335d55   # Set Promtail to auto-restart\ndocker update --restart=unless-stopped 2793193cd3f7   # Set RabbitMQ to auto-restart\ndocker update --restart=unless-stopped &lt;jenkins_id&gt;   # Set Jenkins to auto-restart\n</code></pre>"},{"location":"system/development/testing/troubleshooting/#phase-1-system-health-overview","title":"\ud83d\udd0d Phase 1: System Health Overview","text":""},{"location":"system/development/testing/troubleshooting/#check-server-uptime-and-reboot-history","title":"\ud83d\udd70\ufe0f Check server uptime and reboot history","text":"<p>Start with understanding the system's current state and recent activity.</p> <pre><code>uptime           # Shows current uptime and load average\nwho -b           # Shows last boot time\nlast reboot      # Shows reboot history\n</code></pre>"},{"location":"system/development/testing/troubleshooting/#check-resource-usage-for-troubleshooting-crashes","title":"\ud83e\uddd1\u200d\ud83d\udcbb Check resource usage for troubleshooting crashes","text":"<p>Identify if resource constraints are causing issues.</p> <pre><code>top              # Real-time system monitor; press q to exit\nhtop             # Advanced system monitor (install with sudo apt install htop)\ndf -h            # Show disk space usage\nfree -h          # Show memory usage\n</code></pre> <p>Check specific service resource usage:</p> <pre><code>ps aux | grep dhanman-common-qa    # Shows RAM/CPU usage for specific service\n</code></pre>"},{"location":"system/development/testing/troubleshooting/#phase-2-service-status-investigation","title":"\ud83d\udd27 Phase 2: Service Status Investigation","text":""},{"location":"system/development/testing/troubleshooting/#check-for-failed-services-system-wide","title":"\ud83d\udd0e Check for failed services (system-wide)","text":"<p>Get an overview of all system service issues.</p> <pre><code>systemctl --failed    # List all failed systemd services\n</code></pre>"},{"location":"system/development/testing/troubleshooting/#investigate-why-a-service-failed","title":"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Investigate why a service failed","text":"<p>Deep dive into specific service failures.</p> <pre><code>systemctl status dhanman-common-qa.service --no-pager    # See full status and last error\njournalctl -xeu dhanman-common-qa.service               # See extended error logs\n</code></pre>"},{"location":"system/development/testing/troubleshooting/#view-recent-logs-for-a-service","title":"\ud83d\udcdc View recent logs for a service","text":"<p>Analyze recent service activity and patterns.</p> <pre><code>journalctl -u dhanman-common-qa.service -n 50           # Show last 50 log lines\njournalctl -u dhanman-common-qa.service --since \"1 hour ago\"  # Show recent logs\n</code></pre>"},{"location":"system/development/testing/troubleshooting/#show-last-successful-run-start-stop-and-crash-times-for-a-service","title":"\ufffd Show last successful run, start, stop, and crash times for a service","text":"<p>Track service lifecycle events and identify patterns.</p> <pre><code>journalctl -u dhanman-common-qa.service --since \"2 days ago\" | grep -Ei 'Starting|Started|Stopped|failed|crash|error'\n</code></pre>"},{"location":"system/development/testing/troubleshooting/#see-all-restart-stop-start-events-for-a-service","title":"\ud83d\udd04 See all restart, stop, start events for a service","text":"<p>Filter for service state changes to understand behavior patterns.</p> <pre><code>journalctl -u dhanman-common-qa.service | grep -Ei 'failed|restart|stop|start'\n</code></pre>"},{"location":"system/development/testing/troubleshooting/#phase-3-network-connectivity-checks","title":"\ud83c\udf10 Phase 3: Network &amp; Connectivity Checks","text":""},{"location":"system/development/testing/troubleshooting/#check-if-a-port-is-listening-on-ubuntu","title":"\ud83d\udd0c Check if a port is listening on Ubuntu","text":"<p>Verify if services are properly bound to expected ports.</p> <pre><code>sudo netstat -tulpn | grep 5673    # Show process listening on port 5673\nsudo ss -tulpn | grep 5673         # Modern alternative using ss command\n</code></pre>"},{"location":"system/development/testing/troubleshooting/#test-network-connectivity-to-rabbitmq-from-ubuntu-host","title":"\ufffd\ufe0f Test network connectivity to RabbitMQ (from Ubuntu host)","text":"<p>Validate network connectivity to critical services.</p> <pre><code>nc -vz localhost 5673    # Test connection to localhost port 5673\nnc -vz &lt;remote_ip&gt; 5673  # Test connection to remote host (replace &lt;remote_ip&gt;)\n</code></pre>"},{"location":"system/development/testing/troubleshooting/#phase-4-docker-container-debugging","title":"\ud83d\udc33 Phase 4: Docker Container Debugging","text":""},{"location":"system/development/testing/troubleshooting/#docker-container-logs-and-status","title":"\ud83d\udc33 Docker container logs and status","text":"<p>Investigate containerized service issues.</p> <pre><code>docker ps -a                        # Show all containers and their status\ndocker logs rabbitmq-qa --tail 50   # Last 50 log lines for specific container\ndocker logs -f rabbitmq-qa          # Live log streaming\ndocker stats                        # Real-time container resource usage\n</code></pre>"},{"location":"system/development/testing/troubleshooting/#phase-5-advanced-debugging-when-standard-methods-fail","title":"\ud83e\udde9 Phase 5: Advanced Debugging (When Standard Methods Fail)","text":""},{"location":"system/development/testing/troubleshooting/#check-core-dumps-advanced-crash-debugging","title":"\ud83e\udde9 Check core dumps (advanced crash debugging)","text":"<p>Investigate application crashes at the system level.</p> <pre><code>sudo apt install systemd-coredump    # Install core dump viewer\ncoredumpctl list                     # List all core dumps\ncoredumpctl info                     # Details of the last core dump\ncoredumpctl dump &lt;PID&gt; &gt; core.dump   # Export specific core dump for analysis\n</code></pre>"},{"location":"system/development/testing/troubleshooting/#i-comment-guide","title":"\u2139\ufe0f Comment Guide","text":"<ul> <li>Each command includes a brief comment explaining its purpose.</li> <li>Replace <code>&lt;service&gt;</code> with the actual service name, e.g., <code>dhanman-common-qa.service</code>.</li> <li>Use these for quick troubleshooting, historical checks, and root cause analysis.</li> </ul>"},{"location":"system/infrastructure/","title":"\ud83e\uddf1 Infrastructure","text":"<p>This section documents the server infrastructure, networking, and deployment backbone of the Dhanman system. It includes details on database setup, message brokers, storage systems, and observability tools.</p>"},{"location":"system/infrastructure/#contents","title":"\ud83d\udcd8 Contents","text":""},{"location":"system/infrastructure/#overview","title":"Overview","text":"<ul> <li>Infrastructure Overview \u2014 A complete view of server clusters, environments, and deployment topology.</li> </ul>"},{"location":"system/infrastructure/#components","title":"Components","text":"<ul> <li>Database \u2014 PostgreSQL configuration, replication, and backup strategy.</li> <li>Messaging \u2014 RabbitMQ setup and exchange/queue conventions.</li> <li>Storage \u2014 MinIO-based document and media storage.</li> <li>Monitoring Overview \u2014 Logging and metrics overview using Loki, Promtail, Grafana.</li> <li>Monitoring Setup Guide \u2014 Step-by-step configuration for Prometheus, Loki, Grafana, RabbitMQ, and Node Exporter integration.</li> </ul>"},{"location":"system/infrastructure/#environment-summary","title":"\ud83d\udda5\ufe0f Environment Summary","text":"Environment Host Purpose Production <code>51.79.156.217</code> Live deployment with SSL, monitoring, and backups. QA <code>54.37.159.71</code> Testing and pre-production environment. <p>\ud83d\udcd8 Next Step: View the Infrastructure Overview or dive into Monitoring Setup Guide.</p>"},{"location":"system/infrastructure/overview/","title":"Infrastructure Overview","text":"<p>Dhanman runs on OVH Cloud VPS servers for QA and Production. - Prod: 51.79.156.217 (Singapore) - QA: 54.37.159.71 (France) - Managed using Ansible from Raigad (WSL)</p>"},{"location":"system/infrastructure/database/postgresql-setup/","title":"\ud83d\udcc4 PostgreSQL User Access Management (DhanMan on OVH)","text":""},{"location":"system/infrastructure/database/postgresql-setup/#overview","title":"\ud83e\uddfe Overview","text":"<p>This document defines: - Which users (<code>dhanmanqa</code>, <code>dhanmanprod</code>) have access to which databases. - How to check, grant, and revoke access using DBeaver or <code>psql</code>. - How to restrict access using PostgreSQL configurations.</p>"},{"location":"system/infrastructure/database/postgresql-setup/#user-access-matrix","title":"\ud83d\udc64 User Access Matrix","text":"Database dhanmanqa dhanmanprod qa-dhanman-common \u2705 Full \u274c None qa-dhanman-community \u2705 Full \u274c None qa-dhanman-inventory \u2705 Full \u274c None qa-dhanman-payroll \u2705 Full \u274c None qa-dhanman-purchase \u2705 Full \u274c None qa-dhanman-sales \u2705 Full \u274c None prod-dhanman-common \u274c None \u2705 Full prod-dhanman-community \u274c None \u2705 Full prod-dhanman-inventory \u274c None \u2705 Full prod-dhanman-payroll \u274c None \u2705 Full prod-dhanman-purchase \u274c None \u2705 Full prod-dhanman-sales \u274c None \u2705 Full"},{"location":"system/infrastructure/database/postgresql-setup/#diagnostic-check-access-in-any-database","title":"\ud83d\udd0d Diagnostic: Check Access in Any Database","text":"<p>Replace <code>'dhanmanqa'</code> with the target username:</p> <pre><code>WITH target_user AS (\n  SELECT 'dhanmanqa'::text AS username\n)\n\n-- 1. Schema usage\nSELECT 'Schema Usage' AS check_type, n.nspname AS object_name,\n       CASE WHEN has_schema_privilege(t.username, n.nspname, 'USAGE') THEN '\u2705 USAGE'\n            ELSE '\u274c NO USAGE' END AS status\nFROM pg_namespace n CROSS JOIN target_user t\nWHERE n.nspname = 'public'\n\nUNION ALL\n\n-- 2. Table access\nSELECT 'Table Access', t1.table_name,\n       CASE WHEN t2.table_name IS NOT NULL THEN '\u2705 OK'\n            ELSE '\u274c MISSING' END\nFROM information_schema.tables t1 CROSS JOIN target_user t\nLEFT JOIN (\n  SELECT DISTINCT table_name\n  FROM information_schema.role_table_grants\n  WHERE grantee = (SELECT username FROM target_user)\n    AND table_schema = 'public'\n) t2 ON t1.table_name = t2.table_name\nWHERE t1.table_schema = 'public'\n\nUNION ALL\n\n-- 3. Sequence access\nSELECT 'Sequence Access', s.relname,\n       CASE\n         WHEN has_sequence_privilege(t.username, s.oid, 'USAGE') AND\n              has_sequence_privilege(t.username, s.oid, 'SELECT') AND\n              has_sequence_privilege(t.username, s.oid, 'UPDATE')\n         THEN '\u2705 OK' ELSE '\u274c MISSING'\n       END\nFROM pg_class s\nJOIN pg_namespace n ON s.relnamespace = n.oid\nCROSS JOIN target_user t\nWHERE s.relkind = 'S' AND n.nspname = 'public';\n</code></pre>"},{"location":"system/infrastructure/database/postgresql-setup/#grant-full-access-to-a-user-on-a-database","title":"\u2795 Grant Full Access to a User on a Database","text":"<p>Run inside the target QA database:</p> <pre><code>-- Schema usage\nGRANT USAGE, CREATE ON SCHEMA public TO dhanmanqa;\n\n-- Table access\nGRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO dhanmanqa;\nALTER DEFAULT PRIVILEGES IN SCHEMA public\nGRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO dhanmanqa;\n\n-- Sequence access\nGRANT USAGE, SELECT, UPDATE ON ALL SEQUENCES IN SCHEMA public TO dhanmanqa;\nALTER DEFAULT PRIVILEGES IN SCHEMA public\nGRANT USAGE, SELECT, UPDATE ON SEQUENCES TO dhanmanqa;\n</code></pre>"},{"location":"system/infrastructure/database/postgresql-setup/#revoke-all-access-from-a-user-on-a-database","title":"\u2796 Revoke All Access from a User on a Database","text":"<p>Run inside each prod database to revoke <code>dhanmanqa</code> access:</p> <pre><code>REVOKE CONNECT ON DATABASE \"prod-dhanman-common\" FROM dhanmanqa;\nREVOKE ALL PRIVILEGES ON SCHEMA public FROM dhanmanqa;\nREVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA public FROM dhanmanqa;\nREVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public FROM dhanmanqa;\n</code></pre> <p>Repeat for all <code>prod-dhanman-*</code> databases.</p>"},{"location":"system/infrastructure/database/postgresql-setup/#restrict-access-with-pg_hbaconf","title":"\ud83d\udd12 Restrict Access with <code>pg_hba.conf</code>","text":"<ol> <li>Edit the config:</li> </ol> <pre><code>sudo nano /etc/postgresql/&lt;version&gt;/main/pg_hba.conf\n</code></pre> <ol> <li>Add entries:</li> </ol> <pre><code># Block dhanmanqa from PROD\nhost    prod-dhanman-common     dhanmanqa   0.0.0.0/0   reject\nhost    prod-dhanman-community  dhanmanqa   0.0.0.0/0   reject\nhost    prod-dhanman-inventory  dhanmanqa   0.0.0.0/0   reject\nhost    prod-dhanman-payroll    dhanmanqa   0.0.0.0/0   reject\nhost    prod-dhanman-purchase   dhanmanqa   0.0.0.0/0   reject\nhost    prod-dhanman-sales      dhanmanqa   0.0.0.0/0   reject\n\n# Allow dhanmanqa for QA\nhost    qa-dhanman-common       dhanmanqa   0.0.0.0/0   md5\n</code></pre> <ol> <li>Reload PostgreSQL:</li> </ol> <pre><code>sudo systemctl reload postgresql\n</code></pre>"},{"location":"system/infrastructure/database/postgresql-setup/#test-connection-via-cli","title":"\ud83e\uddea Test Connection via CLI","text":"<pre><code>psql -U dhanmanqa -d qa-dhanman-common -h &lt;host&gt; -W\n</code></pre> <p>Or use DBeaver to test login with credentials.</p> <p>ubuntu@vps-0e227e4b:~$ which psql /usr/bin/psql</p>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/","title":"Dhanman RabbitMQ Setup (Prod + QA)","text":""},{"location":"system/infrastructure/messaging/rabbitmq-setup/#1-prerequisites","title":"1. Prerequisites","text":"<ul> <li>Ubuntu 21.10 / 22.04 VPS on OVH</li> <li>Docker and Docker Compose installed</li> <li>NGINX already running for other services</li> <li>Domain: dhanman.com</li> </ul>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#2-docker-rabbitmq-containers-setup","title":"2. Docker RabbitMQ Containers Setup","text":""},{"location":"system/infrastructure/messaging/rabbitmq-setup/#21-production-rabbitmq","title":"2.1. Production RabbitMQ","text":"<pre><code>docker run -d --hostname dhanman-rabbit-prod --name rabbitmq-prod \\\n  -p 5672:5672 -p 15672:15672 \\\n  rabbitmq:3-management\n</code></pre>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#22-qa-rabbitmq","title":"2.2. QA RabbitMQ","text":"<pre><code>docker run -d --hostname dhanman-rabbit-qa --name rabbitmq-qa \\\n  -p 5673:5672 -p 15673:15672 \\\n  rabbitmq:3-management\n</code></pre>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#3-create-users","title":"3. Create Users","text":""},{"location":"system/infrastructure/messaging/rabbitmq-setup/#31-production-user","title":"3.1. Production User","text":"<pre><code>docker exec rabbitmq-prod rabbitmqctl add_user dhanman 'ProdStrongPassword'\ndocker exec rabbitmq-prod rabbitmqctl set_user_tags dhanman administrator\ndocker exec rabbitmq-prod rabbitmqctl set_permissions -p / dhanman \".*\" \".*\" \".*\"\n</code></pre>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#32-qa-user","title":"3.2. QA User","text":"<pre><code>docker exec rabbitmq-qa rabbitmqctl add_user dhanman_qa 'QaStrongPassword'\ndocker exec rabbitmq-qa rabbitmqctl set_user_tags dhanman_qa administrator\ndocker exec rabbitmq-qa rabbitmqctl set_permissions -p / dhanman_qa \".*\" \".*\" \".*\"\n</code></pre>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#4-dns-setup","title":"4. DNS Setup","text":"Host Type Value rabbitmq.dhanman.com A 51.79.156.217 qa.rabbitmq.dhanman.com A 51.79.156.217"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#5-nginx-reverse-proxy-setup","title":"5. NGINX Reverse Proxy Setup","text":""},{"location":"system/infrastructure/messaging/rabbitmq-setup/#51-production-nginx-config","title":"5.1. Production NGINX Config","text":"<p>File: <code>/etc/nginx/sites-available/rabbitmq-prod.conf</code></p> <pre><code>server {\n    server_name rabbitmq.dhanman.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:15672/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#52-qa-nginx-config","title":"5.2. QA NGINX Config","text":"<p>File: <code>/etc/nginx/sites-available/rabbitmq-qa.conf</code></p> <pre><code>server {\n    server_name qa.rabbitmq.dhanman.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:15673/;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#53-enable-sites","title":"5.3. Enable Sites","text":"<pre><code>sudo ln -s /etc/nginx/sites-available/rabbitmq-prod.conf /etc/nginx/sites-enabled/\nsudo ln -s /etc/nginx/sites-available/rabbitmq-qa.conf /etc/nginx/sites-enabled/\n</code></pre>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#54-test-reload-nginx","title":"5.4. Test &amp; Reload NGINX","text":"<pre><code>sudo nginx -t\nsudo systemctl reload nginx\n</code></pre>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#6-ssl-setup-with-certbot","title":"6. SSL Setup with Certbot","text":"<pre><code>sudo apt install certbot python3-certbot-nginx -y\n</code></pre>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#61-production-ssl","title":"6.1. Production SSL","text":"<pre><code>sudo certbot --nginx -d rabbitmq.dhanman.com\n</code></pre>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#62-qa-ssl","title":"6.2. QA SSL","text":"<pre><code>sudo certbot --nginx -d qa.rabbitmq.dhanman.com\n</code></pre>"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#7-final-result","title":"7. Final Result","text":"URL Environment Ports https://rabbitmq.dhanman.com Production 5672 AMQP + 443 HTTPS (Mgmt UI) https://qa.rabbitmq.dhanman.com QA 5673 AMQP + 443 HTTPS (Mgmt UI)"},{"location":"system/infrastructure/messaging/rabbitmq-setup/#8-optional-security-enhancements","title":"8. Optional Security Enhancements","text":"<ul> <li>Run <code>sudo ufw allow 'Nginx Full'</code></li> <li>Add IP restrictions or basic auth for QA endpoint</li> <li>Add RabbitMQ Prometheus exporter for Grafana dashboards</li> </ul>"},{"location":"system/infrastructure/monitoring/grafana-loki/","title":"\ud83d\udcd8 Promtail, Loki, and Grafana Setup Overview","text":"<p>This document explains the roles, flow, and architecture of the Promtail\u2013Loki\u2013Grafana stack used in the Dhanman infrastructure for centralized log management.</p>"},{"location":"system/infrastructure/monitoring/grafana-loki/#components-and-their-roles","title":"\ud83e\udde9 Components and Their Roles","text":""},{"location":"system/infrastructure/monitoring/grafana-loki/#1-promtail-log-collector","title":"1. Promtail (Log Collector)","text":"<ul> <li>Purpose: Reads and ships log files from servers.</li> <li>Responsibilities:</li> <li>Watches log files (e.g., <code>/var/www/prod/logs/*.log</code>).</li> <li>Adds contextual labels like <code>service</code>, <code>env</code>, and <code>filename</code>.</li> <li>Sends log data to Loki over HTTP.</li> <li>Example: <pre><code>/var/www/qa/logs/dhanman-purchase-20251015.log \u2192 Loki (service=purchase, env=qa)\n</code></pre></li> </ul>"},{"location":"system/infrastructure/monitoring/grafana-loki/#2-loki-log-aggregator-storage","title":"2. Loki (Log Aggregator / Storage)","text":"<ul> <li>Purpose: Acts as the central database for logs.</li> <li>Responsibilities:</li> <li>Receives and indexes logs from Promtail.</li> <li>Stores logs efficiently in chunks (like Prometheus for logs).</li> <li>Supports queries using LogQL (Loki Query Language).</li> <li>Example Query: <pre><code>{service=\"purchase\", level=\"Error\"}\n</code></pre></li> </ul>"},{"location":"system/infrastructure/monitoring/grafana-loki/#3-grafana-visualizer-dashboard","title":"3. Grafana (Visualizer / Dashboard)","text":"<ul> <li>Purpose: Provides the UI for log exploration and monitoring.</li> <li>Responsibilities:</li> <li>Connects to Loki as a data source.</li> <li>Displays logs in tables, graphs, or custom dashboards.</li> <li>Allows filtering, searching, and alert creation.</li> <li>Example Usage:</li> <li>Dashboard panels for: Recent Error Logs, Log Count by Service, SQL Query Logs.</li> </ul>"},{"location":"system/infrastructure/monitoring/grafana-loki/#data-flow-summary","title":"\u2699\ufe0f Data Flow Summary","text":"<ol> <li>Promtail reads and labels logs.  </li> <li>Promtail pushes logs to Loki.  </li> <li>Grafana queries Loki to visualize and analyze logs.</li> </ol>"},{"location":"system/infrastructure/monitoring/grafana-loki/#architecture-diagram-mermaid","title":"\ud83d\uddbc\ufe0f Architecture Diagram (Mermaid)","text":"<pre><code>graph TD\n    A[Application Logs&lt;br/&gt;/var/www/{env}/logs/*.log] --&gt;|Tails &amp; Labels| B[Promtail&lt;br/&gt;(Log Collector)]\n    B --&gt;|Pushes via HTTP| C[Loki&lt;br/&gt;(Log Aggregator &amp; Storage)]\n    C --&gt;|Queries via LogQL| D[Grafana&lt;br/&gt;(Dashboard &amp; Visualization)]\n\n    subgraph Environments\n    A\n    end\n\n    subgraph Dhanman Infrastructure\n    B\n    C\n    D\n    end\n</code></pre>"},{"location":"system/infrastructure/monitoring/grafana-loki/#example-dhanman-qa-setup","title":"\ud83e\udde0 Example: Dhanman QA Setup","text":"Component Host / Container Role Promtail <code>qa</code> droplet Collects logs from <code>/var/www/qa/logs/</code> Loki Docker container <code>loki</code> Receives and stores logs Grafana Accessible at <code>https://logs.dhanman.com</code> Visualizes logs and metrics <p>Promtail Configuration Snippet: <pre><code>scrape_configs:\n  - job_name: \"qa-logs\"\n    static_configs:\n      - targets: [\"localhost\"]\n        labels:\n          env: \"qa\"\n          __path__: /var/www/qa/logs/*.log\n</code></pre></p> <p>Loki Endpoint: <pre><code>url: http://loki:3100/loki/api/v1/push\n</code></pre></p> <p>Grafana Panels: - \u2705 Recent Error Logs (filtered by service/env) - \ud83d\udcca Log Count per Service (QA/PROD) - \ud83d\udd0d SQL Query Logs (Entity Framework tracking)</p>"},{"location":"system/infrastructure/monitoring/grafana-loki/#summary-table","title":"\ud83e\uddfe Summary Table","text":"Tool Function Acts On Outputs To Promtail Collects logs Log files Loki Loki Stores &amp; indexes Logs Grafana Grafana Displays &amp; alerts Loki Dashboard/UI"},{"location":"system/infrastructure/monitoring/grafana-loki/#benefits-of-this-setup","title":"\ud83d\ude80 Benefits of This Setup","text":"<ul> <li>Centralized log visibility across all services.  </li> <li>Easy filtering by environment (QA / PROD) and service name.  </li> <li>Lightweight and efficient (no heavy Elasticsearch setup).  </li> <li>Integrates seamlessly with existing monitoring (Prometheus, Node Exporter).</li> </ul> <p>Author: B2A Technologies Pvt. Ltd. Project: Dhanman Logging &amp; Monitoring Architecture Date: 2025-10-15</p>"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/","title":"\ud83e\udde0 Dhanman QA Monitoring Stack \u2014 Full Setup &amp; Troubleshooting Guide","text":"<p>Applies to: Host: <code>dhanman-qa</code> (OVH VPS, Ubuntu) Stack: Prometheus + Grafana + Loki + Promtail + RabbitMQ + Node Exporter  </p>"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#1-file-paths-key-configurations","title":"\ud83d\udd27 1. File Paths &amp; Key Configurations","text":"Component Container Name Config File (Host Path) Purpose Prometheus <code>prometheus</code> <code>/home/ubuntu/prometheus.yml</code> Scrape metrics from RabbitMQ, Node Exporter, and itself Loki <code>loki-stack-loki-1</code> <code>/home/ubuntu/loki-stack/loki-config.yaml</code> Centralized log store Promtail <code>promtail</code> <code>/home/ubuntu/loki-stack/promtail-config.yaml</code> Log collector for <code>/var/www/qa/logs</code> and <code>/var/www/prod/logs</code> Grafana <code>loki-stack-grafana-1</code> Docker volume <code>/var/lib/grafana</code> Dashboards for logs and metrics RabbitMQ <code>rabbitmq-qa</code> N/A (managed by Docker) Message broker; exposes metrics on <code>15692</code> Node Exporter <code>node-exporter</code> Runs directly via Docker command System-level CPU/memory/disk metrics"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#2-prometheus-configuration-homeubuntuprometheusyml","title":"\u2699\ufe0f 2. Prometheus Configuration (<code>/home/ubuntu/prometheus.yml</code>)","text":"<pre><code>global:\n  scrape_interval: 15s\n\nscrape_configs:\n  # Self-monitoring\n  - job_name: \"prometheus\"\n    static_configs:\n      - targets: [\"localhost:9090\"]\n\n  # Node Exporter (host metrics)\n  - job_name: \"node_exporter\"\n    static_configs:\n      - targets: [\"172.17.0.1:9100\"]\n\n  # RabbitMQ metrics\n  - job_name: \"rabbitmq\"\n    static_configs:\n      - targets: [\"rabbitmq-qa:15692\"]\n</code></pre> <p>\ud83e\udde0 Why <code>172.17.0.1</code>? Prometheus runs inside Docker. From a container, <code>localhost</code> refers to itself. The Docker bridge gateway (<code>172.17.0.1</code>) reaches the host machine.</p>"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#3-promtail-configuration-homeubuntuloki-stackpromtail-configyaml","title":"\ud83d\udcc4 3. Promtail Configuration (<code>/home/ubuntu/loki-stack/promtail-config.yaml</code>)","text":"<pre><code>server:\n  http_listen_port: 9080\n  grpc_listen_port: 0\n\npositions:\n  filename: /tmp/positions.yaml\n\nclients:\n  - url: http://loki-stack-loki-1:3100/loki/api/v1/push\n\nscrape_configs:\n  - job_name: dhanman-logs\n    static_configs:\n      - targets: [localhost]\n        labels:\n          env: qa\n          __path__: /var/www/qa/logs/dhanman-*.log\n      - targets: [localhost]\n        labels:\n          env: prod\n          __path__: /var/www/prod/logs/dhanman-*.log\n      - targets: [localhost]\n        labels:\n          env: test\n          __path__: /var/www/test/logs/dhanman-*.log\n\n    pipeline_stages:\n      - drop:\n          expression: '/metrics'\n\n      - regex:\n          expression: '.*/dhanman-(?P&lt;service_name&gt;[a-zA-Z0-9_]+)-\\d{8}\\.log'\n          source: filename\n\n      - replace:\n          expression: 'unknown_service'\n          replace: 'unmatched'\n\n      - json:\n          expressions:\n            level: Level\n            message: MessageTemplate\n            environment: Properties.environment\n\n      - labels:\n          env:\n          service_name:\n          level:\n          environment:\n</code></pre> <p>\u2705 Purpose: Sends QA/Prod/Test logs to Loki with environment + service labels.</p>"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#4-rabbitmq-configuration","title":"\ud83d\udc07 4. RabbitMQ Configuration","text":"<p>Container: <code>rabbitmq-qa</code> Image: <code>rabbitmq:3.13-management</code></p> <p>RabbitMQ exposes Prometheus metrics on port 15692 using the built-in plugin.</p> <pre><code>sudo docker exec -it rabbitmq-qa rabbitmq-plugins enable rabbitmq_prometheus\nsudo docker restart rabbitmq-qa\n</code></pre> <p>Verify: <pre><code>curl http://172.19.0.2:15692/metrics | head -n 10\n</code></pre> \u2705 Expected: metrics starting with <code>rabbitmq_\u2026</code></p>"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#5-node-exporter-setup","title":"\ud83e\uddcd 5. Node Exporter Setup","text":""},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#run-node-exporter","title":"Run Node Exporter","text":"<pre><code>sudo docker run -d \\\n  --name node-exporter \\\n  --restart always \\\n  -p 9100:9100 \\\n  -v /proc:/host/proc:ro \\\n  -v /sys:/host/sys:ro \\\n  -v /:/rootfs:ro \\\n  prom/node-exporter:latest \\\n  --path.procfs=/host/proc \\\n  --path.sysfs=/host/sys \\\n  --collector.filesystem.ignored-mount-points=\"^/(sys|proc|dev|host|etc)($|/)\"\n</code></pre> <p>Verify: <pre><code>curl http://localhost:9100/metrics | head -n 10\n</code></pre> \u2705 Expect lines starting with <code># HELP node_cpu_seconds_total</code>.</p>"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#6-docker-networking","title":"\ud83d\udce1 6. Docker Networking","text":"Container Networks <code>prometheus</code> <code>bridge</code>, <code>prometheus_default</code> <code>rabbitmq-qa</code> <code>bridge</code>, <code>prometheus_default</code>"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#commands-used","title":"Commands Used","text":"<pre><code>sudo docker network ls\nsudo docker network connect prometheus_default prometheus\nsudo docker restart prometheus rabbitmq-qa\n</code></pre>"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#verify","title":"Verify","text":"<p><pre><code>sudo docker exec -it prometheus ping -c 2 rabbitmq-qa\n</code></pre> \u2705 Expected: replies from <code>172.19.0.2</code>.</p>"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#7-verification-commands","title":"\ud83e\uddea 7. Verification Commands","text":"Check Command Expected RabbitMQ metrics <code>curl http://172.19.0.2:15692/metrics | head</code> Lines with <code># HELP rabbitmq_...</code> Node Exporter metrics <code>curl http://localhost:9100/metrics | head</code> Lines with <code># HELP node_cpu_seconds_total</code> Prometheus targets <code>http://&lt;QA-IP&gt;:9090/targets</code> All 3 targets show UP Loki logs Grafana \u2192 Explore \u2192 Loki <code>{env=\"qa\"}</code> shows logs Grafana dashboards Import IDs <code>10991</code> (RabbitMQ) &amp; <code>1860</code> (Node Exporter) Panels display live data"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#8-troubleshooting-cheat-sheet","title":"\ud83e\uddef 8. Troubleshooting Cheat Sheet","text":"Issue Root Cause Fix Promtail <code>failed to create client manager</code> Missing <code>clients:</code> block Add Loki client URL under <code>clients:</code> Prometheus <code>lookup rabbitmq-qa: no such host</code> Containers on different networks Connect to <code>prometheus_default</code> network RabbitMQ dashboard empty Plugin disabled / wrong IP Enable <code>rabbitmq_prometheus</code> &amp; update target Node Exporter <code>DOWN</code> Using <code>localhost</code> inside container Use <code>172.17.0.1</code> instead Port 9100 conflict Stale process <code>sudo lsof -i :9100</code> \u2192 kill PID Grafana logs missing Promtail regex issue Check <code>regex</code> &amp; <code>labels</code> stages"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#9-useful-docker-network-commands","title":"\ud83e\uddf0 9. Useful Docker &amp; Network Commands","text":"<pre><code># List all containers\nsudo docker ps -a\n\n# Inspect container networks\nsudo docker inspect &lt;container-name&gt; | grep Network\n\n# View logs\nsudo docker logs -f &lt;container-name&gt;\n\n# Get container IP\nsudo docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' &lt;container-name&gt;\n\n# List Docker networks\nsudo docker network ls\n</code></pre>"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#10-future-recommendations","title":"\ud83e\uddf1 10. Future Recommendations","text":"<ul> <li>Combine monitoring stack in one Docker Compose:</li> <li>prometheus, loki, promtail, grafana, node-exporter, rabbitmq.</li> <li>Add persistent volumes for Prometheus and Loki.</li> <li>Backup configs:   <pre><code>sudo tar -czf /root/monitoring-backup-$(date +%F).tar.gz /home/ubuntu/prometheus.yml /home/ubuntu/loki-stack/\n</code></pre></li> </ul>"},{"location":"system/infrastructure/monitoring/monitoring-setup-guide/#quick-validation-checklist","title":"\u2705 Quick Validation Checklist","text":"Service URL Validation Prometheus <code>http://54.37.159.71:9090</code> <code>node_exporter</code>, <code>rabbitmq</code>, <code>prometheus</code> = UP Grafana <code>http://54.37.159.71:3000</code> Dashboards 10991 + 1860 load properly RabbitMQ <code>http://54.37.159.71:15672</code> Web UI accessible Loki Logs Grafana \u2192 Explore \u2192 <code>{env=\"qa\"}</code> Recent logs visible Node Exporter <code>http://54.37.159.71:9100/metrics</code> Shows CPU, memory, disk metrics <p>\ud83e\udde9 End of Documentation Use this guide as your single source of truth for all future monitoring-related troubleshooting on <code>dhanman-qa</code>.</p>"},{"location":"system/infrastructure/storage/minio-setup/","title":"Dhanman MinIO Production + QA Setup Documentation","text":"<p>This document provides the complete setup process for running dual MinIO instances (Production + QA) on a single VPS server for Dhanman.</p>"},{"location":"system/infrastructure/storage/minio-setup/#prerequisites","title":"\u2705 Prerequisites","text":"<ul> <li>Ubuntu 22.04 VPS (OVH or similar)</li> <li>Domain names: <code>files.dhanman.com</code>, <code>qa.files.dhanman.com</code></li> <li>Public server IP: <code>51.79.156.217</code></li> <li>Ubuntu user with <code>sudo</code> rights</li> </ul>"},{"location":"system/infrastructure/storage/minio-setup/#step-1-prepare-folders","title":"\u2705 Step 1: Prepare folders","text":"<pre><code>sudo mkdir -p /opt/minio\nsudo mkdir -p /opt/minio-data-prod\nsudo mkdir -p /opt/minio-data-qa\nsudo chown -R ubuntu:ubuntu /opt/minio-data-prod\nsudo chown -R ubuntu:ubuntu /opt/minio-data-qa\n</code></pre>"},{"location":"system/infrastructure/storage/minio-setup/#step-2-download-minio","title":"\u2705 Step 2: Download MinIO","text":"<pre><code>cd /opt/minio\nwget https://dl.min.io/server/minio/release/linux-amd64/minio\nchmod +x minio\n</code></pre>"},{"location":"system/infrastructure/storage/minio-setup/#step-3-create-minio-systemd-services","title":"\u2705 Step 3: Create MinIO systemd services","text":""},{"location":"system/infrastructure/storage/minio-setup/#minio-prodservice","title":"\ud83c\udfaf minio-prod.service","text":"<pre><code>sudo nano /etc/systemd/system/minio-prod.service\n</code></pre> <p>Content:</p> <pre><code>[Unit]\nDescription=MinIO Production Instance\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nExecStart=/opt/minio/minio server /opt/minio-data-prod --console-address \":9001\"\nEnvironment=\"MINIO_ROOT_USER=prodadmin\"\nEnvironment=\"MINIO_ROOT_PASSWORD=YourProdStrongPassword\"\nUser=ubuntu\nGroup=ubuntu\nRestart=always\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"system/infrastructure/storage/minio-setup/#minio-qaservice","title":"\ud83c\udfaf minio-qa.service","text":"<pre><code>sudo nano /etc/systemd/system/minio-qa.service\n</code></pre> <p>Content:</p> <pre><code>[Unit]\nDescription=MinIO QA Instance\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nExecStart=/opt/minio/minio server /opt/minio-data-qa --console-address \":9003\"\nEnvironment=\"MINIO_ROOT_USER=qaadmin\"\nEnvironment=\"MINIO_ROOT_PASSWORD=YourQaStrongPassword\"\nUser=ubuntu\nGroup=ubuntu\nRestart=always\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"system/infrastructure/storage/minio-setup/#step-4-enable-and-start-services","title":"\u2705 Step 4: Enable and start services","text":"<pre><code>sudo systemctl daemon-reload\nsudo systemctl enable minio-prod\nsudo systemctl enable minio-qa\nsudo systemctl start minio-prod\nsudo systemctl start minio-qa\n</code></pre> <p>Check:</p> <pre><code>sudo systemctl status minio-prod\nsudo systemctl status minio-qa\n</code></pre>"},{"location":"system/infrastructure/storage/minio-setup/#step-5-setup-dns","title":"\u2705 Step 5: Setup DNS","text":"<p>In DNS panel:</p> <pre><code>A record \u2192 files.dhanman.com \u2192 51.79.156.217\nA record \u2192 qa.files.dhanman.com \u2192 51.79.156.217\n</code></pre>"},{"location":"system/infrastructure/storage/minio-setup/#step-6-install-nginx-certbot","title":"\u2705 Step 6: Install NGINX + Certbot","text":"<pre><code>sudo apt update\nsudo apt install nginx certbot python3-certbot-nginx -y\n</code></pre>"},{"location":"system/infrastructure/storage/minio-setup/#step-7-nginx-reverse-proxy-configuration","title":"\u2705 Step 7: NGINX reverse proxy configuration","text":""},{"location":"system/infrastructure/storage/minio-setup/#production","title":"\ud83c\udfaf Production","text":"<pre><code>sudo nano /etc/nginx/sites-available/files.dhanman.com\n</code></pre> <pre><code>server {\n    listen 80;\n    server_name files.dhanman.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:9001;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        client_max_body_size 100M;\n    }\n}\n</code></pre> <pre><code>sudo ln -s /etc/nginx/sites-available/files.dhanman.com /etc/nginx/sites-enabled/\n</code></pre>"},{"location":"system/infrastructure/storage/minio-setup/#qa","title":"\ud83c\udfaf QA","text":"<pre><code>sudo nano /etc/nginx/sites-available/qa.files.dhanman.com\n</code></pre> <pre><code>server {\n    listen 80;\n    server_name qa.files.dhanman.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:9003;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        client_max_body_size 100M;\n    }\n}\n</code></pre> <pre><code>sudo ln -s /etc/nginx/sites-available/qa.files.dhanman.com /etc/nginx/sites-enabled/\n</code></pre> <p>Reload NGINX:</p> <pre><code>sudo nginx -t\nsudo systemctl reload nginx\n</code></pre>"},{"location":"system/infrastructure/storage/minio-setup/#step-8-ssl-certificates","title":"\u2705 Step 8: SSL Certificates","text":"<pre><code>sudo certbot --nginx -d files.dhanman.com -d qa.files.dhanman.com\n</code></pre> <p>Check auto-renewal:</p> <pre><code>sudo systemctl status certbot.timer\n</code></pre>"},{"location":"system/infrastructure/storage/minio-setup/#final-result","title":"\u2705 Final Result","text":"Subdomain Port Instance files.dhanman.com 9001 Production MinIO qa.files.dhanman.com 9003 QA MinIO <p>This completes the full MinIO dual-instance infrastructure for Dhanman.</p>"},{"location":"system/onboarding/","title":"\ud83d\udc4b Developer Onboarding","text":"<p>Welcome to Dhanman! This guide helps new contributors set up their environment, understand key modules, and start contributing effectively.</p>"},{"location":"system/onboarding/#contents","title":"\ud83d\udcd8 Contents","text":""},{"location":"system/onboarding/#getting-started","title":"Getting Started","text":"<ul> <li>Developer Onboarding Guide</li> <li>First Contribution Steps</li> </ul>"},{"location":"system/onboarding/#developer-essentials","title":"\ud83e\udde9 Developer Essentials","text":"Tool Purpose Visual Studio / VS Code Backend &amp; frontend development Docker + Ansible Deployment &amp; environment setup PostgreSQL 18 Database layer RabbitMQ + Grafana Messaging &amp; monitoring <p>\ud83d\udcd8 Next Step: Begin with Developer Onboarding.</p>"},{"location":"system/onboarding/developer-onboarding/","title":"Developer Onboarding","text":"<p>Welcome to Dhanman Engineering!</p>"},{"location":"system/onboarding/developer-onboarding/#tools","title":"Tools","text":"<ul> <li>VS Code / Rider</li> <li>Docker Desktop</li> <li>WSL with Ubuntu</li> <li>GitHub CLI</li> </ul>"},{"location":"system/onboarding/developer-onboarding/#initial-setup","title":"Initial Setup","text":"<ol> <li>Clone all repos.</li> <li>Setup PostgreSQL 18.</li> <li>Configure .env files.</li> <li>Run local Grafana + Loki stack.</li> </ol>"},{"location":"system/onboarding/first-contribution/","title":"First Contribution Guide","text":"<ol> <li>Create a branch from develop</li> <li>Add your feature under the appropriate service.</li> <li>Submit a PR; reviewers are auto-assigned via CODEOWNERS.</li> <li>Ensure your PR passes:</li> <li>Unit tests</li> <li>Gatekeeper permission check</li> </ol>"},{"location":"system/operations/","title":"\ud83d\ude80 Operations","text":"<p>This section provides runbooks and operational guides for deploying, monitoring, and maintaining the Dhanman system.</p>"},{"location":"system/operations/#contents","title":"\ud83d\udcd8 Contents","text":""},{"location":"system/operations/#deployment","title":"Deployment","text":"<ul> <li>QA Deployment Guide</li> <li>Production Deployment Guide</li> <li>Database Dump &amp; Restore</li> </ul>"},{"location":"system/operations/#monitoring","title":"Monitoring","text":"<ul> <li>Grafana Dashboards</li> </ul>"},{"location":"system/operations/#runbooks","title":"Runbooks","text":"<ul> <li>QA Refresh Procedure</li> </ul>"},{"location":"system/operations/#operational-notes","title":"\ud83e\udde0 Operational Notes","text":"<ul> <li>Use Ansible roles for environment provisioning (<code>~/dhanman-infra/ansible</code>).</li> <li>Monitor uptime using Uptime-Kuma.</li> <li>Backup logs and data to Backblaze B2 nightly.</li> </ul> <p>\ud83d\udcd8 Next Step: Start with the QA Deployment Guide.</p>"},{"location":"system/operations/commands/","title":"Dhanman OVH Server Service Management","text":""},{"location":"system/operations/commands/#summary-checklist-of-useful-commands","title":"\ud83d\udcdd Summary checklist of useful commands","text":"Action Command Example Check status <code>sudo systemctl status &lt;service&gt;</code> Start <code>sudo systemctl start &lt;service&gt;</code> Stop <code>sudo systemctl stop &lt;service&gt;</code> Restart <code>sudo systemctl restart &lt;service&gt;</code> Enable at boot <code>sudo systemctl enable &lt;service&gt;</code> Disable at boot <code>sudo systemctl disable &lt;service&gt;</code> View logs (follow) <code>sudo journalctl -u &lt;service&gt; -f</code> List active <code>systemctl list-units --type=service \\| grep dhanman</code> List all <code>systemctl list-unit-files --type=service \\| grep dhanman</code>"},{"location":"system/operations/commands/#service-names","title":"\ud83d\udd39 Service Names","text":""},{"location":"system/operations/commands/#prod-services","title":"Prod Services","text":"<ul> <li><code>dhanman-common-prod.service</code></li> <li><code>dhanman-community-prod.service</code></li> <li><code>dhanman-document-prod.service</code></li> <li><code>dhanman-inventory-prod.service</code></li> <li><code>dhanman-payroll-prod.service</code></li> <li><code>dhanman-purchase-prod.service</code></li> <li><code>dhanman-sales-prod.service</code></li> </ul>"},{"location":"system/operations/commands/#qa-services","title":"QA Services","text":"<ul> <li><code>dhanman-common-qa.service</code></li> <li><code>dhanman-community-qa.service</code></li> <li><code>dhanman-document-qa.service</code></li> <li><code>dhanman-inventory-qa.service</code></li> <li><code>dhanman-payroll-qa.service</code></li> <li><code>dhanman-purchase-qa.service</code></li> <li><code>dhanman-sales-qa.service</code></li> </ul>"},{"location":"system/operations/commands/#test-services","title":"Test Services","text":"<ul> <li><code>dhanman-common-test.service</code></li> <li><code>dhanman-community-test.service</code></li> <li><code>dhanman-document-test.service</code></li> <li><code>dhanman-inventory-test.service</code></li> <li><code>dhanman-payroll-test.service</code></li> <li><code>dhanman-purchase-test.service</code></li> <li><code>dhanman-sales-test.service</code></li> </ul>"},{"location":"system/operations/commands/#manage-all-services","title":"\ud83d\udd39 Manage all services","text":""},{"location":"system/operations/commands/#list-all-services-matching-dhanman","title":"\u2705 List all services matching \"dhanman\"","text":"<p>Copy:</p> <pre><code>systemctl list-units --type=service | grep dhanman\n</code></pre>"},{"location":"system/operations/commands/#list-all-services-including-inactive","title":"\u2705 List all services including inactive","text":"<p>Copy:</p> <pre><code>systemctl list-unit-files --type=service | grep dhanman\n</code></pre>"},{"location":"system/operations/commands/#check-status","title":"\ud83d\udd0d Check status","text":""},{"location":"system/operations/commands/#check-status-all-qa-services","title":"\ud83d\udd0d Check status all QA services","text":"<p>Copy:</p> <pre><code>sudo systemctl status dhanman-common-qa.service\nsudo systemctl status dhanman-community-qa.service\nsudo systemctl status dhanman-document-qa.service\nsudo systemctl status dhanman-inventory-qa.service\nsudo systemctl status dhanman-payroll-qa.service\nsudo systemctl status dhanman-purchase-qa.service\nsudo systemctl status dhanman-sales-qa.service\n</code></pre>"},{"location":"system/operations/commands/#check-status-all-prod-services","title":"\ud83d\udd0d Check status all PROD services","text":"<p>Copy:</p> <pre><code>sudo systemctl status dhanman-common-prod.service\nsudo systemctl status dhanman-community-prod.service\nsudo systemctl status dhanman-document-prod.service\nsudo systemctl status dhanman-inventory-prod.service\nsudo systemctl status dhanman-payroll-prod.service\nsudo systemctl status dhanman-purchase-prod.service\nsudo systemctl status dhanman-sales-prod.service\n</code></pre>"},{"location":"system/operations/commands/#check-status-all-test-services","title":"\ud83d\udd0d Check status all TEST services","text":"<p>Copy:</p> <pre><code>sudo systemctl status dhanman-common-test.service\nsudo systemctl status dhanman-community-test.service\nsudo systemctl status dhanman-document-test.service\nsudo systemctl status dhanman-inventory-test.service\nsudo systemctl status dhanman-payroll-test.service\nsudo systemctl status dhanman-purchase-test.service\nsudo systemctl status dhanman-sales-test.service\n</code></pre>"},{"location":"system/operations/commands/#start-services","title":"\u25b6\ufe0f Start services","text":""},{"location":"system/operations/commands/#start-all-qa-services","title":"\u25b6\ufe0f Start all QA services","text":"<p>Copy:</p> <pre><code>sudo systemctl start dhanman-common-qa.service\nsudo systemctl start dhanman-community-qa.service\nsudo systemctl start dhanman-document-qa.service\nsudo systemctl start dhanman-inventory-qa.service\nsudo systemctl start dhanman-payroll-qa.service\nsudo systemctl start dhanman-purchase-qa.service\nsudo systemctl start dhanman-sales-qa.service\n</code></pre>"},{"location":"system/operations/commands/#start-all-prod-services","title":"\u25b6\ufe0f Start all PROD services","text":"<p>Copy:</p> <pre><code>sudo systemctl start dhanman-common-prod.service\nsudo systemctl start dhanman-community-prod.service\nsudo systemctl start dhanman-document-prod.service\nsudo systemctl start dhanman-inventory-prod.service\nsudo systemctl start dhanman-payroll-prod.service\nsudo systemctl start dhanman-purchase-prod.service\nsudo systemctl start dhanman-sales-prod.service\n</code></pre>"},{"location":"system/operations/commands/#start-all-test-services","title":"\u25b6\ufe0f Start all TEST services","text":"<p>Copy:</p> <pre><code>sudo systemctl start dhanman-common-test.service\nsudo systemctl start dhanman-community-test.service\nsudo systemctl start dhanman-document-test.service\nsudo systemctl start dhanman-inventory-test.service\nsudo systemctl start dhanman-payroll-test.service\nsudo systemctl start dhanman-purchase-test.service\nsudo systemctl start dhanman-sales-test.service\n</code></pre>"},{"location":"system/operations/commands/#stop-services","title":"\ud83d\udd34 Stop services","text":""},{"location":"system/operations/commands/#stop-all-qa-services","title":"\ud83d\udd34 Stop all QA services","text":"<p>Copy:</p> <pre><code>sudo systemctl stop dhanman-common-qa.service\nsudo systemctl stop dhanman-community-qa.service\nsudo systemctl stop dhanman-document-qa.service\nsudo systemctl stop dhanman-inventory-qa.service\nsudo systemctl stop dhanman-payroll-qa.service\nsudo systemctl stop dhanman-purchase-qa.service\nsudo systemctl stop dhanman-sales-qa.service\n</code></pre>"},{"location":"system/operations/commands/#stop-all-prod-services","title":"\ud83d\udd34 Stop all PROD services","text":"<p>Copy:</p> <pre><code>sudo systemctl stop dhanman-common-prod.service\nsudo systemctl stop dhanman-community-prod.service\nsudo systemctl stop dhanman-document-prod.service\nsudo systemctl stop dhanman-inventory-prod.service\nsudo systemctl stop dhanman-payroll-prod.service\nsudo systemctl stop dhanman-purchase-prod.service\nsudo systemctl stop dhanman-sales-prod.service\n</code></pre>"},{"location":"system/operations/commands/#stop-all-test-services","title":"\ud83d\udd34 Stop all TEST services","text":"<p>Copy:</p> <pre><code>sudo systemctl stop dhanman-common-test.service\nsudo systemctl stop dhanman-community-test.service\nsudo systemctl stop dhanman-document-test.service\nsudo systemctl stop dhanman-inventory-test.service\nsudo systemctl stop dhanman-payroll-test.service\nsudo systemctl stop dhanman-purchase-test.service\nsudo systemctl stop dhanman-sales-test.service\n</code></pre>"},{"location":"system/operations/commands/#restart-services","title":"\ud83d\udd04 Restart services","text":""},{"location":"system/operations/commands/#restart-all-qa-services","title":"\ud83d\udd04 Restart all QA services","text":"<p>Copy:</p> <pre><code>sudo systemctl restart dhanman-common-qa.service\nsudo systemctl restart dhanman-community-qa.service\nsudo systemctl restart dhanman-document-qa.service\nsudo systemctl restart dhanman-inventory-qa.service\nsudo systemctl restart dhanman-payroll-qa.service\nsudo systemctl restart dhanman-purchase-qa.service\nsudo systemctl restart dhanman-sales-qa.service\n</code></pre>"},{"location":"system/operations/commands/#restart-all-prod-services","title":"\ud83d\udd04 Restart all PROD services","text":"<p>Copy:</p> <pre><code>sudo systemctl restart dhanman-common-prod.service\nsudo systemctl restart dhanman-community-prod.service\nsudo systemctl restart dhanman-document-prod.service\nsudo systemctl restart dhanman-inventory-prod.service\nsudo systemctl restart dhanman-payroll-prod.service\nsudo systemctl restart dhanman-purchase-prod.service\nsudo systemctl restart dhanman-sales-prod.service\n</code></pre>"},{"location":"system/operations/commands/#restart-all-test-services","title":"\ud83d\udd04 Restart all TEST services","text":"<p>Copy:</p> <pre><code>sudo systemctl restart dhanman-common-test.service\nsudo systemctl restart dhanman-community-test.service\nsudo systemctl restart dhanman-document-test.service\nsudo systemctl restart dhanman-inventory-test.service\nsudo systemctl restart dhanman-payroll-test.service\nsudo systemctl restart dhanman-purchase-test.service\nsudo systemctl restart dhanman-sales-test.service\n</code></pre>"},{"location":"system/operations/commands/#enable-services-at-boot","title":"\u2699\ufe0f Enable services at boot","text":""},{"location":"system/operations/commands/#enable-all-qa-services","title":"\u2699\ufe0f Enable all QA services","text":"<p>Copy:</p> <pre><code>sudo systemctl enable dhanman-common-qa.service\nsudo systemctl enable dhanman-community-qa.service\nsudo systemctl enable dhanman-document-qa.service\nsudo systemctl enable dhanman-inventory-qa.service\nsudo systemctl enable dhanman-payroll-qa.service\nsudo systemctl enable dhanman-purchase-qa.service\nsudo systemctl enable dhanman-sales-qa.service\n</code></pre>"},{"location":"system/operations/commands/#enable-all-prod-services","title":"\u2699\ufe0f Enable all PROD services","text":"<p>Copy:</p> <pre><code>sudo systemctl enable dhanman-common-prod.service\nsudo systemctl enable dhanman-community-prod.service\nsudo systemctl enable dhanman-document-prod.service\nsudo systemctl enable dhanman-inventory-prod.service\nsudo systemctl enable dhanman-payroll-prod.service\nsudo systemctl enable dhanman-purchase-prod.service\nsudo systemctl enable dhanman-sales-prod.service\n</code></pre>"},{"location":"system/operations/commands/#enable-all-test-services","title":"\u2699\ufe0f Enable all TEST services","text":"<p>Copy:</p> <pre><code>sudo systemctl enable dhanman-common-test.service\nsudo systemctl enable dhanman-community-test.service\nsudo systemctl enable dhanman-document-test.service\nsudo systemctl enable dhanman-inventory-test.service\nsudo systemctl enable dhanman-payroll-test.service\nsudo systemctl enable dhanman-purchase-test.service\nsudo systemctl enable dhanman-sales-test.service\n</code></pre>"},{"location":"system/operations/commands/#disable-services-at-boot","title":"\ud83d\udd12 Disable services at boot","text":""},{"location":"system/operations/commands/#disable-all-qa-services","title":"\ud83d\udd12 Disable all QA services","text":"<p>Copy:</p> <pre><code>sudo systemctl disable dhanman-common-qa.service\nsudo systemctl disable dhanman-community-qa.service\nsudo systemctl disable dhanman-document-qa.service\nsudo systemctl disable dhanman-inventory-qa.service\nsudo systemctl disable dhanman-payroll-qa.service\nsudo systemctl disable dhanman-purchase-qa.service\nsudo systemctl disable dhanman-sales-qa.service\n</code></pre>"},{"location":"system/operations/commands/#disable-all-prod-services","title":"\ud83d\udd12 Disable all PROD services","text":"<p>Copy:</p> <pre><code>sudo systemctl disable dhanman-common-prod.service\nsudo systemctl disable dhanman-community-prod.service\nsudo systemctl disable dhanman-document-prod.service\nsudo systemctl disable dhanman-inventory-prod.service\nsudo systemctl disable dhanman-payroll-prod.service\nsudo systemctl disable dhanman-purchase-prod.service\nsudo systemctl disable dhanman-sales-prod.service\n</code></pre>"},{"location":"system/operations/commands/#disable-all-test-services","title":"\ud83d\udd12 Disable all TEST services","text":"<p>Copy:</p> <pre><code>sudo systemctl disable dhanman-common-test.service\nsudo systemctl disable dhanman-community-test.service\nsudo systemctl disable dhanman-document-test.service\nsudo systemctl disable dhanman-inventory-test.service\nsudo systemctl disable dhanman-payroll-test.service\nsudo systemctl disable dhanman-purchase-test.service\nsudo systemctl disable dhanman-sales-test.service\n</code></pre>"},{"location":"system/operations/commands/#view-logs","title":"\ud83d\udcdc View logs","text":""},{"location":"system/operations/commands/#view-logs-all-qa-services","title":"\ud83d\udcdc View logs all QA services","text":"<p>Copy:</p> <pre><code>sudo journalctl -u dhanman-common-qa.service -f\nsudo journalctl -u dhanman-community-qa.service -f\nsudo journalctl -u dhanman-document-qa.service -f\nsudo journalctl -u dhanman-inventory-qa.service -f\nsudo journalctl -u dhanman-payroll-qa.service -f\nsudo journalctl -u dhanman-purchase-qa.service -f\nsudo journalctl -u dhanman-sales-qa.service -f\n</code></pre>"},{"location":"system/operations/commands/#view-logs-all-prod-services","title":"\ud83d\udcdc View logs all PROD services","text":"<p>Copy:</p> <pre><code>sudo journalctl -u dhanman-common-prod.service -f\nsudo journalctl -u dhanman-community-prod.service -f\nsudo journalctl -u dhanman-document-prod.service -f\nsudo journalctl -u dhanman-inventory-prod.service -f\nsudo journalctl -u dhanman-payroll-prod.service -f\nsudo journalctl -u dhanman-purchase-prod.service -f\nsudo journalctl -u dhanman-sales-prod.service -f\n</code></pre>"},{"location":"system/operations/commands/#view-logs-all-test-services","title":"\ud83d\udcdc View logs all TEST services","text":"<p>Copy:</p> <pre><code>sudo journalctl -u dhanman-common-test.service -f\nsudo journalctl -u dhanman-community-test.service -f\nsudo journalctl -u dhanman-document-test.service -f\nsudo journalctl -u dhanman-inventory-test.service -f\nsudo journalctl -u dhanman-payroll-test.service -f\nsudo journalctl -u dhanman-purchase-test.service -f\nsudo journalctl -u dhanman-sales-test.service -f\n</code></pre>"},{"location":"system/operations/commands/#rabbitmq-docker-debugging-status-check","title":"\ud83d\udc07 RabbitMQ Docker Debugging &amp; Status Check","text":""},{"location":"system/operations/commands/#1-list-all-running-containers","title":"\ud83d\udd0d 1. List all running containers","text":"<pre><code>docker ps\n</code></pre> <p>Shows all running containers, including RabbitMQ if active.</p>"},{"location":"system/operations/commands/#2-check-all-containers-even-stopped-ones","title":"\ud83d\uded1 2. Check all containers (even stopped ones)","text":"<pre><code>docker ps -a\n</code></pre> <p>Lists all containers including stopped RabbitMQ ones. Useful if the container has exited or crashed.</p>"},{"location":"system/operations/commands/#3-start-rabbitmq-containers-if-stopped","title":"\ud83d\udc33 3. Start RabbitMQ containers (if stopped)","text":"<pre><code>docker start rabbitmq-prod\ndocker start rabbitmq-qa\n</code></pre> <p>Restarts your RabbitMQ production and QA containers if they're not running.</p>"},{"location":"system/operations/commands/#4-check-rabbitmq-container-status-from-host","title":"\ud83d\udcca 4. Check RabbitMQ container status (from host)","text":"<pre><code>docker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"\n</code></pre> <p>Displays a clean table of container names, their status (<code>Up</code>, <code>Exited</code>, etc.), and port mappings.</p>"},{"location":"system/operations/commands/#5-access-rabbitmq-management-ui-in-browser","title":"\ud83e\udde0 5. Access RabbitMQ Management UI in browser","text":"<ul> <li>Prod: http://your-server-ip:15672</li> <li>QA: http://your-server-ip:15673</li> </ul> <p>\ud83d\udcdd Default login:</p> <pre><code>Username: guest\nPassword: guest\n</code></pre> <p>Note: <code>guest</code> user only works from localhost by default.</p>"},{"location":"system/operations/commands/#6-inspect-internal-rabbitmq-node-status","title":"\ud83e\uddea 6. Inspect internal RabbitMQ node status","text":"<pre><code>docker exec -it rabbitmq-prod rabbitmqctl status\ndocker exec -it rabbitmq-qa rabbitmqctl status\n</code></pre> <p>Executes RabbitMQ CLI command inside the container to show node health, running apps, memory usage, etc.</p>"},{"location":"system/operations/commands/#7-list-queues-inside-rabbitmq-node-optional","title":"\ud83d\udce6 7. List queues inside RabbitMQ node (optional)","text":"<pre><code>docker exec -it rabbitmq-prod rabbitmqctl list_queues\ndocker exec -it rabbitmq-qa rabbitmqctl list_queues\n</code></pre> <p>Displays all queues and their message counts.</p>"},{"location":"system/operations/commands/#8-set-containers-to-auto-restart-on-system-reboot","title":"\ud83d\udd01 8. Set containers to auto-restart on system reboot","text":"<pre><code>docker update --restart unless-stopped rabbitmq-prod\ndocker update --restart unless-stopped rabbitmq-qa\n</code></pre> <p>Ensures RabbitMQ containers auto-start after a server reboot or Docker service restart.</p>"},{"location":"system/operations/commands/#9-optional-create-a-non-guest-user-for-remote-login","title":"\ud83d\udd10 9. (Optional) Create a non-guest user for remote login","text":"<pre><code>docker exec -it rabbitmq-prod rabbitmqctl add_user admin strongpassword\ndocker exec -it rabbitmq-prod rabbitmqctl set_user_tags admin administrator\ndocker exec -it rabbitmq-prod rabbitmqctl set_permissions -p / admin \".*\" \".*\" \".*\"\n</code></pre> <p><code>guest</code> cannot log in remotely \u2014 use this to create a new admin user for secure remote access.</p>"},{"location":"system/operations/deployment/dump_restore_clean/","title":"\ud83d\udee0\ufe0f PostgreSQL QA Database Backup &amp; Restore Documentation","text":""},{"location":"system/operations/deployment/dump_restore_clean/#objective","title":"\ud83c\udfaf Objective","text":"<p>To:</p> <ol> <li>Take fresh <code>.sql</code> backups of all QA databases from Azure PostgreSQL</li> <li>Clean corresponding QA databases in OVH PostgreSQL</li> <li>Restore the Azure QA backups into OVH QA databases</li> </ol>"},{"location":"system/operations/deployment/dump_restore_clean/#step-1-backup-from-azure-qa-to-local-sql-files","title":"\u2601\ufe0f Step 1: Backup from Azure QA to Local <code>.sql</code> Files","text":"<p>Use the following commands in PowerShell to export all QA databases from Azure:</p> <pre><code>$env:PGPASSWORD = \"Your_Password\"\n\n# COMMON\n.\\pg_dump.exe -h az-dhanman-qa.postgres.database.azure.com -U dhanmanqa -d qa-dhanman-common -f \"C:\\Users\\SAI\\Desktop\\your_path\\qa-common-backup.sql\"\n\n# COMMUNITY\n.\\pg_dump.exe -h az-dhanman-qa.postgres.database.azure.com -U dhanmanqa -d qa-dhanman-community -f \"C:\\Users\\SAI\\Desktop\\your_path\\qa-community-backup.sql\"\n\n# SALES\n.\\pg_dump.exe -h az-dhanman-qa.postgres.database.azure.com -U dhanmanqa -d qa-dhanman-sales -f \"C:\\Users\\SAI\\Desktop\\your_path\\qa-sales-backup.sql\"\n\n# PURCHASE\n.\\pg_dump.exe -h az-dhanman-qa.postgres.database.azure.com -U dhanmanqa -d qa-dhanman-purchase -f \"C:\\Users\\SAI\\Desktop\\your_path\\qa-purchase-backup.sql\"\n\n# INVENTORY\n.\\pg_dump.exe -h az-dhanman-qa.postgres.database.azure.com -U dhanmanqa -d qa-dhanman-inventory -f \"C:\\Users\\SAI\\Desktop\\your_path\\qa-inventory-backup.sql\"\n\n# PAYROLL\n.\\pg_dump.exe -h az-dhanman-qa.postgres.database.azure.com -U dhanmanqa -d qa-dhanman-payroll -f \"C:\\Users\\SAI\\Desktop\\your_path\\qa-payroll-backup.sql\"\n\nRemove-Item Env:PGPASSWORD\n</code></pre>"},{"location":"system/operations/deployment/dump_restore_clean/#step-2-clean-target-ovh-qa-databases","title":"\ud83e\uddfc Step 2: Clean Target OVH QA Databases","text":"<p>Use the following SQL cleanup block to remove all objects from the <code>public</code> schema before restoring:</p> <p>Save as <code>cleanup.sql</code> and run for each OVH QA DB before restore.</p> <pre><code>DO\n$$\nDECLARE\n    obj RECORD;\nBEGIN\n    -- Drop views\n    FOR obj IN (SELECT table_name FROM information_schema.views WHERE table_schema = 'public') LOOP\n        EXECUTE format('DROP VIEW IF EXISTS public.%I CASCADE', obj.table_name);\n    END LOOP;\n\n    -- Drop materialized views\n    FOR obj IN (SELECT matviewname FROM pg_matviews WHERE schemaname = 'public') LOOP\n        EXECUTE format('DROP MATERIALIZED VIEW IF EXISTS public.%I CASCADE', obj.matviewname);\n    END LOOP;\n\n    -- Drop tables\n    FOR obj IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP\n        EXECUTE format('DROP TABLE IF EXISTS public.%I CASCADE', obj.tablename);\n    END LOOP;\n\n    -- Drop sequences\n    FOR obj IN (SELECT sequence_name FROM information_schema.sequences WHERE sequence_schema = 'public') LOOP\n        EXECUTE format('DROP SEQUENCE IF EXISTS public.%I CASCADE', obj.sequence_name);\n    END LOOP;\n\n    -- Drop all functions (including overloaded)\n    FOR obj IN (\n        SELECT p.oid::regprocedure AS full_name\n        FROM pg_proc p\n        JOIN pg_namespace n ON n.oid = p.pronamespace\n        WHERE n.nspname = 'public' AND p.prokind = 'f'\n    ) LOOP\n        EXECUTE 'DROP FUNCTION IF EXISTS ' || obj.full_name || ' CASCADE';\n    END LOOP;\n\n    -- Drop all procedures (PostgreSQL 11+)\n    FOR obj IN (\n        SELECT p.oid::regprocedure AS full_name\n        FROM pg_proc p\n        JOIN pg_namespace n ON n.oid = p.pronamespace\n        WHERE n.nspname = 'public' AND p.prokind = 'p'\n    ) LOOP\n        EXECUTE 'DROP PROCEDURE IF EXISTS ' || obj.full_name || ' CASCADE';\n    END LOOP;\n\n    -- Drop enum types\n    FOR obj IN (\n        SELECT t.typname\n        FROM pg_type t\n        JOIN pg_namespace n ON n.oid = t.typnamespace\n        WHERE n.nspname = 'public' AND t.typtype = 'e'\n    ) LOOP\n        EXECUTE format('DROP TYPE IF EXISTS public.%I CASCADE', obj.typname);\n    END LOOP;\nEND\n$$;\n</code></pre> <p>Run using:</p> <pre><code>$env:PGPASSWORD = \"Your_Password\"\n&amp; .\\psql.exe -h 51.79.156.217 -U postgres -d qa-dhanman-common -f \"C:\\path\\to\\cleanup.sql\"\nRemove-Item Env:PGPASSWORD\n</code></pre> <p>Repeat for each DB (<code>qa-dhanman-community</code>, etc.)</p>"},{"location":"system/operations/deployment/dump_restore_clean/#step-3-restore-into-ovh-qa-from-local-sql-files","title":"\ud83d\udd04 Step 3: Restore into OVH QA from Local <code>.sql</code> Files","text":"<pre><code>$env:PGPASSWORD = \"Your_Password\"\n\n# COMMON\n.\\psql.exe -h 51.79.156.217 -U postgres -d qa-dhanman-common -f \"C:\\Users\\SAI\\Desktop\\b2aBKqa\\qa-common-backup.sql\"\n\n# COMMUNITY\n.\\psql.exe -h 51.79.156.217 -U postgres -d qa-dhanman-community -f \"C:\\Users\\SAI\\Desktop\\b2aBKqa\\qa-community-backup.sql\"\n\n# SALES\n.\\psql.exe -h 51.79.156.217 -U postgres -d qa-dhanman-sales -f \"C:\\Users\\SAI\\Desktop\\b2aBKqa\\qa-sales-backup.sql\"\n\n# PURCHASE\n.\\psql.exe -h 51.79.156.217 -U postgres -d qa-dhanman-purchase -f \"C:\\Users\\SAI\\Desktop\\b2aBKqa\\qa-purchase-backup.sql\"\n\n# INVENTORY\n.\\psql.exe -h 51.79.156.217 -U postgres -d qa-dhanman-inventory -f \"C:\\Users\\SAI\\Desktop\\b2aBKqa\\qa-inventory-backup.sql\"\n\n# PAYROLL\n.\\psql.exe -h 51.79.156.217 -U postgres -d qa-dhanman-payroll -f \"C:\\Users\\SAI\\Desktop\\b2aBKqa\\qa-payroll-backup.sql\"\n\nRemove-Item Env:PGPASSWORD\n</code></pre>"},{"location":"system/operations/deployment/dump_restore_clean/#summary","title":"\u2705 Summary","text":"Step Description Step 1 Export <code>.sql</code> backups from Azure QA Step 2 Clean all objects in OVH QA DBs (<code>public</code> schema) Step 3 Restore <code>.sql</code> backups into OVH QA DBs"},{"location":"system/operations/deployment/qa_deployment_guide/","title":"\u2705 QA Deployment Setup for Dhanman Microservices (QA Environment)","text":"<p>This guide walks through the complete setup to deploy and serve multiple .NET microservices in the QA environment using systemd, NGINX, and HTTPS via Let's Encrypt.</p>"},{"location":"system/operations/deployment/qa_deployment_guide/#1-build-and-publish-the-net-app","title":"\ud83d\udce6 1. Build and Publish the .NET App","text":"<p>Use the following command to publish your app for Linux:</p> <pre><code>dotnet publish -c Release -r linux-x64 --self-contained false -o ./publish\n</code></pre> <ul> <li><code>-r linux-x64</code>: Targets Linux 64-bit</li> <li><code>--self-contained false</code>: Uses framework-dependent deployment</li> <li><code>-o ./publish</code>: Output folder</li> </ul>"},{"location":"system/operations/deployment/qa_deployment_guide/#2-create-folder-and-deploy-to-server","title":"\ud83d\udcc1 2. Create Folder and Deploy to Server","text":""},{"location":"system/operations/deployment/qa_deployment_guide/#create-folder-on-the-droplet","title":"Create folder on the droplet:","text":"<pre><code>sudo mkdir -p /var/www/qa/&lt;service-folder&gt;\n</code></pre>"},{"location":"system/operations/deployment/qa_deployment_guide/#upload-files-from-local","title":"Upload files from local:","text":"<pre><code>scp -r ./publish/* root@&lt;droplet-ip&gt;:/var/www/qa/&lt;service-folder&gt;\n</code></pre> <p>Replace <code>&lt;service-folder&gt;</code> with the service name, e.g., <code>dhanman-common</code>.</p>"},{"location":"system/operations/deployment/qa_deployment_guide/#3-create-systemd-service","title":"\u2699\ufe0f 3. Create systemd Service","text":""},{"location":"system/operations/deployment/qa_deployment_guide/#create-service-file","title":"Create service file:","text":"<pre><code>sudo nano /etc/systemd/system/&lt;service-name&gt;-qa.service\n</code></pre>"},{"location":"system/operations/deployment/qa_deployment_guide/#paste-this-content","title":"Paste this content:","text":"<pre><code>[Unit]\nDescription=&lt;Service Name&gt; - QA\nAfter=network.target\n\n[Service]\nWorkingDirectory=/var/www/qa/&lt;service-folder&gt;\nExecStart=/usr/bin/dotnet /var/www/qa/&lt;service-folder&gt;/&lt;ServiceDll&gt;.dll --urls \"http://localhost:&lt;port&gt;\"\nRestart=always\nRestartSec=10\nKillSignal=SIGINT\nSyslogIdentifier=&lt;service-name&gt;-qa\nUser=root\nEnvironment=ASPNETCORE_ENVIRONMENT=QA\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"system/operations/deployment/qa_deployment_guide/#reload-and-start-the-service","title":"Reload and start the service:","text":"<pre><code>sudo systemctl daemon-reload\nsudo systemctl enable &lt;service-name&gt;-qa\nsudo systemctl start &lt;service-name&gt;-qa\nsudo systemctl status &lt;service-name&gt;-qa\n</code></pre>"},{"location":"system/operations/deployment/qa_deployment_guide/#4-configure-nginx-reverse-proxy","title":"\ud83c\udf10 4. Configure NGINX Reverse Proxy","text":""},{"location":"system/operations/deployment/qa_deployment_guide/#create-nginx-config","title":"Create NGINX config:","text":"<pre><code>sudo nano /etc/nginx/sites-available/&lt;service-name&gt;\n</code></pre>"},{"location":"system/operations/deployment/qa_deployment_guide/#paste","title":"Paste:","text":"<pre><code>server {\n    listen 80;\n    server_name &lt;subdomain&gt;.dhanman.com;\n\n    location / {\n        proxy_pass http://localhost:&lt;port&gt;;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection keep-alive;\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n</code></pre>"},{"location":"system/operations/deployment/qa_deployment_guide/#enable-and-reload","title":"Enable and reload:","text":"<pre><code>sudo ln -s /etc/nginx/sites-available/&lt;service-name&gt; /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n</code></pre>"},{"location":"system/operations/deployment/qa_deployment_guide/#5-setup-https-with-certbot","title":"\ud83d\udd10 5. Setup HTTPS with Certbot","text":"<p>Ensure the DNS record for <code>&lt;subdomain&gt;.dhanman.com</code> points to your droplet.</p>"},{"location":"system/operations/deployment/qa_deployment_guide/#run-certbot","title":"Run Certbot:","text":"<pre><code>sudo certbot --nginx -d &lt;subdomain&gt;.dhanman.com\n</code></pre> <p>Choose: <pre><code>2: Redirect - Make all requests redirect to secure HTTPS\n</code></pre></p> <p>Certbot will: - Add the HTTPS block - Enable HTTP/2 - Set up auto-renewal</p>"},{"location":"system/operations/deployment/qa_deployment_guide/#6-verify-deployment","title":"\ud83e\uddea 6. Verify Deployment","text":"<ul> <li>\u2705 Visit: <code>https://&lt;subdomain&gt;.dhanman.com</code></li> <li>\ud83d\udd12 Confirm HTTPS lock</li> <li>\ud83c\udf00 Test auto-renew:</li> </ul> <pre><code>sudo certbot renew --dry-run\n</code></pre>"},{"location":"system/operations/deployment/qa_deployment_guide/#7-repeat-for-each-service","title":"\ud83d\udd01 7. Repeat for Each Service","text":"Service Name Port Folder Subdomain systemd Service File dhanman-common 5101 /var/www/qa/dhanman-common qa.common.dhanman.com dhanman-common-qa.service dhanman-sales 5100 /var/www/qa/dhanman-sales qa.sales.dhanman.com dhanman-sales-qa.service dhanman-payroll 5102 /var/www/qa/dhanman-payroll qa.payroll.dhanman.com dhanman-payroll-qa.service ... ... ... ... ... <p>Repeat all above steps for each service with its own: - Folder - Port - Subdomain - systemd and NGINX config</p>"},{"location":"system/operations/deployment/qa_deployment_guide/#8-port-mapping-by-environment","title":"\ud83d\udd22 8. Port Mapping by Environment","text":"<p>Here\u2019s a reference table to manage ports across Dev, QA, and Prod environments:</p> Service Name Dev Port QA Port Prod Port dhanman-common 5001 5101 5201 dhanman-sales 5000 5100 5200 dhanman-payroll 5002 5102 5202 dhanman-purchase 5003 5103 5203 dhanman-inventory 5004 5104 5204 dhanman-myhome 5005 5105 5205 <p>Make sure to update <code>--urls</code> in systemd and <code>proxy_pass</code> in NGINX accordingly for each environment.</p>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/","title":"Dhanman Deployment Setup Guide (QA and PROD)","text":"<p>This document outlines the complete step-by-step deployment process used to deploy Dhanman microservices to DigitalOcean, using GitHub Actions, environment-specific secrets, NGINX, and SSL via Certbot.</p>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#1-github-environment-setup","title":"1. GitHub Environment Setup","text":""},{"location":"system/operations/deployment/qa_prod_deployment_guide/#11-create-environments","title":"1.1 Create Environments","text":"<ul> <li>Go to your GitHub repository.</li> <li>Click on Settings &gt; Environments.</li> <li>Create two environments:</li> <li><code>qa</code></li> <li><code>prod</code></li> </ul>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#12-define-environment-secrets-per-environment","title":"1.2 Define Environment Secrets (per environment)","text":"<p>Go to Settings &gt; Environments &gt; qa/prod &gt; Add Secret:</p> <ul> <li><code>COMMUNITY_DB_CONNECTION</code> \u2013 Full PostgreSQL connection string</li> <li><code>PERMISSIONS_DB_CONNECTION</code> \u2013 Full PostgreSQL connection string</li> <li><code>DO_HOST</code> \u2013 Droplet IP or DNS</li> <li><code>DO_USER</code> \u2013 Droplet SSH user (<code>root</code> or other)</li> <li><code>DO_SSH_KEY</code> \u2013 Private SSH key content</li> </ul>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#2-github-actions-workflow","title":"2. GitHub Actions Workflow","text":""},{"location":"system/operations/deployment/qa_prod_deployment_guide/#21-qa-auto-deployment-triggered-on-merge-to-main","title":"2.1 QA Auto Deployment (triggered on merge to main)","text":"<p>Create the file <code>.github/workflows/deploy-qa.yml</code> with:</p> <pre><code>name: Deploy to QA\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment: qa\n\n    env:\n      ConnectionStrings__CommunityDb: ${{ secrets.COMMUNITY_DB_CONNECTION }}\n      ConnectionStrings__PermissionsDb: ${{ secrets.PERMISSIONS_DB_CONNECTION }}\n      DOTNET_ENVIRONMENT: qa\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up .NET\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: '8.0.x'\n\n      - name: Publish App\n        run: |\n          dotnet publish src/Dhanman.MyHome.Api/Dhanman.MyHome.Api.csproj -c Release -r linux-x64 --self-contained false -o publish\n\n      - name: Upload to QA Droplet\n        uses: appleboy/scp-action@v0.1.4\n        with:\n          host: ${{ secrets.DO_HOST }}\n          username: ${{ secrets.DO_USER }}\n          key: ${{ secrets.DO_SSH_KEY }}\n          source: \"publish/*\"\n          target: \"/var/www/qa/dhanman-community\"\n\n      - name: Restart QA App\n        uses: appleboy/ssh-action@v0.1.10\n        with:\n          host: ${{ secrets.DO_HOST }}\n          username: ${{ secrets.DO_USER }}\n          key: ${{ secrets.DO_SSH_KEY }}\n          script: |\n            export ConnectionStrings__CommunityDb=\"${{ secrets.COMMUNITY_DB_CONNECTION }}\"\n            export ConnectionStrings__PermissionsDb=\"${{ secrets.PERMISSIONS_DB_CONNECTION }}\"\n            export DOTNET_ENVIRONMENT=qa\n            sudo systemctl restart dhanman-community-qa\n            sudo systemctl status dhanman-community-qa --no-pager\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#22-prod-manual-deployment","title":"2.2 PROD Manual Deployment","text":"<p>Create the file <code>.github/workflows/deploy-prod.yml</code> with:</p>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#name-deploy-to-prod-on-workflow_dispatch-jobs-deploy-runs-on-ubuntu-latest-environment-prod-env-connectionstrings__communitydb-secretscommunity_db_connection-connectionstrings__permissionsdb-secretspermissions_db_connection-dotnet_environment-production-steps-name-checkout-uses-actionscheckoutv3-name-set-up-net-uses-actionssetup-dotnetv3-with-dotnet-version-80x-name-publish-app-run-dotnet-publish-srcdhanmanmyhomeapidhanmanmyhomeapicsproj-c-release-r-linux-x64-self-contained-false-o-publish-name-upload-to-prod-droplet-uses-appleboyscp-actionv014-with-host-secretsdo_host-username-secretsdo_user-key-secretsdo_ssh_key-source-publish-target-varwwwproddhanman-community-name-restart-prod-app-uses-appleboyssh-actionv0110-with-host-secretsdo_host-username-secretsdo_user-key-secretsdo_ssh_key-script-export-connectionstrings__communitydb-secretscommunity_db_connection-export-connectionstrings__permissionsdb-secretspermissions_db_connection-export-dotnet_environmentproduction-sudo-systemctl-restart-dhanman-community-prod-sudo-systemctl-status-dhanman-community-prod-no-pager","title":"<pre><code>name: Deploy to PROD\n\non:\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment: prod\n\n    env:\n      ConnectionStrings__CommunityDb: ${{ secrets.COMMUNITY_DB_CONNECTION }}\n      ConnectionStrings__PermissionsDb: ${{ secrets.PERMISSIONS_DB_CONNECTION }}\n      DOTNET_ENVIRONMENT: production\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Set up .NET\n        uses: actions/setup-dotnet@v3\n        with:\n          dotnet-version: '8.0.x'\n\n      - name: Publish App\n        run: |\n          dotnet publish src/Dhanman.MyHome.Api/Dhanman.MyHome.Api.csproj -c Release -r linux-x64 --self-contained false -o publish\n\n      - name: Upload to PROD Droplet\n        uses: appleboy/scp-action@v0.1.4\n        with:\n          host: ${{ secrets.DO_HOST }}\n          username: ${{ secrets.DO_USER }}\n          key: ${{ secrets.DO_SSH_KEY }}\n          source: \"publish/*\"\n          target: \"/var/www/prod/dhanman-community\"\n\n      - name: Restart PROD App\n        uses: appleboy/ssh-action@v0.1.10\n        with:\n          host: ${{ secrets.DO_HOST }}\n          username: ${{ secrets.DO_USER }}\n          key: ${{ secrets.DO_SSH_KEY }}\n          script: |\n            export ConnectionStrings__CommunityDb=\"${{ secrets.COMMUNITY_DB_CONNECTION }}\"\n            export ConnectionStrings__PermissionsDb=\"${{ secrets.PERMISSIONS_DB_CONNECTION }}\"\n            export DOTNET_ENVIRONMENT=production\n            sudo systemctl restart dhanman-community-prod\n            sudo systemctl status dhanman-community-prod --no-pager\n</code></pre>","text":""},{"location":"system/operations/deployment/qa_prod_deployment_guide/#3-digitalocean-setup","title":"3. DigitalOcean Setup","text":""},{"location":"system/operations/deployment/qa_prod_deployment_guide/#31-ssh-key-generation","title":"3.1 SSH Key Generation","text":"<pre><code>ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\ncat ~/.ssh/id_rsa.pub\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#32-create-folder-structure-and-env-files","title":"\ud83d\udcc1 3.2 Create Folder Structure and .env Files","text":"<p>\u2705 Run these on your DigitalOcean droplet via SSH</p>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#step-1-create-qa-prod-directories","title":"Step 1: Create QA &amp; PROD Directories","text":"<pre><code>sudo mkdir -p /var/www/qa/dhanman-community\nsudo mkdir -p /var/www/prod/dhanman-community\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#step-2-add-env-files","title":"Step 2: Add <code>.env</code> Files","text":""},{"location":"system/operations/deployment/qa_prod_deployment_guide/#qa-linux","title":"QA (Linux):","text":"<pre><code>echo \"DOTNET_ENVIRONMENT=qa\" | sudo tee /var/www/qa/dhanman-community/.env\nsudo tee -a /var/www/qa/dhanman-community/.env &gt; /dev/null &lt;&lt;EOL\nASPNETCORE_URLS=http://127.0.0.1:5205\nConnectionStrings__CommunityDb=&lt;QA_COMMUNITY_DB_CONNECTION&gt;\nConnectionStrings__PermissionsDb=&lt;QA_PERMISSIONS_DB_CONNECTION&gt;\nEOL\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#qa-windows-powershell-equivalent","title":"QA (Windows PowerShell Equivalent):","text":"<pre><code>$envPath = \"/var/www/qa/dhanman-community/.env\"\n$qaEnv = @\"\nDOTNET_ENVIRONMENT=qa\nASPNETCORE_URLS=http://127.0.0.1:5205\nConnectionStrings__CommunityDb=&lt;QA_COMMUNITY_DB_CONNECTION&gt;\nConnectionStrings__PermissionsDb=&lt;QA_PERMISSIONS_DB_CONNECTION&gt;\n\"@\nssh root@&lt;droplet_ip&gt; \"echo '$qaEnv' &gt; $envPath\"\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#prod-linux","title":"PROD (Linux):","text":"<pre><code>echo \"DOTNET_ENVIRONMENT=production\" | sudo tee /var/www/prod/dhanman-community/.env\nsudo tee -a /var/www/prod/dhanman-community/.env &gt; /dev/null &lt;&lt;EOL\nASPNETCORE_URLS=http://127.0.0.1:5205\nConnectionStrings__CommunityDb=&lt;PROD_COMMUNITY_DB_CONNECTION&gt;\nConnectionStrings__PermissionsDb=&lt;PROD_PERMISSIONS_DB_CONNECTION&gt;\nEOL\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#prod-windows-powershell-equivalent","title":"PROD (Windows PowerShell Equivalent):","text":"<pre><code>$envPath = \"/var/www/prod/dhanman-community/.env\"\n$prodEnv = @\"\nDOTNET_ENVIRONMENT=production\nASPNETCORE_URLS=http://127.0.0.1:5205\nConnectionStrings__CommunityDb=&lt;PROD_COMMUNITY_DB_CONNECTION&gt;\nConnectionStrings__PermissionsDb=&lt;PROD_PERMISSIONS_DB_CONNECTION&gt;\n\"@\nssh root@&lt;droplet_ip&gt; \"echo '$prodEnv' &gt; $envPath\"\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#33-create-systemd-services","title":"\u2699\ufe0f 3.3 Create <code>systemd</code> Services","text":"<p>Run this on your DigitalOcean droplet via SSH</p>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#qa-service","title":"QA Service","text":"<pre><code>sudo nano /etc/systemd/system/dhanman-community-qa.service\n</code></pre> <p>Paste: <pre><code>[Unit]\nDescription=Dhanman Community QA Service\nAfter=network.target\n\n[Service]\nWorkingDirectory=/var/www/qa/dhanman-community\nExecStart=/usr/bin/dotnet /var/www/qa/dhanman-community/Dhanman.MyHome.Api.dll\nRestart=always\nRestartSec=10\nKillSignal=SIGINT\nSyslogIdentifier=dhanman-community-qa\nUser=www-data\nEnvironmentFile=/var/www/qa/dhanman-community/.env\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#prod-service","title":"PROD Service","text":"<pre><code>sudo nano /etc/systemd/system/dhanman-community-prod.service\n</code></pre> <p>Repeat with path changes.</p>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#enable-start-linux","title":"Enable &amp; Start (Linux):","text":"<pre><code>sudo systemctl daemon-reload\nsudo systemctl enable dhanman-community-qa\nsudo systemctl start dhanman-community-qa\nsudo systemctl enable dhanman-community-prod\nsudo systemctl start dhanman-community-prod\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#34-nginx-reverse-proxy-setup","title":"\ud83c\udf10 3.4 NGINX Reverse Proxy Setup","text":""},{"location":"system/operations/deployment/qa_prod_deployment_guide/#qa-subdomain-config-linux","title":"QA Subdomain Config (Linux)","text":"<pre><code>sudo nano /etc/nginx/sites-available/qa.community.dhanman.com\n</code></pre> <p>Paste: <pre><code>server {\n    listen 80;\n    server_name qa.community.dhanman.com;\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    server_name qa.community.dhanman.com;\n\n    ssl_certificate /etc/letsencrypt/live/qa.community.dhanman.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/qa.community.dhanman.com/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:5205;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection keep-alive;\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n</code></pre></p>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#enable-test-linux","title":"Enable &amp; Test (Linux)","text":"<pre><code>sudo ln -s /etc/nginx/sites-available/qa.community.dhanman.com /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl reload nginx\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#35-certbot-ssl","title":"\ud83d\udd10 3.5 Certbot SSL","text":""},{"location":"system/operations/deployment/qa_prod_deployment_guide/#install-certbot","title":"Install Certbot","text":"<pre><code>sudo apt install certbot python3-certbot-nginx\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#generate-ssl","title":"Generate SSL","text":"<pre><code>sudo certbot --nginx -d qa.community.dhanman.com\nsudo certbot --nginx -d prod.community.dhanman.com\n</code></pre> <p>You're now set up to run multiple services in both QA and PROD environments with automated and manual GitHub deployments, process supervision via systemd, reverse proxy via NGINX, and SSL via Certbot.</p>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#troubleshooting-commands-tips","title":"\ud83d\udd27 Troubleshooting Commands &amp; Tips","text":""},{"location":"system/operations/deployment/qa_prod_deployment_guide/#check-systemd-service-logs","title":"\ud83d\udd0d Check Systemd Service Logs","text":"<pre><code>sudo systemctl status dhanman-community-qa.service\nsudo journalctl -u dhanman-community-qa.service -n 50   # Last 50 logs\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#restart-or-enable-systemd-service","title":"\ud83d\ude80 Restart or Enable Systemd Service","text":"<pre><code>sudo systemctl daemon-reexec\nsudo systemctl daemon-reload\nsudo systemctl restart dhanman-community-qa.service\nsudo systemctl enable dhanman-community-qa.service\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#check-nginx-configuration-reload","title":"\ud83e\uddea Check NGINX Configuration &amp; Reload","text":"<pre><code>sudo nginx -t                       # Test config\nsudo systemctl reload nginx        # Reload after changes\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#test-app-on-localhost","title":"\ud83c\udf10 Test App on Localhost","text":"<pre><code>curl http://127.0.0.1:&lt;port&gt;       # Example: curl http://127.0.0.1:5205\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#check-environment-variables","title":"\ud83d\udd10 Check Environment Variables","text":"<pre><code>echo $ConnectionStrings__CommunityDb\ncat /proc/$(pgrep -f 'Dhanman.MyHome.Api')/environ | tr '\\0' '\\n' | grep ConnectionStrings\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#check-which-port-app-is-running-on","title":"\ud83d\udd0e Check Which Port App is Running On","text":"<pre><code>netstat -tuln | grep LISTEN\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#check-if-nginx-is-listening-to-domain","title":"\ud83d\udd01 Check If NGINX is Listening to Domain","text":"<pre><code>sudo nginx -T | grep server_name\n</code></pre>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#remove-duplicate-server_name-entries","title":"\ud83d\udcc1 Remove Duplicate <code>server_name</code> Entries","text":"<p>Use <code>grep</code> to find duplicates: <pre><code>grep -r \"server_name\" /etc/nginx/sites-available/\n</code></pre> Manually remove extras from unused or backup config files.</p>"},{"location":"system/operations/deployment/qa_prod_deployment_guide/#github-push-blocked-by-secrets","title":"\u274c GitHub Push Blocked by Secrets","text":"<pre><code># Remove secrets from committed files\n# OR use the GitHub UI to allow the secret push temporarily:\nhttps://github.com/&lt;org&gt;/&lt;repo&gt;/security/secret-scanning/unblock-secret/\n</code></pre> <p>Always ensure your <code>.env</code> file and secrets are not committed to GitHub!</p> <p>\u2705 With these tools and steps, you can confidently manage QA and PROD environments hosted on DigitalOcean with secure, automated workflows.</p>"},{"location":"system/operations/monitoring/dashboards/","title":"Monitoring Dashboards","text":"<ul> <li>Grafana: Log insights and service errors</li> <li>Netdata: System-level metrics</li> <li>Uptime-Kuma: HTTP uptime checks</li> </ul>"},{"location":"system/operations/runbooks/qa-refresh-procedure/","title":"QA Refresh Procedure","text":"<ol> <li>Backup QA DBs to B2.</li> <li>Restore from Production backups.</li> <li>Mask sensitive data.</li> <li>Verify services, restart QA containers.</li> </ol>"},{"location":"system/security/","title":"\ud83d\udd12 Security","text":"<p>This section outlines security practices, authentication mechanisms, and secrets management for the Dhanman system.</p>"},{"location":"system/security/#contents","title":"\ud83d\udcd8 Contents","text":""},{"location":"system/security/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<ul> <li>Authentication Flow</li> <li>Common Security Concepts</li> </ul>"},{"location":"system/security/#permissions","title":"Permissions","text":"<ul> <li>Naming Guidelines</li> <li>Sales Module Permissions</li> </ul>"},{"location":"system/security/#secrets-management","title":"Secrets Management","text":"<ul> <li>Managing Secrets</li> </ul>"},{"location":"system/security/#policies","title":"Policies","text":"<ul> <li>Office Etiquette Policy</li> </ul>"},{"location":"system/security/#security-highlights","title":"\ud83e\uddf0 Security Highlights","text":"Area Technology Authentication Auth0 with PostgreSQL integration 2FA SMS-based OTP Encryption TLS (Certbot-managed SSL) Secrets <code>.env</code> files and Ansible Vault <p>\ud83d\udcd8 Next Step: Read the Authentication Flow or review Secrets Management.</p>"},{"location":"system/security/authentication-flow/","title":"Authentication Flow","text":"<ul> <li>Auth0 custom database connection (PostgreSQL)</li> <li>Login  MFA  JWT issued with permissions claims</li> <li>Services validate via DynamicPermissionPolicy \"@</li> </ul> <p>New-MarkdownFile \"system\\security\\authorization-model.md\" @\"</p>"},{"location":"system/security/authentication-flow/#authorization-model","title":"Authorization Model","text":"<ul> <li>Permissions table synced from Auth0</li> <li>[RequiresPermissions] attributes at controller level</li> <li>Gatekeeper CLI validates missing permissions</li> </ul>"},{"location":"system/security/common/","title":"Common Permissions","text":""},{"location":"system/security/common/#accounts-permissions","title":"Accounts Permissions","text":"<ul> <li>Accounts.Read</li> <li><code>Accounts.Read.AccountGroups</code></li> <li><code>Accounts.Read.AccountCategories</code></li> <li><code>Accounts.Read.SalesAccounts</code></li> <li><code>Accounts.Read.PurchaseAccounts</code></li> <li><code>Accounts.Read.BankAccounts</code></li> <li><code>Accounts.Read.CashAccounts</code></li> <li><code>Accounts.Read.BankAndCashAccounts</code></li> <li><code>Accounts.Read.ChartOfAccounts</code></li> <li><code>Accounts.Read.ChildAccounts</code></li> <li>Accounts.Write</li> <li><code>Accounts.Write.AccountGroups</code></li> <li><code>Accounts.Write.AccountCategories</code></li> <li><code>Accounts.Write.ChartOfAccounts</code></li> </ul>"},{"location":"system/security/common/#address-permissions","title":"Address Permissions","text":"<ul> <li>Address.Read</li> <li><code>Address.Read.Countries</code></li> <li><code>Address.Read.States</code></li> <li><code>Address.Read.Cities</code></li> <li><code>Address.Read.Addresses</code></li> </ul>"},{"location":"system/security/common/#company-permissions","title":"Company Permissions","text":"<ul> <li>Company.Read</li> <li><code>Company.Read.Companies</code></li> <li><code>Company.Read.CompanyNames</code></li> <li><code>Company.Read.Company</code></li> <li><code>Company.Read.CompaniesByOrganization</code></li> <li><code>Company.Read.DefaultCompanyByUser</code></li> <li>Company.Write</li> <li><code>Company.Write.Companies</code></li> </ul>"},{"location":"system/security/common/#company-preferences-permissions","title":"Company Preferences Permissions","text":"<ul> <li>CompanyPreferences.Read</li> <li><code>CompanyPreferences.Read.CompanyPreferences</code></li> <li>CompanyPreferences.Write</li> <li><code>CompanyPreferences.Write.CompanyPreferences</code></li> </ul>"},{"location":"system/security/common/#currency-permissions","title":"Currency Permissions","text":"<ul> <li>Currency.Read</li> <li><code>Currency.Read.Currencies</code></li> </ul>"},{"location":"system/security/common/#customers-permissions","title":"Customers Permissions","text":"<ul> <li>Customers.Write</li> <li><code>Customers.Write.Customers</code></li> </ul>"},{"location":"system/security/common/#general-ledgers-permissions","title":"General Ledgers Permissions","text":"<ul> <li>GeneralLedgers.Read</li> <li><code>GeneralLedgers.Read.GeneralLedgers</code></li> <li>GeneralLedgers.Write</li> <li><code>GeneralLedgers.Write.GeneralLedgers</code></li> </ul>"},{"location":"system/security/common/#journal-voucher-permissions","title":"Journal Voucher Permissions","text":"<ul> <li>JournalVoucher.Write</li> <li><code>JournalVoucher.Write.JournalVouchers</code></li> </ul>"},{"location":"system/security/common/#notification-permissions","title":"Notification Permissions","text":"<ul> <li>Notification.Read</li> <li><code>Notification.Read.Notifications</code></li> <li>Notification.Write</li> <li><code>Notification.Write.Notifications</code></li> </ul>"},{"location":"system/security/common/#organization-permissions","title":"Organization Permissions","text":"<ul> <li>Organization.Read</li> <li><code>Organization.Read.OrganizationAccounts</code></li> <li><code>Organization.Read.OrganizationAccountsByCompany</code></li> </ul>"},{"location":"system/security/common/#payments-permissions","title":"Payments Permissions","text":"<ul> <li>Payments.Write</li> <li><code>Payments.Write.Payments</code></li> </ul>"},{"location":"system/security/common/#permissions-management","title":"Permissions Management","text":"<ul> <li>Permissions.Read</li> <li><code>Permissions.Read.Permissions</code></li> </ul>"},{"location":"system/security/common/#public-user-permissions","title":"Public User Permissions","text":"<ul> <li>PublicUser.Read</li> <li><code>PublicUser.Read.PublicUsers</code></li> </ul>"},{"location":"system/security/common/#roles-permissions","title":"Roles Permissions","text":"<ul> <li>Roles.Read</li> <li><code>Roles.Read.Roles</code></li> </ul>"},{"location":"system/security/common/#transaction-permissions","title":"Transaction Permissions","text":"<ul> <li>Transaction.Write</li> <li><code>Transaction.Write.Transactions</code></li> </ul>"},{"location":"system/security/common/#users-permissions","title":"Users Permissions","text":"<ul> <li>Users.Read</li> <li><code>Users.Read.Users</code></li> <li><code>Users.Read.UserNames</code></li> <li>Users.Write</li> <li><code>Users.Write.Users</code></li> </ul>"},{"location":"system/security/common/#vendors-permissions","title":"Vendors Permissions","text":"<ul> <li>Vendors.Write</li> <li><code>Vendors.Write.Vendors</code></li> </ul>"},{"location":"system/security/common/#warehouse-permissions","title":"Warehouse Permissions","text":"<ul> <li>Warehouse.Read</li> <li><code>Warehouse.Read.Warehouses</code></li> <li><code>Warehouse.Read.WarehouseNames</code></li> <li>Warehouse.Write</li> <li><code>Warehouse.Write.Warehouses</code></li> </ul>"},{"location":"system/security/common/#permissions-hierarchy","title":"Permissions Hierarchy","text":""},{"location":"system/security/common/#commonadmin","title":"Common.Admin","text":"<ul> <li>**Permissions.Admin<ul> <li>Permissions.Read</li> <li><code>Permissions.Read.Permissions</code></li> </ul> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ul>"},{"location":"system/security/common/#accountsadmin","title":"Accounts.Admin","text":"<ul> <li>Accounts.Read<ul> <li><code>Accounts.Read.AccountGroups</code></li> <li><code>Accounts.Read.AccountCategories</code></li> <li><code>Accounts.Read.SalesAccounts</code></li> <li><code>Accounts.Read.PurchaseAccounts</code></li> <li><code>Accounts.Read.BankAccounts</code></li> <li><code>Accounts.Read.CashAccounts</code></li> <li><code>Accounts.Read.BankAndCashAccounts</code></li> <li><code>Accounts.Read.ChartOfAccounts</code></li> <li><code>Accounts.Read.ChildAccounts</code></li> </ul> </li> <li>Accounts.Write<ul> <li><code>Accounts.Write.AccountGroups</code></li> <li><code>Accounts.Write.AccountCategories</code></li> <li><code>Accounts.Write.ChartOfAccounts</code></li> </ul> </li> </ul>"},{"location":"system/security/common/#addressadmin","title":"Address.Admin","text":"<ul> <li>Address.Read<ul> <li><code>Address.Read.Countries</code></li> <li><code>Address.Read.States</code></li> <li><code>Address.Read.Cities</code></li> <li><code>Address.Read.Addresses</code></li> </ul> </li> </ul>"},{"location":"system/security/common/#companyadmin","title":"Company.Admin","text":"<ul> <li>Company.Read</li> <li><code>Company.Read.Companies</code></li> <li><code>Company.Read.CompanyNames</code></li> <li><code>Company.Read.Company</code></li> <li><code>Company.Read.CompaniesByOrganization</code></li> <li><code>Company.Read.DefaultCompanyByUser</code></li> <li>Company.Write</li> <li><code>Company.Write.Companies</code></li> </ul>"},{"location":"system/security/common/#companypreferencesadmin","title":"CompanyPreferences.Admin","text":"<ul> <li>CompanyPreferences.Read</li> <li><code>CompanyPreferences.Read.CompanyPreferences</code></li> <li>CompanyPreferences.Write</li> <li><code>CompanyPreferences.Write.CompanyPreferences</code></li> </ul>"},{"location":"system/security/common/#currencyadmin","title":"Currency.Admin","text":"<ul> <li>Currency.Read</li> <li><code>Currency.Read.Currencies</code></li> </ul>"},{"location":"system/security/common/#customersadmin","title":"Customers.Admin","text":"<ul> <li>Customers.Write</li> <li><code>Customers.Write.Customers</code></li> </ul>"},{"location":"system/security/common/#generalledgersadmin","title":"GeneralLedgers.Admin","text":"<ul> <li>GeneralLedgers.Read</li> <li><code>GeneralLedgers.Read.GeneralLedgers</code></li> <li>GeneralLedgers.Write</li> <li><code>GeneralLedgers.Write.GeneralLedgers</code></li> </ul>"},{"location":"system/security/common/#journalvoucheradmin","title":"JournalVoucher.Admin","text":"<ul> <li>JournalVoucher.Write</li> <li><code>JournalVoucher.Write.JournalVouchers</code></li> </ul>"},{"location":"system/security/common/#notificationadmin","title":"Notification.Admin","text":"<ul> <li>Notification.Read</li> <li><code>Notification.Read.Notifications</code></li> <li>Notification.Write</li> <li><code>Notification.Write.Notifications</code></li> </ul>"},{"location":"system/security/common/#organizationadmin","title":"Organization.Admin**","text":"<ul> <li>Organization.Read</li> <li><code>Organization.Read.OrganizationAccounts</code></li> <li><code>Organization.Read.OrganizationAccountsByCompany</code></li> </ul>"},{"location":"system/security/common/#paymentsadmin","title":"Payments.Admin","text":"<ul> <li>Payments.Write</li> <li><code>Payments.Write.Payments</code></li> </ul>"},{"location":"system/security/common/#publicuseradmin","title":"PublicUser.Admin","text":"<ul> <li>PublicUser.Read</li> <li><code>PublicUser.Read.PublicUsers</code></li> </ul>"},{"location":"system/security/common/#rolesadmin","title":"Roles.Admin","text":"<ul> <li>Roles.Read</li> <li><code>Roles.Read.Roles</code></li> </ul>"},{"location":"system/security/common/#transactionadmin","title":"Transaction.Admin","text":"<ul> <li>Transaction.Write</li> <li><code>Transaction.Write.Transactions</code></li> </ul>"},{"location":"system/security/common/#usersadmin","title":"Users.Admin","text":"<ul> <li>Users.Read</li> <li><code>Users.Read.Users</code></li> <li><code>Users.Read.UserNames</code></li> <li>Users.Write</li> <li><code>Users.Write.Users</code></li> </ul>"},{"location":"system/security/common/#vendorsadmin","title":"Vendors.Admin","text":"<ul> <li>Vendors.Write</li> <li><code>Vendors.Write.Vendors</code></li> </ul>"},{"location":"system/security/common/#warehouseadmin","title":"Warehouse.Admin","text":"<ul> <li>Warehouse.Read</li> <li><code>Warehouse.Read.Warehouses</code></li> <li><code>Warehouse.Read.WarehouseNames</code></li> </ul>"},{"location":"system/security/common/#warehousewrite","title":"Warehouse.Write","text":"<ul> <li><code>Warehouse.Write.Warehouses</code></li> </ul>"},{"location":"system/security/office_etiquette_policy/","title":"Office Etiquette Policy","text":""},{"location":"system/security/office_etiquette_policy/#1-introduction","title":"1. Introduction","text":"<ul> <li>Purpose: To establish guidelines for professional behavior and interactions within the workplace.</li> <li>Scope: Applies to all employees, contractors, and visitors within the company premises.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#2-general-conduct","title":"2. General Conduct","text":"<ul> <li>Professionalism: Maintain a professional demeanor at all times.</li> <li>Respect: Treat all colleagues, clients, and visitors with respect and courtesy.</li> <li>Inclusivity: Promote a culture of inclusivity and diversity. Avoid language or actions that could be discriminatory or offensive.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#3-dress-code","title":"3. Dress Code","text":"<ul> <li>Attire: Dress appropriately for your role and the company\u2019s culture. Business casual is generally expected unless specified otherwise.</li> <li>Hygiene: Maintain personal hygiene and presentability.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#4-workstation-etiquette","title":"4. Workstation Etiquette","text":"<ul> <li>Cleanliness: Keep your workstation tidy and organized.</li> <li>Personal Items: Limit personal items at your desk to ensure a professional appearance.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#5-communication","title":"5. Communication","text":"<ul> <li>Email and Messaging: Use professional language in all written communications. Avoid using slang or overly casual language.</li> <li>Meetings: Be punctual for all meetings. Actively participate and respect the meeting agenda.</li> <li>Phone Calls: Keep phone conversations brief and to the point. Use a low volume to avoid disturbing others.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#6-interaction-with-colleagues","title":"6. Interaction with Colleagues","text":"<ul> <li>Collaboration: Work collaboratively and support your team members.</li> <li>Conflict Resolution: Address conflicts professionally and seek assistance from HR if necessary.</li> <li>Privacy: Respect the privacy and personal space of others.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#7-work-hours-and-breaks","title":"7. Work Hours and Breaks","text":"<ul> <li>Punctuality: Adhere to the company\u2019s working hours and inform your supervisor if you will be late or absent.</li> <li>Breaks: Take breaks as scheduled and return to work promptly.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#8-use-of-company-resources","title":"8. Use of Company Resources","text":"<ul> <li>Equipment: Use company equipment responsibly and report any issues or damages immediately.</li> <li>Internet and Email: Use the internet and email for work-related purposes only. Avoid accessing inappropriate websites or sending personal emails during work hours.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#9-health-and-safety","title":"9. Health and Safety","text":"<ul> <li>Workplace Safety: Follow all safety guidelines and report any hazards or accidents to HR immediately.</li> <li>Wellness: Promote a healthy work-life balance and seek support if experiencing stress or burnout.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#10-remote-work-etiquette","title":"10. Remote Work Etiquette","text":"<ul> <li>Availability: Be available during working hours and respond to communications promptly.</li> <li>Virtual Meetings: Follow the same etiquette as in-person meetings. Ensure a professional background and minimize distractions.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#11-compliance-and-enforcement","title":"11. Compliance and Enforcement","text":"<ul> <li>Policy Adherence: All employees are expected to adhere to this policy.</li> <li>Violations: Non-compliance with this policy may result in disciplinary action, up to and including termination.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#12-acknowledgment","title":"12. Acknowledgment","text":"<ul> <li>Employee Confirmation: All employees must sign an acknowledgment form confirming they have read, understood, and will comply with this policy.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#acknowledgment-form","title":"Acknowledgment Form","text":"<p>I, _________, acknowledge that I have read and understood the Office Etiquette Policy of [Company Name]. I agree to comply with the guidelines set forth in this policy.</p> <p>Signature: _____ Date: _______</p>"},{"location":"system/security/office_etiquette_policy/#13-use-of-mobile-devices-and-media-consumption","title":"13. Use of Mobile Devices and Media Consumption","text":""},{"location":"system/security/office_etiquette_policy/#131-general-guidelines","title":"13.1 General Guidelines","text":"<ul> <li>Discretion: Use mobile devices for personal activities discreetly and ensure it does not interfere with your work or distract others.</li> <li>Volume Control: Keep the volume of mobile devices on silent or use headphones to avoid disturbing colleagues.</li> <li>Breaks: Limit personal mobile device usage and media consumption to break times or designated areas.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#132-social-media-and-personal-activities","title":"13.2 Social Media and Personal Activities","text":"<ul> <li>Social Media: Use social media for personal purposes during break times. Avoid using social media during working hours (9-6).</li> <li>Personal Calls and Messages: Keep personal calls and messages brief and handle them during breaks whenever possible.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#133-watching-videos-and-media-content","title":"13.3 Watching Videos and Media Content","text":"<ul> <li>Work Relevance: Watching videos and other media content should be related to work during working hours. Personal videos should be watched during breaks and with headphones.</li> <li>Avoiding Distractions: Ensure that watching videos does not distract colleagues or impact the overall work environment.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#134-designated-areas","title":"13.4 Designated Areas","text":"<ul> <li>Common Areas: Use common areas like break rooms or lounges for watching videos or engaging in personal activities to minimize disruption to others.</li> <li>Quiet Zones: Respect designated quiet zones and avoid using mobile devices or watching videos in these areas.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#135-use-of-company-infrastructure","title":"13.5 Use of Company Infrastructure","text":"<ul> <li>Work Hours: From 9 AM to 6 PM, prioritize using company infrastructure (computers, internet, etc.) for work-related tasks. Personal use of company resources should be limited to break times.</li> <li>After Hours: Personal use of company infrastructure is allowed after 6 PM, provided it does not interfere with the work environment or violate company policies.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#136-impact-on-productivity","title":"13.6 Impact on Productivity","text":"<ul> <li>Productivity: Ensure that personal mobile device usage and media consumption do not negatively impact your productivity or the productivity of others.</li> <li>Performance: Frequent or excessive use of mobile devices for personal activities that impacts performance may be addressed by supervisors.</li> </ul>"},{"location":"system/security/office_etiquette_policy/#137-monitoring-and-compliance","title":"13.7 Monitoring and Compliance","text":"<ul> <li>Monitoring: The company reserves the right to monitor mobile device and company infrastructure usage to ensure compliance with this policy.</li> <li>Compliance: Non-compliance with these guidelines may result in a discussion with your supervisor or, if necessary, further disciplinary action.</li> </ul>"},{"location":"system/security/permissions-naming-guidelines/","title":"\ud83d\udcdc Dhanman Permission Naming Guidelines","text":"<p>This document defines the standard naming convention for all permissions used across the Dhanman platform. Consistent naming improves readability, manageability, and security of permission-driven access control.</p>"},{"location":"system/security/permissions-naming-guidelines/#naming-structure","title":"\ud83e\udde9 Naming Structure","text":"<p>Use the following pattern for every permission:</p> <pre><code>Dhanman.{Module}.{Entity}.{Action}[.SubAction]\n</code></pre>"},{"location":"system/security/permissions-naming-guidelines/#components","title":"\ud83d\udd39 Components","text":"Part Description Example <code>Module</code> The bounded context or domain (e.g., <code>Sales</code>, <code>Purchase</code>) <code>Sales</code>, <code>Payroll</code> <code>Entity</code> The target resource (always in singular form) <code>Invoice</code>, <code>Bill</code>, <code>Customer</code> <code>Action</code> The operation allowed on the entity (verb, in PascalCase) <code>Read</code>, <code>Write</code>, <code>Delete</code> <code>SubAction</code> (Optional) for workflow-specific variations <code>Approve.Level1</code>, <code>SendForApproval</code>"},{"location":"system/security/permissions-naming-guidelines/#examples","title":"\u2705 Examples","text":"Good Permission Name Meaning <code>Dhanman.Sales.Invoice.Read</code> Can view a single or multiple invoices <code>Dhanman.Purchase.Bill.Delete</code> Can delete one or more bills <code>Dhanman.Payroll.Employee.Write</code> Can create or update employee records <code>Dhanman.Sales.Invoice.Approve.Level2</code> Can approve an invoice at Level 2 <code>Dhanman.MyHome.ResidentRequest.Approve</code> Can approve resident requests in MyHome module"},{"location":"system/security/permissions-naming-guidelines/#what-to-avoid","title":"\ud83d\udeab What to Avoid","text":"Bad Permission Name Why it's bad Suggested Fix <code>Dhanman.Approve</code> Missing context \u2014 approve what? <code>Dhanman.Sales.Invoice.Approve</code> <code>Dhanman.Write</code> Too broad and ambiguous <code>Dhanman.Payroll.Employee.Write</code> <code>Dhanman.Sales.Approve</code> Vague \u2014 what in sales is being approved? <code>Dhanman.Sales.Invoice.Approve</code> <code>Dhanman.MyHome.Approve</code> Too generic \u2014 unclear which entity <code>Dhanman.MyHome.ResidentRequest.Approve</code> <code>Dhanman.Invoices.Delete</code> Entity should be singular <code>Dhanman.Sales.Invoice.Delete</code>"},{"location":"system/security/permissions-naming-guidelines/#global-permissions","title":"\ud83d\udd10 Global Permissions","text":"<p>Global permissions grant access across all modules and entities for a specific action. These should be clearly distinguished using the following pattern:</p> <pre><code>Dhanman.Global.{Action}\n</code></pre>"},{"location":"system/security/permissions-naming-guidelines/#examples_1","title":"\u2705 Examples","text":"Global Permission Meaning <code>Dhanman.Global.Read</code> Can read/view everything <code>Dhanman.Global.Write</code> Can write/update across all modules/entities <code>Dhanman.Global.Delete</code> Can delete any entity <code>Dhanman.Global.Approve</code> Can approve anything (across modules/workflows) <p>Use these only for superusers or system administrators.</p>"},{"location":"system/security/permissions-naming-guidelines/#best-practices","title":"\ud83d\udccc Best Practices","text":"<ul> <li>\u2705 Use singular nouns for entities</li> <li>\u2705 Use PascalCase for each component</li> <li>\u2705 Prefer specific, scoped permissions over vague/global ones</li> <li>\u2705 Use <code>SubAction</code> only for meaningful variants like approval levels</li> <li>\u2705 Use <code>Dhanman.Global.{Action}</code> for cross-module admin powers</li> <li>\u2705 Enforce consistent entity names using a controlled ResourceType list</li> </ul>"},{"location":"system/security/permissions-naming-guidelines/#canonical-resourcetypes","title":"\ud83e\uddfe Canonical ResourceTypes","text":"<p>To maintain consistency, use only the following singular-form resource types:</p>"},{"location":"system/security/permissions-naming-guidelines/#common","title":"Common","text":"<ul> <li>Company</li> <li>CompanyWarehouse</li> <li>CompanyPreference</li> <li>User</li> <li>Permission</li> <li>Organization</li> <li>Vendor</li> <li>Customer</li> <li>Ledger</li> <li>COA</li> </ul>"},{"location":"system/security/permissions-naming-guidelines/#purchase","title":"Purchase","text":"<ul> <li>Bill</li> <li>Payment</li> <li>Note</li> <li>VendorWarehouse</li> </ul>"},{"location":"system/security/permissions-naming-guidelines/#sales","title":"Sales","text":"<ul> <li>Invoice</li> <li>Payment</li> <li>Note</li> <li>MyHomeInvoice</li> </ul>"},{"location":"system/security/permissions-naming-guidelines/#myhome","title":"MyHome","text":"<ul> <li>Resident</li> <li>ResidentRequest</li> <li>Visitor</li> <li>Event</li> <li>ServiceProvider</li> <li>Building</li> <li>Unit</li> <li>Floor</li> <li>Gate</li> <li>Delivery</li> <li>Apartment</li> </ul>"},{"location":"system/security/permissions-naming-guidelines/#inventory","title":"Inventory","text":"<ul> <li>Product</li> </ul>"},{"location":"system/security/permissions-naming-guidelines/#payroll","title":"Payroll","text":"<ul> <li>Employee</li> <li>Leave</li> <li>Holiday</li> <li>Task</li> <li>Project</li> <li>PayrollComponent</li> <li>Payroll</li> </ul>"},{"location":"system/security/permissions-naming-guidelines/#developer","title":"Developer","text":"<ul> <li>Token</li> <li>Id</li> </ul>"},{"location":"system/security/permissions-naming-guidelines/#appendix","title":"\ud83d\udcce Appendix","text":""},{"location":"system/security/permissions-naming-guidelines/#common-actions","title":"Common Actions","text":"Action Description <code>Read</code> View resource(s) <code>Write</code> Create or update resource <code>Delete</code> Remove resource <code>Approve</code> Approve workflow item <code>Reject</code> Reject workflow item <code>SendForApproval</code> Submit for approval <code>Copy</code> Clone an item <code>Pay</code> Mark as paid <code>Cancel</code> Cancel action or item <p>Keep your permissions clean, contextual, consistent, and scalable.</p>"},{"location":"system/security/sales/","title":"Permissions Structure","text":""},{"location":"system/security/sales/#address-permissions","title":"Address Permissions","text":""},{"location":"system/security/sales/#addressread","title":"Address.Read","text":"<ul> <li><code>Address.Read.Countries</code></li> <li><code>Address.Read.States</code></li> <li><code>Address.Read.Cities</code></li> </ul>"},{"location":"system/security/sales/#customer-note-permissions","title":"Customer Note Permissions","text":""},{"location":"system/security/sales/#customernoteread","title":"CustomerNote.Read","text":"<ul> <li><code>CustomerNote.Read.CustomerNotes</code></li> </ul>"},{"location":"system/security/sales/#customernotewrite","title":"CustomerNote.Write","text":"<ul> <li><code>CustomerNote.Write.CustomerNote</code></li> <li><code>CustomerNote.Write.CustomerNoteNextStatus</code></li> <li><code>CustomerNote.Write.CustomerNotePreviousStatus</code></li> </ul>"},{"location":"system/security/sales/#customers-permissions","title":"Customers Permissions","text":""},{"location":"system/security/sales/#customersread","title":"Customers.Read","text":"<ul> <li><code>Customers.Read.CustomerNames</code></li> <li><code>Customers.Read.Customers</code></li> <li><code>Customers.Read.Customer</code></li> <li><code>Customers.Read.AddressByCustomerId</code></li> </ul>"},{"location":"system/security/sales/#customerswrite","title":"Customers.Write","text":"<ul> <li><code>Customers.Write.Customer</code></li> <li><code>Customers.Write.Customer</code></li> </ul>"},{"location":"system/security/sales/#git-permissions","title":"Git Permissions","text":""},{"location":"system/security/sales/#gitread","title":"Git.Read","text":"<ul> <li><code>Git.Read.GetAllPRs</code></li> </ul>"},{"location":"system/security/sales/#invoices-permissions","title":"Invoices Permissions","text":""},{"location":"system/security/sales/#invoicesread","title":"Invoices.Read","text":"<ul> <li><code>Invoices.Read.Invoice</code></li> <li><code>Invoices.Read.Invoices</code></li> <li><code>Invoices.Read.InvoiceStatus</code></li> <li><code>Invoices.Read.InvoiceDetail</code></li> <li><code>Invoices.Read.InvoiceHeaders</code></li> <li><code>Invoices.Read.InvoiceHeader</code></li> <li><code>Invoices.Read.InvoiceHeaderByCustomerId</code></li> <li><code>Invoices.Read.PaidInvoiceSummary</code></li> <li><code>Invoices.Read.UnpaidInvoiceSummary</code></li> <li><code>Invoices.Read.OverdueInvoiceSummary</code></li> <li><code>Invoices.Read.TotalAmount</code></li> <li><code>Invoices.Read.InvoiceTotalAmount</code></li> <li><code>Invoices.Read.InvoiceStatusesByCompany</code></li> <li><code>Invoices.Read.InvoiceDefaultStatus</code></li> <li><code>Invoices.Read.InvoiceHeaderIds</code></li> <li><code>Invoices.Read.InvoiceHeaderId</code></li> </ul>"},{"location":"system/security/sales/#invoiceswrite","title":"Invoices.Write","text":"<ul> <li><code>Invoices.Write.Invoice</code></li> <li><code>Invoices.Write.Invoice</code></li> <li><code>Invoices.Write.InvoiceNextStatuses</code></li> <li><code>Invoices.Write.InvoicePreviousStatuses</code></li> <li><code>Invoices.Write.InvoiceHeaderIds</code></li> <li><code>Invoices.Write.InvoiceHeaderId</code></li> </ul>"},{"location":"system/security/sales/#ledger-permissions","title":"Ledger Permissions","text":""},{"location":"system/security/sales/#ledgerread","title":"Ledger.Read","text":"<ul> <li><code>Ledger.Read.CustomerLedger</code></li> </ul>"},{"location":"system/security/sales/#myhome-permissions","title":"MyHome Permissions","text":""},{"location":"system/security/sales/#myhomeread","title":"MyHome.Read","text":"<ul> <li><code>MyHome.Read.MyHomeBatchedInvoices</code></li> <li><code>MyHome.Read.MyHomeBatchedInvoice</code></li> </ul>"},{"location":"system/security/sales/#myhomewrite","title":"MyHome.Write","text":"<ul> <li><code>MyHome.Write.MyHomeInvoice</code></li> <li><code>MyHome.Write.MyHomeBatchedInvoices</code></li> </ul>"},{"location":"system/security/sales/#payments-permissions","title":"Payments Permissions","text":""},{"location":"system/security/sales/#paymentsread","title":"Payments.Read","text":"<ul> <li><code>Payments.Read.InvoicePayments</code></li> </ul>"},{"location":"system/security/sales/#paymentswrite","title":"Payments.Write","text":"<ul> <li><code>Payments.Write.PayInvoices</code></li> </ul>"},{"location":"system/security/sales/#warehouse-permissions","title":"WareHouse Permissions","text":""},{"location":"system/security/sales/#warehouseread","title":"WareHouse.Read","text":"<ul> <li><code>WareHouse.Read.WareHouses</code></li> <li><code>WareHouse.Read.WareHouseNames</code></li> </ul>"},{"location":"system/security/sales/#warehousewrite","title":"WareHouse.Write","text":"<ul> <li><code>WareHouse.Write.WareHouse</code></li> <li><code>WareHouse.Write.WareHouse</code></li> </ul>"},{"location":"system/security/sales/#permissions-hierarchy","title":"Permissions Hierarchy","text":""},{"location":"system/security/sales/#salesadmin","title":"Sales.Admin","text":""},{"location":"system/security/sales/#addressadmin","title":"Address.Admin","text":"<ul> <li>Address.Read<ul> <li><code>Address.Read.Countries</code></li> <li><code>Address.Read.States</code></li> <li><code>Address.Read.Cities</code></li> </ul> </li> </ul>"},{"location":"system/security/sales/#customernoteadmin","title":"CustomerNote.Admin","text":"<ul> <li>CustomerNote.Read<ul> <li><code>CustomerNote.Read.CustomerNotes</code></li> </ul> </li> <li>CustomerNote.Write<ul> <li><code>CustomerNote.Write.CustomerNote</code></li> <li><code>CustomerNote.Write.CustomerNoteNextStatus</code></li> <li><code>CustomerNote.Write.CustomerNotePreviousStatus</code></li> </ul> </li> </ul>"},{"location":"system/security/sales/#customersadmin","title":"Customers.Admin","text":"<ul> <li>Customers.Read<ul> <li><code>Customers.Read.CustomerNames</code></li> <li><code>Customers.Read.Customers</code></li> <li><code>Customers.Read.Customer</code></li> <li><code>Customers.Read.AddressByCustomerId</code></li> </ul> </li> <li>Customers.Write<ul> <li><code>Customers.Write.Customer</code></li> <li><code>Customers.Write.Customer</code></li> </ul> </li> </ul>"},{"location":"system/security/sales/#gitadmin","title":"Git.Admin","text":"<ul> <li>Git.Read<ul> <li><code>Git.Read.GetAllPRs</code></li> </ul> </li> </ul>"},{"location":"system/security/sales/#invoicesadmin","title":"Invoices.Admin","text":"<ul> <li>Invoices.Read<ul> <li><code>Invoices.Read.Invoice</code></li> <li><code>Invoices.Read.Invoices</code></li> <li><code>Invoices.Read.InvoiceStatus</code></li> <li><code>Invoices.Read.InvoiceDetail</code></li> <li><code>Invoices.Read.InvoiceHeaders</code></li> <li><code>Invoices.Read.InvoiceHeader</code></li> <li><code>Invoices.Read.InvoiceHeaderByCustomerId</code></li> <li><code>Invoices.Read.PaidInvoiceSummary</code></li> <li><code>Invoices.Read.UnpaidInvoiceSummary</code></li> <li><code>Invoices.Read.OverdueInvoiceSummary</code></li> <li><code>Invoices.Read.TotalAmount</code></li> <li><code>Invoices.Read.InvoiceTotalAmount</code></li> <li><code>Invoices.Read.InvoiceStatusesByCompany</code></li> <li><code>Invoices.Read.InvoiceDefaultStatus</code></li> <li><code>Invoices.Read.InvoiceHeaderIds</code></li> <li><code>Invoices.Read.InvoiceHeaderId</code></li> </ul> </li> <li>Invoices.Write<ul> <li><code>Invoices.Write.Invoice</code></li> <li><code>Invoices.Write.Invoice</code></li> <li><code>Invoices.Write.InvoiceNextStatuses</code></li> <li><code>Invoices.Write.InvoicePreviousStatuses</code></li> <li><code>Invoices.Write.InvoiceHeaderIds</code></li> <li><code>Invoices.Write.InvoiceHeaderId</code></li> </ul> </li> </ul>"},{"location":"system/security/sales/#ledgeradmin","title":"Ledger.Admin","text":"<ul> <li>Ledger.Read<ul> <li><code>Ledger.Read.CustomerLedger</code></li> </ul> </li> </ul>"},{"location":"system/security/sales/#myhomeadmin","title":"MyHome.Admin","text":"<ul> <li>MyHome.Read<ul> <li><code>MyHome.Read.MyHomeBatchedInvoices</code></li> <li><code>MyHome.Read.MyHomeBatchedInvoice</code></li> </ul> </li> <li>MyHome.Write<ul> <li><code>MyHome.Write.MyHomeInvoice</code></li> <li><code>MyHome.Write.MyHomeBatchedInvoices</code></li> </ul> </li> </ul>"},{"location":"system/security/sales/#paymentsadmin","title":"Payments.Admin","text":"<ul> <li>Payments.Read<ul> <li><code>Payments.Read.InvoicePayments</code></li> </ul> </li> <li>Payments.Write<ul> <li><code>Payments.Write.PayInvoices</code></li> </ul> </li> </ul>"},{"location":"system/security/sales/#warehouseadmin","title":"WareHouse.Admin","text":"<ul> <li>WareHouse.Read<ul> <li><code>WareHouse.Read.WareHouses</code></li> <li><code>WareHouse.Read.WareHouseNames</code></li> </ul> </li> <li>WareHouse.Write<ul> <li><code>WareHouse.Write.WareHouse</code></li> <li><code>WareHouse.Write.WareHouse</code></li> </ul> </li> </ul>"},{"location":"system/security/secrets-management/","title":"Secrets Management","text":"<ul> <li>Stored in .env for Dockerized services.</li> <li>In GitHub Actions  Encrypted Secrets.</li> <li>Access via environment variables on runtime.</li> </ul>"}]}